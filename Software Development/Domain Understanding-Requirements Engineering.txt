Domain Understanding is the Key to Successful System
Development
Ray OffenRay Offen
Division of ICS, Macquarie University, New South Wales, Australia
Developers all too often are in a hurry to start software
design and construction and, as a result, have anunfortunate tendency to overlook, to their cost, thevery signiﬁcant advantages offered by developing a priorand adequate understanding of the surrounding applica-tion domain. There is an alternative, but one that is stillnot taken nearly as seriously as it should be.
Most practising engineers, be they civil, aeronautical,
electrical, chemical, maritime or whatever, would accept
without argument that a clear, concise and unambiguous
understanding of a development project’s speciﬁcapplication domain is an essential precursor to successful
systems development. A civil engineer, tasked with
constructing a hydro-electric dam across a river, wouldconcentrate initially on investigating the geology of the
area, drilling test cores, determining the river’s ﬂow
characteristics, checking the seismic history and so on,
before starting any serious work on speciﬁcation and
design. Similarly, designers of continental shelf oildrilling platforms spend a lot of their time carefully
characterising local weather/storm patterns and the
wave/swell dynamics of the surrounding ocean beforestarting to specify in any detail the requisite platform and
rig. This process of domain exploration and character-
isation, prior to detailed speciﬁcation and design, is acentral, generic activity that is taken very much for
granted in all traditional engineering construction
disciplines.
So, given the ever increasing centrality of software as
the system component that mediates the bulk of thefunctionality, performance, safety and reliability in somany contemporary systems, it is remarkable indeed thatthe roles and utility of this initial domain modelling
process, alluded to above, are generally so poorly
understood and manifestly underutilised by the softwaredevelopment community. I may well be biased, givenmy background as a systems designer (computers,airborne radars, robotics, medical imaging. etc.) but Imust confess that I still ﬁnd it extremely disconcerting totalk to professional software developers who really donot seem to understand or appreciate what domain
modelling involves, nor want to recognise its very
speciﬁc importance in effective requirements engineer-ing and risk management.
Consequently, for this particular Viewpoints column, I
want to offer a few off-the-cuff comments on the natureand importance, to software and systems developers, ofan adequate degree of domain understanding, usually
represented via some form of domain modelling (or, less
frequently, domain engineering ). For present purposes, I
shall make no distinction between the terms domainmodelling and domain engineering, assuming them, toall intents and purposes, to mean fundamentally the sameRequirements Eng (2002) 7:172–175
Ownership and Copyright/C2232002 Springer-Verlag London Limited Requirements
Engineering
Viewpoints
‘Viewpoints’ is a regular section in Requirements Engineeering for airing readers’ views on requirements
engineering research and practice. Contributions that describe results, experiences, biases and research agendasin requirements engineering are particularly welcome. ‘Viewpoints’ is an opportunity for presenting technicalcorrespondence or subjective arguments. So, whether you are a student, teacher, researcher or practitioner, geton your soapbox today and let us know what’s on your mind . . .
Please submit contributions electronically to Viewpoints Editor, Didar Zowghi (didar@it.uts.edu.au).
Contributions less than 2000 words in length are preferred.
Correspondence and offprint requests to: Ray Offen, Director of
JRCASE, E6A 209, Division of ICS, Macquarie University, NSW2109, Australia. Email: roffen@ics.mq.edu.au
thing. Only once domain characterisation becomes much
more widely used and appreciated by software devel-opers will it become worthwhile to debate the domainmodelling versus domain engineering distinction, if,indeed, any exists.
By the term model, in this context, I mean an abstract
representation of phenomena. Abstraction is central to
the whole notion of models, as well as their derivationand use. A model only portrays aspects of worldphenomena which are relevant to the model’s purpose,and, as such, the model stands apart from both thephenomena it portrays and a person’s conceptualisationof such phenomena. Given that software is characterisedby a high degree of complexity, is, to all intents andpurposes, invisible, and that we build software solely bydescribing it, the issue of how we use models torepresent, give meaning to and share descriptions ofsoftware artefacts must be seen as absolutely funda-
mental. The three key models that, as a rule, we have to
build in practice, are those corresponding to theapplication domain, the requirements speciﬁcation andthe system design (see Fig. 1). The speciﬁcationoccupies a special position in this triptych, as a domaindescriptive theory, in that it describes, usually through avariety of models, phenomena shared by both theapplication domain and the resulting system.
My particular emphasis, on making use of models of
the application domain, may seem eccentric to thecurrent generation of software developers,
1but it must
be understood as being grounded very much in my own
personal experience. Born before the ﬁrst true digital,
electronic, stored-program, computer ever ﬂashed a ‘run’light on its console, I spent a couple of decadesdesigning and building a wide variety of computersystems before I ﬁnally became involved in softwareengineering in the mid-1980s. Over the years, in avariety of roles, I have been required to resolve a lot ofproblems with software
2development projects that have
gone off the rails. One of the things that has alwayssurprised me, and continues to surprise me, is how oftenthe concomitant root causes were, and continue to be,requirements related. More speciﬁcally, how frequently
a project’s difﬁculties involved an unfortunate lack of
understanding, by the developers, of key characteristicsof the application domain, exemplifying again and again,
in my mind, Michael Jackson’s notion of ‘denial by prior
knowledge’ [1].
Most of us would accept that successful software
engineering is strongly predicated, in the ﬁrst instance,as is all engineering, on effective speciﬁcation. In fact, aspeciﬁcation can most conveniently be viewed asnothing more, and nothing less, than a domain-
descriptive theory of the application system and its
associated domain (Fig. 1). As a consequence, theactivity of speciﬁcation must always involve carefuldescription, deﬁnition and model building, particularlyof the application domain itself, which serves to groundthe theory (i.e. the speciﬁcation). So from this
perspective, domain modelling becomes an essential
exercise in theory building, as a vital precursor toeffective speciﬁcation, system construction and systemdelivery.
The question that immediately arises is that of how we
should describe the domain. In that we build software
solely by describing it, the issue of how we represent,
give meaning to and share descriptions of softwareartefacts looms large indeed throughout the developmentprocess. Indeed, in software development we need todescribe, interpret and share the multitudinous abstractmodels we construct as developers – domain models,
analysis models, speciﬁcation models, design models,
cognitive models, code models (yes, code is still anabstract model – i.e. a description of the machine states a(physical) computer will eventually execute) and so on.Given this unavoidable plethora of abstractions, asuitable domain model, in an appropriate representation,
can provide a very important mechanism for anchoring
all these abstractions in a concrete reality – i.e. the actualapplication domain. This anchoring can be achieved with
Fig. 1. An illustration of the three key questions that arise in
effective systems engineering. Are the requirements ( abstraction )
appropriate for properly reﬂecting end-user tasks; is the design(reiﬁcation ) adequate for the purpose(s) in hand; and have we
managed all of the risks inherent in the introduction of the newsystem into the application domain? Note that this diagram
emphasises the central position occupied by the speciﬁcation, as
a domain descriptive theory of both the application system andits
associated domain.
1For many years it has been a concern of mine that computer science
and computing undergraduates are not taught about models and
modelling in a much more formal fashion, as opposed to the ad hoc,piecemeal approach that usually prevails.
2One should note that software is always just one component, albeit a
complex and essentially intangible one, of a wider system. Software,as a description, without an underlying computer system, as a means
of execution, is just so much useless abstraction; hence the importance
to software developers of understanding how to build systems, not justproduce software. From now on, when I refer to ‘software’, it willalways be in the context of it being a signiﬁcant system component ofa computer-based system and not an isolated abstraction.Domain Understanding is the Key to Successful System Development 173
something as simple as a glossary or as complex as a
formal mathematical description. A further advantage ofdomain models is that they can embody importantorganisational knowledge, particularly in times of rapidchange when such knowledge can become disconcert-
ingly transient. Activities such as downsizing, business
process re-engineering initiatives and corporate mergerscan all be highly destructive of critical, business,organisation and environment-related tacit knowledge.Traditional industry structures, characterised by theirorganisational and technological longevity have, overthe last couple of decades, been giving way to companieswith ﬂat management hierarchies and transient staff. Inthe process, middle managers, so often an organisation’s‘gatekeepers’, are seen as expendable, so ensuring theloss of, often critical, long-standing, tacit organisational
knowledge. This can serve to make effective domain
modelling more difﬁcult, but it can also be amelioratedby timely and appropriate domain modelling. Given thatmany computer systems embed signiﬁcant amounts ofdomain knowledge within their internal data models, thisis not just a theoretical issue; rather, it is one with verysigniﬁcant practical implications for systems developers.
As I am sure all the readers of this journal are very
well aware, writing an acceptable requirements speciﬁ-cation is a process fraught with many intrinsicdifﬁculties. A good number of these difﬁculties can be
signiﬁcantly ameliorated if an adequate domain model
exists. I will return shortly to the question of what, in agiven context, an ‘adequate domain model’ actually is.For example, typical problems confronting writers ofrequirements speciﬁcations include dealing with multi-ple perspectives, stakeholder identiﬁcation, conﬂictdetection and resolution, priorities, changing context,changing assumptions and the recording of rationale. Asuitably detailed pre-existing domain model can make avery signiﬁcant contribution to dealing constructively
with problem areas such as these. Clearly, domain
models are not, and cannot be, all the same in terms ofthe underlying representations and their relative seman-tic and pragmatic strengths. Two well-known examples,at the opposite ends of what one might call a hard–softspectrum of domain models, are the use of formalmathematical methods (e.g. set theory and logics) tomodel the properties of highly structured domains (e.g.railways and airspace) and Checkland’s ‘rich picture’[2], which serves a crucial role as a domain model in hissoft-systems approach to requirements elicitation and
modelling.
It is not as if we haven’t been told frequently, by
authoritative and well-respected ﬁgures, about the clearadvantages of domain modelling in reducing the risks offailure in software and systems development projects.Over the years, inter alia, Michael Jackson, DinesBjørner and Peter Checkland have all eloquently and
cogently argued, in their unique ways, the case fordomain modelling as an essential precursor to successfulsoftware and system development. In the future,
Bjørner’s papers/reports [3] on modelling the domains
of railway systems and airline logistics are likely to berecognised as classics in the practical application offormal methods to the characterisation and under-standing of safety-critical domains. At what might beregarded as the other end of the systems spectrum,Checkland’s soft-systems ‘rich picture’ constitutes a
domain model that readily encapsulates complex social,
cultural, political and organisational aspects of theapplication domain.
In practice, one can probably characterise domain
models along two dimensions: the degree of applicationdomain coverage (or conceptual depth) and the strength/weakness of the modelling notation’s associatedsemantics and pragmatics. The notion of some sort of
262 classiﬁcation grid then emerges fairly naturally, if
one happens to be interested in that sort of labelling.Despite the fact that the use of the formal mathematicalmethods and the soft-systems approaches to require-ments elicitation and modelling will probably appear tomany readers to be poles apart, they are, in fact, a lotcloser to each other than any software/system develop-
ment paradigm that does not make any explicit and
constructive use of a domain model.
It is often not clear as to what an appropriate domain
model might be in a given development context, and I donot have the space here to explore the issue of domainmodel choice – I am allowed only enough space here tooffer a particular ‘viewpoint’, but not to provide
solutions. In practice, one can start to build useful
domain models in a fairly minimalist manner. Terminol-ogy is crucial in grounding a domain model. Descrip-tions and their scope/span, designations, deﬁnitions,clear distinctions of mood (e.g. indicative versusoptative) [4], glossaries, and so on, are all essentialelements of using terminology to identify domaininvariants. The use of standard development notations,
such as UML, can also be effective – the key is focusing
initially on the domain, with a view to understanding it,and not the eventually-to-be-delivered system. Once youunderstand the perspective I am attempting to present, itwill become fairly obvious as how best to describe theparticular domain that you are concerned with in aspeciﬁc application development. In the end, the one
really crucial advantage domain modelling brings you is
that it provides concrete knowledge, based in the world,that unambiguously grounds the multitudinous abstrac-tions that developers must perforce grapple with as they
174 R. Offen
deﬁne and build new systems. To the extent that you can
achieve this, then you have a lot of the associateddevelopment risks well under control.
About the Author
Professor Offen holds the Chair of InformationTechnology at Macquarie University and simultaneouslyﬁlls the roles of Director of the CSIRO–Macquarie
University Joint Research Centre for Advanced Systems
Engineering (JRCASE) and Honorary Chief ResearchScientist in the CSIRO Division of Mathematical andInformation Sciences (CMIS). Over many years he hashad extensive ﬁrst-hand experience of most aspects ofsystems engineering, especially with respect to comput-ing and communications technology and its effectiveutilisation and commercialisation. His previous positions
include a joint professorial post in the Electronic andElectrical Engineering and Computer Science Depart-
ments at University College London, Assistant TechnicalDirector of the General Electric Company plc, UK,Operations Manager of Imperial Software Technology
Ltd, UK, Manager of the Computer Systems Research
Laboratory at GEC Research Ltd, UK and SeniorLecturer in Physics at the University of Otago, NewZealand.
References
1. Jackson M. Software requirements and speciﬁcations: a lexicon of
practice, principles and prejudices. Addison-Wesley, Reading,MA, 1995
2. Checkland P, Scholes J. Soft systems methodology in action.
Wiley, New York, 1999
3. Bjørner D. http://www.it.dtu.dk/~db/4. Jackson M. The world and the machine. In: Proceedings of the 17th
international conference on software engineering (ICSE), Seattle,WA, April 1995, pp 283–292Domain Understanding is the Key to Successful System Development 175
