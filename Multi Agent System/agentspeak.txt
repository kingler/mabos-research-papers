AgentSpeak	  &	  Jason	  
AgentSpeak	  • Programming	  language	  for	  building	  ra#onal	  agents	  • Belief-­‐Desire-­‐Inten<on	  paradigm:	  – Belief:	  the	  agents	  knowledge	  of	  the	  world	  • Based	  on	  its	  percep)on	  and/or	  inference	  rules	  – Desire:	  situa<on	  the	  agent	  would	  like	  to	  be	  in	  • Goals	  are	  desires	  the	  agent	  is	  currently	  going	  for	  – Inten)on:	  a	  desire	  that	  the	  agent	  is	  commiDed	  to	  • Plan:	  ac<on	  sequence	  for	  a	  speciﬁc	  inten<on	  • Jason	  is	  an	  implementa<on	  of	  the	  AgentSpeak	  language	  using	  Java	  
BDI	  Interpreter	  Loop	  • Agent	  receives	  events.	  Event	  can	  be:	  – External:	  from	  environment	  and/or	  percep<on	  – Internal:	  e.g.:	  a	  belief	  changed,	  a	  plan	  is	  dropped	  • Agent	  searches	  for	  plans	  that	  match	  the	  event	  • Chooses	  one	  plan	  to	  handle	  the	  event:	  – This	  becomes	  the	  new	  inten)on	  • Executes	  the	  ac)ons	  speciﬁed	  by	  the	  plan	  – Execu<ng	  the	  plan,	  new	  events	  may	  be	  generated	  
Belief	  • First-­‐order	  logic	  atoms	  • Example	  – father(darth_vader,	  luke);father(darth_vader,	  leia)	  – sibling(luke,leia)	  • Strong	  nega<on	  operator	  (~)	  is	  available:	  – ~father(uncle_ben,	  luke)	  :	  • I	  know	  that	  Uncle	  Ben	  is	  NOT	  Luke’s	  father	  • Closed	  world	  assump<on	  (not	  operator):	  – not	  father(uncle_ben,	  luke)	  • I	  don’t	  know	  that	  Uncle	  Ben	  is	  Luke’s	  father	  nor	  can	  I	  derive	  it	  from	  the	  known	  facts	  
Rule	  Syntax:	  HEAD	  :-­‐	  BODY.	  Body	  can	  be	  complex	  using	  &	  (and)	  and	  |	  (or)	  operators	  Example:	  sibling(A,B)	  :-­‐	  sibling(B,A).	  sibling(A,B)	  :-­‐	  father(C,A)	  &	  father(C,B).	  	  Note:	  Names	  with	  capital	  le9ers	  mean	  variables.	  All	  variables	  have	  to	  be	  ground	  in	  an	  expression	  to	  succeed.	  	  
Annota<on	  • Believes	  can	  be	  annotated	  to	  dis<nguish	  them	  in	  some	  way	  • Syntax:	  belief[annota<on]	  Example:	  • father(darth_vader,luke)[source(darth_vader)]	  • can_use(luke,force)[source(self)]	  Typical	  use:	  • Source	  of	  belief	  is	  always	  annotated.	  
Goals	  • Achievement	  goal:	  – A	  goal	  that	  we	  want	  to	  achieve	  – Syntax:	  !destroyed(death_star)	  • Test	  goal:	  – A	  goal	  that	  we	  want	  to	  know	  – Syntax:	  ?father(darth_vader,	  luke)	  – Used	  for	  querying	  during	  plan	  execu<on.	  Example:	  • ?sibling(Target,	  X)	  • If	  Target	  is	  ground,	  X	  will	  be	  equal	  to	  one	  of	  Targets	  siblings	  
Events	  Change	  of	  believes	  or	  goals:	  -­‐Belief	  :	  belief	  is	  dropped	  +Belief:	  belief	  is	  added	  -­‐!Goal:	  achievement	  goal	  is	  dropped	  +!Goal:	  achievement	  goal	  is	  added	  -­‐?Goal:	  test	  goal	  is	  dropped	  +?Goal:	  test	  goal	  is	  added	  
Plan	  • The	  program	  of	  an	  agent	  is	  a	  set	  of	  plans	  • Syntax:	  event	  :	  context	  <-­‐	  ac)on1;	  ac)on2;	  ac)on3.	  • Event:	  – A	  plan	  should	  be	  designed	  to	  handle	  an	  event	  – This	  event	  triggers	  the	  plan	  • 	  Context:	  – The	  circumstance	  under	  which	  the	  plan	  can	  be	  executed	  • Body:	  – Sequence	  of	  ac<ons	  that	  will	  be	  executed	  
Plan	  Example1:	  +arrived(Object,	  yavin_4)	  :	  	  Object	  ==	  death_star	  &	  is_at(luke,	  yavin_4)	  	  <-­‐	  !befriend(luke,	  ewoks);	  	  	  !ini<ate_aDack	  	  	  +under_aDack(Object).	  	  Means:	  This	  plan	  is	  triggered	  when	  a	  new	  belief	  is	  added	  that	  an	  Object	  arrived	  at	  Yavin	  4.	  This	  plan	  will	  be	  executed	  if	  the	  Object	  is	  the	  Death	  Star,	  and	  Luke	  is	  at	  Yavin	  4.	  The	  plan	  is:	  Luke	  befriends	  the	  Ewoks,	  we	  ini<ate	  the	  aDack	  and	  we	  will	  believe	  that	  the	  Object	  is	  under	  aDack.	  
Internal	  ac<ons	  Always	  starts	  with	  a	  dot:	  – .stopMAS():	  stops	  the	  system	  – .<me(H,M,S):	  query	  the	  <me	  – .wait(X):	  pause	  for	  X	  milliseconds	  – .random(X):	  query	  a	  random	  number	  0	  <=	  X	  <=	  1	  – .print(…):	  prints	  to	  console	  
Communica<on	  .send(Reciever,	  Type,	  Message)	  	  Types:	  • tell/untell:	  adds/removes	  a	  belief	  • achieve/unachieve:	  adds/removes	  an	  achievement	  goal	  • askOne,	  askIf:	  test	  goals	  – .send(obi_wan,	  askOne,	  ?father(luke),	  Answer)	  – .send(obi_wan,	  askIf,	  ?father(luke))	  
