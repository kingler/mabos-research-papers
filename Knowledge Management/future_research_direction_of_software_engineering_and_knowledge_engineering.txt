See	discussions,	stats,	and	author	profiles	for	this	publication	at:	
https://www.researchgate.net/publication/279062467
Future	Research	Directions	of	Software
Engineering	and	Knowledge	Engineering
Article
		
in
		
International	Journal	of	Software	Engineering	and	Knowledge	Engineering
	·	March	2015
DOI:	10.1142/S0218194015500035
CITATION
1
READS
10
1	author:
Haiping	Xu
University	of	Massachusetts	Dartmouth
57
	
PUBLICATIONS
			
522
	
CITATIONS
			
SEE	PROFILE
All	in-text	references	
underlined	in	blue
	are	linked	to	publications	on	ResearchGate,
letting	you	access	and	read	them	immediately.
Available	from:	Haiping	Xu
Retrieved	on:	24	August	2016
International Journal of Softwar e Engineering and Knowledge Eng ineering  
© World Scientific Publishing Company 
1 
FUTURE RESEARCH DIRECTIONS OF SOFTWARE ENGINEERING AND 
KNOWLEDGE ENGINEERING* 
HAIPING XU 
Computer and Information Science Department, University of Massachusetts Dartmouth  
North Dartmouth, MA 02747, USA 
hxu@umassd.edu 
Received (18 July 2014) 
Revised (22 November 2014) 
Accepted (22 N ovember 2014) 
Software Engineering (SE) and K nowledge Engineering (KE) are cl osely related disciplines with 
goals of turning the development process of software systems an d knowledge-based systems, 
respectively, into engineering disciplines. In particular, they  together can provide systematic 
approaches for engineering inte lligent software systems more ef ficiently and cost-effectively. As 
there is a large overlap between  the two disciplines, the inter play is vital for both to be successful. In 
this paper, we divide the intersection of SE and KE into three subareas, namely Knowledge-
Supported Software Engineering (K SSE), Engineering Knowledge as  a Software (EKaaS), and 
Intelligent Software System Engi neering (ISSE). For each subare a, we describe the challenges along 
with the current trends, and predict the future research direct ions that may have the most potential 
for success. 
Keywords : Software engineering; Knowle dge engineering; Knowledge-suppor ted software 
engineering; Intelligent software systems; Knowledge as a softw are. 
1.   Introduc tion 
To enhance the quality of software systems and effective manage ment of software 
development processes, the discipline of Software Engineering ( SE) was first coined in a 
NATO sponsored international conference in 1968 [1]. The initia l goal of software 
engineering was to apply engineering disciplines to the softwar e development process, in 
order to deal with the so-called “software crisis” problem. Iss ues related to the “software 
crisis” problem include poor software quality, project time and budget being out of 
control, and difficulties in software maintenance due to a lack  of systematic, rigorous and 
measurable development methodo logies. During the past decades, many of the software 
engineering principles and best practices have been successfull y applied to different 
aspects of a software developmen t process such as requirement a nalysis, software design, 
software testing, software maintenance, and software quality as surance [2]. On the other 
hand, in the early 1980s, much of the research in Artificial In telligence (AI) focused on 
the development of Knowledge-Based Systems (KBSs) including exp ert systems, 
 
* This paper is based on an invited talk of the same title given  at the 26th International Conference on Software 
Engineering and Knowledge Engi neering (SEKE 2014), Vancouver, C anada, July 1-3, 2014. 
 
2     H. Xu 
 
supported by proper knowledge representation formalisms and eff icient inference 
mechanisms. However, the developm ent of large commercial KBSs f ailed in many cases, 
which is comparable to the similar situation of “software crisi s” in developing traditional 
s o f t w a r e  s y s t e m s  i n  t h e  l a t e  1 9 6 0 s  [ 3 ] .  A s  a  r e s u l t ,  t h e  n e w  d i scipline Knowledge 
Engineering (KE) emerged with its goal of applying engineering disciplines to the 
development of scalable and large long-living commercial KBSs. Researchers in KE 
initially considered the development of KBSs a transfer process  that converts existing 
human knowledge into knowledge bases, but later realized that s uch a transfer process 
view could not capture an expert’s tacit knowledge for problem- solving capabilities. 
Thus, the process of building KBSs should be more appropriately  viewed as a modeling 
activity during the knowledge-acquisition phase [3]. Since both  K E  a n d  S E  a r e  
essentially modeling processes, they must share many useful pri nciples and 
methodologies in system modeling and engineering. In the following sections, we divide 
the intersection of SE and KE into a number of subareas, and th en discuss about them in 
more details. 
2.   Intersection between S oftware Engineering a nd Knowledge Enginee ring 
Figure 1 shows a mapping of the relationship between SE and KE.  As shown in the 
figure, the intersection of SE and KE is identified as SEKE (So ftware Engineering and 
Knowledge Engineering), which represents the major topic of thi s paper. There are many 
books, journals and proceedings published in the past two decad es that are related to 
SEKE. Among them, the International Conference on Software Engineering and 
Knowledge Engineering  (SEKE) and its associated International Journal of Software 
Engineering and Knowledge Engineering  (IJSEKE) particularly welcome papers for 
sharing methods and results between the two disciplines. A cent ral theme of the IJSEKE 
journal is the interplay between software engineering and knowl edge engineering, for 
example, how knowledge engineering methods can be applied to so ftware engineering, 
and vice versa [4]. This emphasis makes the scope of IJSEKE dif ferent from that of pure 
SE journals such as IEEE Transactions on Software Engineering  (TSE) and ACM 
Transactions on Software Engineering and Methodology  ( T O S E M ) ,  a n d  p u r e  K E  
journals such as IEEE Transactions on Knowledge and Data Engineering  (TKDE) and 
Data and Knowledge Engineering Journal (DKE). 
 
 
Fig. 1. The intersection of software engineering and knowledge engineering 
Future Research Directions of  Software Engineering and Knowledge Engineering    3 
 
In order to study the current trends and the future research di rections of SEKE, we 
divide the intersection of SE and KE into three subareas, namel y Knowledge-Supported 
Software Engineering  ( K S S E ) ,  Engineering Knowledge as a Software  ( E K a a S ) ,  a n d  
Intelligent Software System Engineering  (ISSE). As shown in Fig. 2, the top portion of 
the intersection, i.e., the subarea KSSE, addresses how knowledge engineering methods  
can be applied to software engineering; in other words, how to make the software 
engineering activities more efficient and cost-effective using knowledge-based analysis 
or knowledge-supported systems. A typical example of research i n this area is to analyze 
software engineering data using big data analysis or data minin g approaches. The bottom 
portion of the intersection in Fig. 2 is called EKaaS, which st udies the application of 
software engineering methods to knowledge engineering. Research ers in this subarea 
view a knowledge-based system as a traditional software system,  a n d  s t u d i e s  h o w  t o  
make the development process of KBSs more efficient and cost-ef fective by applying 
software engineering principles and methodologies. An example o f  s u c h  s t u d y  i s  t o  
develop large-scale domain knowledge using modularization princ iple in SE. In the 
middle portion of the intersection in Fig. 2, the subarea is identified as ISSE, which 
focuses on engineering intelligent software systems using both SE and KE methods. 
There are many different types of intelligent software systems nowadays, among which 
some typical examples include knowledge-based software informat ion systems [5], 
ambient intelligent systems [6] , and slow intelligent systems [ 7].  
   
 
Fig. 2. Subareas in the intersec tion of software engineering an d knowledge engineering  
3.   Challenges and Future Research Directions  
Current prevailing technologies such as mobile cloud computing,  big data analysis and 
ambient intelligence, will have strong impacts on the future re search directions of SEKE. 
In the following sections, we study the current and emerging tr ends in each subarea of 
SEKE, and try to predict the po ssible future research direction s in the coming years.  
4     H. Xu 
 
3.1.   Intelligent Software System Engineering (ISSE) 
The initial goal of AI was to build intelligent machines that m ay replace human beings; 
however, researchers later realized that such a goal was not pr actical and realistic, at least 
for the time being. Therefore, in the 1990s, agent-based techni ques became one of the 
major themes of AI for the purpose of building intelligent syst ems that could help human 
beings solve problems rather t han replace them. Although agent- based technologies have 
been quite successfully used to build intelligent software systems in the past two decades, 
new computer-based technologies will inevitably bring us new ch allenges. For example, 
in a recent prediction by Ann Mack , a former Director of Trends potting at JWT 
Worldwide, the smartphone screens will eventually disappear due  t o  t h e  r i s e  o f  t h e  
I n t e r n e t  o f  T h i n g s  ( I o T )  a n d  w e a r a b l e  t e c h n o l o g y  [ 8 ] .  I t  i s  f o r eseeable that with the 
wearable devices, such as smar twatches and smartglasses, becomi ng much popular, more 
and more intelligent software systems will be shifted from desk tops to mobile devices 
and the cloud. Thus how to efficiently and cost-effectively dev elop intelligent software 
systems on mobile devices as well as in the cloud will be a cha llenging research topic in 
the next decade. On the other hand , big data analysis and data mining techniques offer us 
a great opportunity to extract useful knowledge from massive un structured data, which is 
critical for predicting future events or user behaviors in cons tructing practical intelligent 
software systems. A good example of using such techniques in a smart software system is 
to achieve predictive security that can track and predict cyber  threats, in order to prevent 
the system from being attacked. T h i s  a p p r o a c h  c a n  b r i n g  o b v i o u s  advantages over the 
traditional reactive security, wh ere only defensive actions can  be taken when a threat has 
been identified. There are many other possible future research directions in the subarea 
ISSE, for example, it would be challenging to study how to effe ctively develop slow 
intelligent systems that can gradually learn the way how human solves problems without 
extensive training [7]. As another example of current trends, A mbient Intelligence (AmI) 
allows high technology to be seamlessly embedded in our natural  surroundings. As a 
result, users could use such technology in their daily life wit h effortless interactions [6]. 
T h i s  t y p e  o f  s m a r t  s y s t e m s  m a y  p r e s e n t  s o f t w a r e  e n g i n e e r s  n e w  c ritical system 
requirements, for example, a scal able software architecture tha t can integrate many 
different advanced technologies. It is predictable that researc hers in this subarea will face 
many interesting challenges  in the next few years.  
3.2.   Knowledge-Supported Software Engineering (KSSE) 
The goal of KSSE is to improve software development process usi ng knowledge 
engineering methods. Since the success of SE heavily depends on  the experience of the 
software developers, Experience Factory (EF) [9] has become a u seful approach in 
Knowledge-Based Software Engineering (KBSE). Related to this ef fort, Learning 
Software Organization (LSO) studies how to improve software pro cess through 
knowledge discovery, sharing and reuse within software organiza tions [10]. With the 
current prevailing technologies like semantic web and ontologic al engineering, LSO will 
Future Research Directions of  Software Engineering and Knowledge Engineering    5 
 
continue to be an important research area in the next 10 years.  Similarly, Computational 
Intelligence (CI) and Knowledge Discovery and Data mining (KDD)  techniques also 
played important roles in fields such as software quality assur ance, discovery of  software 
defects and project management. T o make a software process more  e f f i c i e n t  a n d  c o s t -
effective, KE methods can be applied in many phases of a softwa r e  p r o c e s s  m o d e l .  A  
recent version of Guide to the So ftware Engineering Body of Kno wledge (SWEBOK 
Guide V3.0) defines 15 Knowledge Areas (KAs) within the field o f software engineering. 
I t  c h a r a c t e r i z e s  t h e  c o n t e n t s  o f  t h e  s o f t w a r e  e n g i n e e r i n g  d i s c i pline, and provides a 
general framework to apply KE i n each KA [11]. In addition, as big data analysis 
techniques and data mining approaches being increasingly used to acquire useful 
knowledge from massive unstructured data, effectively mining so ftware engineering data 
will be an interesting research topic in the coming years [12].  Model checking has been 
one of the most successful approaches in software engineering d uring the past decades; 
however, it is not scalable due to limitations related to the s tate-explosion problem. Thus, 
there is a pressing need to apply knowledge-based techniques to  make the model 
checking approach more scalable an d  p r a c t i c a l  f o r  v e r i f y i n g  s o f tware systems of 
reasonable sizes. As another ex ample, we anticipate in the near future, smart IDEs will 
emerge to support efficient software development. Such IDEs may  automatically acquire 
knowledge from experienced softwa re developers, and detect majo r program errors, 
especially in concurrent programming.   
3.3.   Engineering Knowledge as a Software (EKaaS) 
EKaaS is to use software engineering methods to solve knowledge  engineering problems. 
KE is essentially a modeling process, which shares many common methodologies with 
SE [3]. For example, the concep tual models in KE are similar to  t h e  s o f t w a r e  
architectures in SE; therefore, principles for the development of software architectures 
may be applied to the construction of conceptual models in KE. Similarly, modularization 
of domain knowledge follows the same idea of Component-Based So ftware Engineering 
(CBSE). It is expected that with well-defined interfaces betwee n different modules of the 
domain knowledge established by various individuals or organiza tions, knowledge 
conflict, inconsistency and uncertainty among different modules  may be properly and 
efficiently resolved. When large-scale domain knowledge being developed, knowledge 
defined previously must be reused and possibly required to be t ransformed. This may 
lead to an interesting research direction that studies how soft ware reuse methodologies 
could be applied to the reuse of domain knowledge. Finally, for mal methods play critical 
roles in both SE and KE. Some formal techniques that have been successfully applied in 
SE, such as Petri nets and model checking techniques, may also find their ways in KE to 
support efficient reasoning and formal verification of domain k nowledge. 
4.   Concluding  Remarks      
Although software engineering and knowledge engineering are two  different disciplines 
under the subject of computer science, they are closely related  and overlapped. As more 
6     H. Xu 
 
and more knowledge being acquired using knowledge engineering m ethods, many of the 
software systems can be implemented as intelligent software sup ported by knowledge 
bases and efficient reasoning m echanisms. The development of such software systems 
requires both of the SE and KE disciplines, thus the interplay between SE and KE has 
become much more important than ever before. In this paper, we divide the intersection 
of SE and KE into three subareas, discuss about the current tre nds in each subarea, and 
predict their possible future research directions. It is our be lief that with the new 
technologies, such as big data analysis and mobile cloud comput ing, getting more 
popular, the future research directions of SEKE will be inevita bly influenced.  
Acknowledgments 
The author appreciates the suppo rt and guidance from Dr. S. K. Chang, Editor-in-Chief 
of IJSEKE, and the anonymous reviewers who help improve the pap er. 
References 
[1] P. Naur and B. Randell (Eds.), Software Engineering: Report on  a Conference Sponsored by 
the NATO Science Committee , Garmisch, Germany, October 7-11, 1968. 
[2] C. L. Simons, I. C. Parmee and P. D. Coward, 35 years on: to wh at extent has software 
engineering design ach ieved its goals?, IEE Proceedings - Software , 150(6)  (2003) 337-350. 
[3] R. Studer, V. R. Benjamins and D. Fensela, Knowledge engineerin g: principles and methods, 
Data & Knowledge Engineering , 25(1–2) (1998) 161–197. 
[4] S. K. Chang, Foreword, International Journal of Software Engineering and Knowledge 
Engineering (IJSEKE) , 1(1) (1991).  
[5] P. Devanbu, P. G. Selfridge, B. W. Ballard and R. J. Brachman, A knowledge-based software 
information system, in Proc. of the 12th international co nference on Software engineering 
(ICSE’90) , Nice, France, March 26-30, 1990, pp. 249-261. 
[6] T. Basten, L. Benini, A. Chandrakasan, et al. , Scaling into ambient intelligence, in Proc. of 
the 6th Design, Automation, and Test in Europe Conference (DATE’03) , Munich, Germany, 
March 2003, pp. 76-83. 
[7] S. K. Chang, A general framework for slow intelligence systems,  International Journal of 
Software Engineering and Knowledge Engineering (IJSEKE) , 20(1) (2010) 1-16. 
[8] J. Widman, 8 technologies that a re on the way out – and one that we’ll never be rid of, 
Computerworld , International Data Group Inc. , June 20, 2014. Retrieved on Ju ne 23, 2014 
from http://www.computerworld.com/slideshow/detail/152280 
[9] V. R. Basili1, G. Caldiera and H. D. Rombach, Experience factor y, Encyclopedia of Software 
Engineering , John Wiley & So ns, Inc., 2002. 
[10] A. B irk, T. Dingsøyr, Trends in learning software organizations : current needs and future 
solutions, Professional Knowledge Management , LNCS 3782, Springer Berlin Heidelberg, 
2005, pp. 70-75. 
[11] P. Bourque and R.E. Fairley (Eds.), Guide to the Software Engineering Body of Knowledge , 
Version 3.0, IEEE Co mputer Society, 2014. 
[12] A. E . Hassan and T. Xie, Software intelligence: the future of m ining software engineering 
data, in Proc. of the FSE/SDP Workshop on Futu re of Software Engineering Research 
(FoSER 2010) , November 7-11, 2010, Santa  Fe, NM, USA, pp. 161-166. 
