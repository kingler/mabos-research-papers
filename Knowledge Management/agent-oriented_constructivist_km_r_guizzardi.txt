AGENT-ORIENTED CONSTRUCTIVIST
KNOWLEDGE MANAGEMENT
E
-O
IN
D C
NS
UC
I
T K
OW
DGE
AN
E
ENAG
NT
RE
TE
O
TR
TVIS
N
LE
 M
AG
M
T
RENATA S.S. GUIZZARDIAgent-oriented Constructivist Knowledge 
Management
Renata S. S. Guizzardi
Research in Knowledge Management (KM) has evolved 
substantially in the past 30 years, coming from a 
centralized view of KM processes to a distributed view, 
grounded in organizational and cognitive sciences studies 
that point out the social, distributed, and subjective nature 
of knowledge. However, KM systems still face 
considerable resistance, mainly because they generally 
impose a specific process instead of fitting in the current 
practices of the organization.
This thesis defends a human-centric view on KM, 
proposing Constructivism  as the theoretical framework to 
guide the development of KM systems and practices. In 
general, a constructivist perspective on KM focuses on 
how knowledge emerges, giving great importance to the 
knowledge holders and their natural practices.
Aiming at observing the compliance of the organizational 
environment to the principles that characterize 
Constructivist KM, we propose ARKnowD , an agent-
oriented methodolo gy to develop KM systems. ARKnowD 
places strong emphasis in the earlier phases of software 
development, supporting the analyst  on understanding the 
organizational environment before actually developing a 
system. Furthermore, ARKnowD consistently conducts to 
the design of the proposed solution, modeling the system 
entities, interaction and internal behavior .
In this thesis, we demonstrate the applicability of 
ARKnowD on the analysis of an organizational scenario. 
This analysis leads to the proposal and development of a 
socially-aware recommender system named KARe . The 
core of the system regards a recommendation mechanism, 
based on an innovative information retrieval technique 
presented in this thesis. Our work comprises the 
description, implementation and evaluation of such 
mechanism. 
Renata S.S. G
uizza
dir
Agent-oriented Constructivist
Knowledge Management
Renata S. S. Guizzardi
Enschede, The Netherlands, 2006 
CTIT PhD Thesis Series, No. 06-78 
Samenstelling promotiecommissie:
Vorzitter, secretaris: prof.dr.ir. A. J. Mouthaan (Universiteit Twente)
Promotor: prof.dr. D. Konstantas (University of Geneva)
Assistent Promotor: dr.ir. M.J. van Sinderen (Universiteit Twente)
Leden: prof.dr. G. Wagner (Brandenburg University of Technology at Cottbus)
prof.dr. J. Mylopoulos (University of Toronto)
prof.dr.ir. A. Nijholt (Universiteit Twente)
prof.dr. B. Collis (Universiteit Twente)
dr. L. Aroyo (Eindhoven University of Technology)
CTIT PhD.-thesis series, No. 06-78
ISSN 1381-3617; No. 06-78
ISBN 90-365-2313-3
Centre For Telematics and Information Technology, Universit y of Twente
P.O. Box 217, 7500 AE Enschede, The Netherlands
c/circlecopyrt2006, R.S.S. Guizzardi, The Netherlands
All rights reserved. Subject to exceptions provided for by l aw, no part of this publication may be repro-
duced, stored in a retrieval system, or transmitted, in any f orm or by any means, electronic, mechanical,
photocopying, recording or otherwise, without the prior wr itten permission of the copyright owner. No
part of this publication may be adapted in whole or in part wit hout the prior written permission of the
author.
AGENT-ORIENTED CONSTRUCTIVIST
KNOWLEDGE MANAGEMENT
PROEFSCHRIFT
ter verkrijging van
de graad van doctor aan de Universiteit Twente,
op gezag van de rector magniﬁcus
prof.dr. W.H.M. Zijm,
volgens besluit van het College voor Promoties
in het openbaar te verdedigen
op donderdag 9 februari 2006 om 15.00 uur
door
Renata Silva Souza Guizzardi
geboren op 19 november 1974
te Volta Redonda, Brazili¨ e
Dit proefschrift is goedgekeurd door:
prof.dr. D. Konstantas (promotor) en dr.ir. M.J. van Sindere n
(assistent-promotor).
To each member of my family,
for contributing to this endeavor
in countless ways.
To my husband, Giancarlo Guizzardi,
because life without you would be comparable
to Brazil without football, Holland without bicycles,
and Italy without pasta... simply unconceivable!

Preface
In Ancient Times, when written language was introduced, books and manu-
scripts were often considered sacred. During these times, only a f ew persons
were able to read and interpret them, while most people were li mited in
accepting these interpretations. Then, along with the industr ial revolution
of the XVIII and XIX centuries and especially boosted by the develo pment
of the press, knowledge slowly became available to all people. S imultane-
ously, people were starting to apply machines in the developme nt of their
work, usually characterized by repetitive processes, and especi ally focused
in the production of consuming goods, such as furniture, clocks, clothes and
so on. Following the needs of this new society, it was ﬁnally thr ough sci-
ence that new processes emerged to enable the transmission of know ledge
from books and instructors to learners. Still today, people ga in knowledge
based on these processes, created to fulﬁll the needs of a society in its early
stages of industrialization, thus not being compatible with t he needs of the
information society.
In the information society, people must deal with an overloadi ng amount
of information, by the means of the media, books, besides diﬀer ent telecom-
munication and information systems technology. Furthermore , people’s re-
lation to work has been inﬂuenced by profound changes, for inst ance, knowl-
edge itself is now regarded as a valuable work product and, thu s, the work-
place has become an environment of knowledge creation andlearning . Mod-
iﬁcations in the world economical, political and social scena rios led to the
conclusion that knowledge is thediﬀerential that can lead to innovation and,
consequently, save organizations, societies, and even countrie s from failing
vii
viii
in achieving their main goals.
Focusing on these matters is the Knowledge Management (KM) rese arch
area, which deals with the creation, integration anduseof knowledge, aiming
at improving the performance of individuals and organizati ons. Advances in
this ﬁeld are mainly motivated by the assumption that organiza tions should
focus on knowledge assets (generally maintained by the members of an or-
ganization) to remain competitive in the information societ y’s market. This
thesis argues that KM initiatives should be targeted based on a construc-
tivist perspective. In general, a constructivist view on KM focuses on h ow
knowledge emerges, giving great importance to the knowledge holders and
their natural practices.
With the paragraph above, the reader may already have an intu ition of
how this work faces and targets Knowledge Management, howev er, let us be
more precise. Research in Knowledge Management has evolved sub stantially
in the past 30 years, coming from a centralized view of KM processe s to a dis-
tributed view, grounded in organizational and cognitive sci ences studies that
point out the social, distributed, and subjective nature of kno wledge. The
ﬁrst Knowledge Management Systems (KMSs) were centrally based a nd fol-
lowed a top-down design approach. The organization managers, supported
by knowledge engineers, collected and structured the content s of an organi-
zational memory as a ﬁnished product at design time (before the organiza-
tional memory was deployed) and then disseminated the product , expecting
employees to use it and update it. However, employees often cla imed that
the knowledge stored in the repository was detached from their real work-
ing practices. This led to the development of evolutionary me thods, which
prescribe that the basic KM system is initially developed and evo lves proac-
tively in an on-going fashion. However, most of the initiatives are still based
on building central repositories and portals, which assume stand ardized vo-
cabularies, languages, and classiﬁcation schemes. Consequently, employees’
lack of trust andmotivation often lead to dissatisfaction. In other words,
workers resist on sharing knowledge, since they do not know who is going
to access it and what is going to be done with it. Moreover, the i mportance
attributed to knowledge may give an impression that these centr al systems
ix
take away a valuable asset from his or her owner, without giving appreciable
beneﬁts in return.
The problems highlighted in the previous paragraph may be at tenuated
or even solved if a top-down/bottom-up strategy is applied when proposing
a KM solution. This means that the solution should be sought with a im at
organizational goals (top-down) but at the same time, more at tention should
be given to the knowledge holders and on the natural processes they already
use to share knowledge (bottom-up). Being active agency such an important
principle of Constructivism, this work recognizes that the Agent Paradigm
(ﬁrst deﬁned by Artiﬁcial Intelligence and more recently adop ted by Software
Engineering) is the best approach to target Knowledge Manage ment, taking
a technological and social perspective. Capable of modeling a nd support-
ing social environments, agents is here recognized as a suitabl e solution for
Knowledge Management especially by providing a suitable metaphor used
for modeling KM domains (i.e. representing humans and organi zations) and
systems. Applying agents as metaphors on KM is mainly motivated b y the
deﬁnition of agents as cognitive beings having characterist ics that resemble
human cognition, such as autonomy, reactivity, goals, beliefs, desires, and
social-ability . Using agents as human abstractions is motivated by the fact
that, for speciﬁc problems, such as software engineering and kno wledge man-
agement process modeling, agents may aid the analyst to abstrac t away from
some of the problems related to human complexity, and focus on the impor-
tant issues that impact the speciﬁc goals, beliefs and tasks of age nts of the
domain. This often leads to a clear understanding of the curre nt situation,
which is essential for the proposal of an appropriate solution. The current
situation may be understood by modeling at the same time the over all goals
of the organization, and the needs and wants of knowledge hol ders.
Towards facilitating the analysis of KM scenarios and the deve lopment of
adequate solutions, this work proposes ARKnowD (Agent-oriented Recipe
for Knowledge Management Systems Development). Systems here have a
broad deﬁnition, comprehending both technology-based system s (e.g. in-
formation system, groupware, repositories) and/or human systems, i.e. hu-
man processes supporting KM using non-computational artifacts (e.g. brain-
x
stormings, creativity workshops). The basic philosophical assumpt ions be-
hind ARKnowD are: a) the interactions between human and system sh ould
be understood according to the constructivist principle of self-construction ,
claiming that humans and communities are self-organizing en tities that con-
stantly construct their identities and evolve throughout end less interaction
cycles. As a result of such interactions, humans shape systems and, at the
same time, systems constrain the ways humans act and change; b) KM
enabling systems should be built in a bottom-up approach, aimin g at the
organizational goals, but understanding that in order to fulﬁ ll these goals,
some personal needs and wants of the knowledge holders (i.e. th e organi-
zational members) need to be targeted; and c) there is no “silve r bullet”
when pursuing a KM tailoring methodology and the best approach is com-
bining existing agent-oriented approaches according to the given domain or
situation.
This work shows how the principles above may be achieved by the inte-
gration of two existing work on agent-oriented software engin eering, which
are combined to guide KM analysts and system developers when con ceiv-
ing KM solutions. Innovation in our work is achieved by supporti ng top-
down/bottom-up approaches to KM as mentioned above. The pro posed
methodology does that by strongly emphasizing the earlier pha ses of soft-
ware development, the so-called requirement analysis activity . In this way,
we consider all stakeholders (organizations and humans) as age nts in our
analysis model, and start by understanding their relations bef ore actually
thinking of developing a system. Perhaps the problem may be mor e eﬀec-
tively solved by proposing changes in the business processes, rathe r than
by making use of new technology. And besides, in addition to human s and
organizations, existing systems are also included in the model fr om start,
helping the analyst and designer to understand which functiona lities are
delegated to these so-called artiﬁcial agents. In addition to t hat, beneﬁts as
a result of the application of ARKnowD may be also attributed to o ur choice
of using the proper agent cognitive characteristics in the diﬀ erent phases of
the development cycle.
With the main purpose of exemplifying the use of the proposed met hod-
xi
ology, this work presents a socially-aware recommender agent named KARe
(Knowledgeable A gent for Re commendations). Recommender Systems
may be deﬁned by those that support users in selecting items of the ir need
from a big set of items, helping users to overcome the overwhelmi ng feeling
when facing a vast information source, such as the web, an organi zational
repository or the like. Besides serving as a case for our methodol ogy, this
work also aims at exploring the suitability of the KARe system to sup port
KM processes. Our choice for supporting knowledge sharing throug hques-
tioning and answering processes is again supported by Constructivism pro-
ponents, who understand that social interaction is vital for ac tive knowledge
building. This assumption is also defended by some KM theories, cl aiming
that knowledge is created through cycles of transformation between two
types of knowledge: tacit and explicit knowledge. Up to now, r esearch on
KM has paid much attention to the formalization and exchange ofexplicit
knowledge , in the form of documents or other physical artifacts, often an -
notated with metadata, and classiﬁed by taxonomies or ontolog ies. Inves-
tigations surrounding tacit knowledge have been so far scarce, perhaps by
the complexity of the tasks of capturing and integrating such k ind of knowl-
edge, deﬁned as knowledge about personal experience and valu es, usually
conﬁned on people’s mind. Taking a ﬂexible approach on suppor ting this
kind of knowledge conversion, KARe relies on the potential of so cial interac-
tion underlying organizational practices to support knowle dge creation and
sharing.
The global objective of this work is to support knowledge crea tion and
sharing within an organization, according to its own natural processes and
social behaviors. In other words, this work is based on the assumpti on
that KM is better supported if knowledge is looked at from a con structivist
perspective. To sum up, this thesis aims at:
1) Providing an agent-oriented approach to guide the creati on and evolve-
ment of KM initiatives, by analyzing the organizational pote ntials,
behaviors and processes concerning knowledge sharing;
2) Developing the KARe recommender system, based on a semanticall y
xii
enriched Information Retrieval technique for recommendin g knowledge
artifacts, supporting users to ask and answer to each others’ questi ons.
These objectives are achieved as follows:
- Deﬁning the principles that characterize a Constructivist K M support-
ing environment and understanding how they may be used to suppor t
the creation of more eﬀective KM solutions;
- Providing an agent-oriented approach to develop KM systems. T his
approach is based on the integration of two diﬀerent agent-or iented
software engineering works, proﬁting from their strengths in p roviding
a comprehensive methodology that targets both analysis and de sign
activities;
- Proposing and designing a socially aware agent-oriented reco mmender
system both to exemplify the application of the proposed approa ch and
to explore its potential on supporting knowledge creation an d sharing.
- Implementing an Information Retrieval algorithm to suppor t the pre-
viously mentioned system in generating recommendations. Beside s de-
scribing the algorithm, this thesis brings experimental resul ts to prove
its eﬀectiveness.
Acknowledgements
Culture is said to play an essential part in either motivating or inhibiting
Knowledge Management (KM) practices, meaning that the parti cular norms
and behaviors underlying the organizational environment h ave a direct im-
pact on how people create and share knowledge. The culture theme has been
part of my main interests for a long time, since my teenage years, when I
worked as a volunteer for the AFS Intercultural Programs. And it was also
the will to get to know and experience a diﬀerent cultural bac kground that
drove me to take this PhD in the Netherlands. This also explains m y deep
satisfaction in realizing that this thesis is the result of my int eraction with
an absolutely multi-cultural group of researchers composed of Brazilians,
Greeks, Germans, Italians, Portuguese, Americans, Dutch and Bulg arians.
I feel fortunate and privileged to have worked with such bold, brilliant and
kind people, and I can do no other than expressing my gratitude t o them
all.
I start by thanking my promoter Dimitri Konstantas, who believe d in
me since the earliest stages of my PhD, playing an important part on the
deﬁnition of the scope of my work, and providing me with intere sting in-
sights about what a PhD thesis is all about. I also thank Lora Aroyo for
supervising me for three quarters of my PhD. I particularly ack nowledge
her participation in helping me reﬁne my initial ideas, makin g them more
precise . Additionally, I would like to show my gratitude to all m y colleagues
of the Architecture and Services of Network Applications (ASNA) gr oup for
their friendship and support. I especially thank Val Jones for h elping me
ﬁnd this PhD position. I also express my most sincere appreciation to Aart
xiii
xiv
van Halteren and Marten van Sinderen, who supported me in the la st year of
my work, particularly guiding me in the complex task of writin g this book.
And ﬁnally, I am immensely grateful to Annelies Klos, who assisted me in
a variety of tasks throughout these past four years, making my wor k easier
and more enjoyable.
I feel greatly honored to have Prof. Anton Nijholt, Prof. Betty Collis,
Prof. Gerd Wagner, Prof. John Mylopoulos, and Dr. Lora Aroyo in my
defense committee. I am thankful to them for their dedication in reading
my thesis and participating in my defense.
The starting point of my PhD was the work on the Agent Academy Eu-
ropean Project that was for me a great laboratory in which I wa s able to
experiment ideas and learn. I thank all the members of the pro ject, and espe-
cially Adamantios Koumpis for his incentives and good humor, and Dionisis
Kechagias, Robert Magnus, and Felix Schmid, for the great peer work.
Three outstanding researchers from outside the University of Twe nte
helped me to shape and evolve the contents of this thesis: Gerd Wa gner,
Anna Perini and Virginia Dignum. Gerd was the one to suggest that I fo-
cused on the application of Agents to KM, which then led me to mee t both
Anna and Virginia. I thank him not only for that, but also for bein g so
available in a crucial moment of my PhD, and for triggering a n umber of
relevant discussions without which this work would not have bee n possible.
Anna and Virginia have been more than collaborators, my true fri ends and
partners, supporting me throughout most of my PhD research. I gre atly
admire their dedication and eﬀort on doing high quality resea rch, and I feel
fortunate to have shared lots of pleasant moments with them.
I thank Anna Perini, Gianluca Mameli and Paolo Traverso for giv ing me
the opportunity to visit the Automated Reasoning Systems (SRA) di vision
at the Technological and Scientiﬁc Research Institute (IRST) , in Trento,
Italy, for four months in the Spring/Summer 2003. The rich an d collabo-
rative environment I found there was central for making tang ible the main
topics targeted in my work. In this regard, I am very grateful to Diego
Sona, Amy Soller, Alessandra Molani, Matteo Bonifacio and Rober to Tiella
xv
for their teamwork and great insights. I would also like to show my appre-
ciation to Paolo Giorgini and John Mylopoulos, who gave me the chance to
come back to Trento in April 2005 to ﬁnish writing my thesis, meanw hile
participating in the Tropos Project. Furthermore, I thank Ni cola Fazzi, An-
gelo Susi, the participants of the Tropos PhD lunch meetings, a nd my friends
at the Laboratory of Applied Ontology (LOA) for their contribu tion in the
ﬁnal stages of my work.
For the work on the KARE system, I am immensely indebted to Diego
Sona and Pablo Gomes Ludermir. I am grateful for the unpreten tious way
Diego shared with me his valuable experience on machine learn ing and infor-
mation retrieval. Thanks for the encouragement and the expe rt assistance.
Pablo appeared in a decisive moment of my research, and his enth usiasm
and diligence were vital to accomplish the system implementati on and ex-
perimentation. Very special thanks to him!
I would also like to thank Credin´ e Silva de Menezes (my eterna l tu-
tor), Jos´ e Gon¸ calves Pereira Filho, Sandra Bortolon, Dav idson Cury, Rosane
Caruso and Ricardo Falbo. They are friends from my former Unive rsity in
Brazil and have provided me with great guidance and incentiv es in a special
diﬃcult moment of my work.
I have no words to thank all my family and friends, for contribu ting in
so diverse and peculiar ways for this accomplishment. Some of th ese friends
have greatly contributed to our smooth adjustment to the Nether lands, in-
cluding Alex Slingerland, Marike Hasperhoven, Maarten Wegdam , Susan
ten Buuren, Helen Kool, Gloria Tuquerres, David Bueno, Clever and Kelen
Farias, Ciro Barbosa, Marcos Salvador, Remco and Martina Dijk man, Lia
and Robin van Steijn, Valeria Carazzai, S´ avio Castro, Jos´ e Laurindo dos San-
tos, Valerie Gay, Nikolay Diakov, Galina, and Christian Tsolov. Some others
came later into my life, making it even more enjoyable, like K atarzyna Wac,
Roberta Cuel, Jaqueline Nicolau, Ricardo Neisse, Tiago Fioreze , Stanislav
and Vania Pokraev. And ﬁnally, some compose our Brazilian (or al most!)
family abroad: Junior, Denise, Let´ ıcia and Clara Brand˜ ao, Leonardo Dar-
dengo, Gustavo Moraes, Fabiano Gon¸ calves, Luiz Olavo e Lucian a Bonino,
Mariana Costa, Anton and Thomas Bovens, Peter de Jong, Maura Mer son,
xvi
Jo˜ ao Paulo Almeida, Patricia Dockhorn, Pablo Ludermir, Fla via Machado,
Diana Ros, Diego R´ ıos and Sonia Taborcia. Special thanks to D iego and
Sonia for the great work on the design of this thesis cover. Furt hermore, I
would like to thank all my friends from the Dutch Spiritist Cou ncil for their
ever being so welcoming and kind, with special mention to Maria Moraes,
Dalva Mar¸ cal, and Elias and Virg´ ınia Nascimento. I appreciat e the work we
have done together. And ﬁnally, I thank all the friends and rel atives who are
in Brazil, especially those who came to visit us in our home abroa d. Your
presence (real or virtual) has made our experience much more p leasant and
rewarding.
The love and admiration I feel for my direct family is indescri bable. Hav-
ing Eloi Corveto de Souza and Dalva Silva Souza as my parents i s a great
blessing. All they taught me about life has been mostly fundament al to fa-
cilitate the journey I undertook during these past four years. An d I cannot
imagine my life without my three younger brothers: Luiz Gustav o, V´ ıtor
Estˆ ev˜ ao and Marcelo Henrique Silva Souza. I thank them for al l the light
and joy they bring into my life, and for all I learn from them ev eryday. I am
also very grateful to my grandmas Lydia Mendes Silva (in memor ian) and
Penha Corvetto de Souza, for their aﬀection and uncondition al support.
At last, I must thank the one person without whom none of this woul d
have happened. My husband Giancarlo Guizzardi is my everlasti ng source
of strength, inspiration and happiness. I thank him for being my p erfect
partner in all life adventures! In fact, I am truly positive thi s one was just
the beginning.
List of Figures
1.1 Research approach . . . . . . . . . . . . . . . . . . . . . . . 16
2.1 The relationship between data, information and knowledg e . 23
2.2 The Knowledge Spiral (Nonaka and Takeuchi, 1995) . . . . . 38
2.3 Cognitive balancing process . . . . . . . . . . . . . . . . . . 45
2.4 Illustration of Vygotskys theory . . . . . . . . . . . . . . . . 46
2.5 Knowledge internalization and externalization cycles moti-
vated by the construction of a sharable and concrete artifact 4 7
2.6 An agent interacting with the environment (Wooldridge, 1 999) 51
2.7 The Gaia models (Wooldridge et al., 2000) . . . . . . . . . . 54
2.8 The ROADMAP models (Juan et al., 2002) . . . . . . . . . 56
2.9 The core elements of AOR external models . . . . . . . . . . 67
2.10 The building blocks for Constructivist Knowledge Manage ment 76
3.1 Combining diﬀerent agent-oriented approaches . . . . . . . . 85
3.2 Three application scenarios for ARKnowD . . . . . . . . . . 88
3.3 ARKnowD’s lifecycle . . . . . . . . . . . . . . . . . . . . . . 94
3.4 Diﬀerent kinds of individuals in UFO-A . . . . . . . . . . . . 101
3.5 UFO-A diﬀerentiating between Kind and Role . . . . . . . . 103
3.6 UFO-B: understanding perdurants in details . . . . . . . . . 105
3.7 Extending UFO-C from the UFO-A concept of physical object
and the UFO-B concept of event . . . . . . . . . . . . . . . . 106
3.8 Extending UFO-C from the UFO-A concept of moment indi-
vidual . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
xvii
xviii LIST OF FIGURES
3.9 Pointing out the diﬀerence between physical agent type an d
physical agent role . . . . . . . . . . . . . . . . . . . . . . . 110
3.10 Distinguishing between dependency, delegation and acqu isi-
tion relations . . . . . . . . . . . . . . . . . . . . . . . . . . 111
3.11 (A) an excerpt of the Tropos’s metamodel showing the con-
cept of actor and its specializations and (B) corresponding
notations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
3.12 Correcting two cases of incompleteness . . . . . . . . . . . . 118
3.13 Diﬀerentiating the three types of dependencies, goal an d plan
delegation, and resource acquisition . . . . . . . . . . . . . . 120
3.14 Distinguishing beliefs from non-agentive objects in AOR ML
using stereotypes . . . . . . . . . . . . . . . . . . . . . . . . 120
3.15 MDA metamodel transformation (MDA Guide Version 1.0.1) 1 23
3.16 Tropos actor diagram depicting main agents and depende ncies
from the paper review scenario . . . . . . . . . . . . . . . . . 129
3.17 AOR agent diagram automaticaly generated from previou s
Tropos actor diagram . . . . . . . . . . . . . . . . . . . . . . 130
3.18 Final agent diagram . . . . . . . . . . . . . . . . . . . . . . 131
3.19 Tropos goal diagram specifying the point of view of the PC
Chair agent . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
3.20 AOR Interaction Sequence Diagram . . . . . . . . . . . . . . 138
3.21 AOR Interaction Pattern Diagram . . . . . . . . . . . . . . . 142
3.22 AOR Interaction Frame Diagram . . . . . . . . . . . . . . . 144
3.23 Transformation engine . . . . . . . . . . . . . . . . . . . . . 146
3.24 Actor diagram designed in TAOM4E . . . . . . . . . . . . . 148
3.25 Transformation output ﬁle . . . . . . . . . . . . . . . . . . . 148
4.1 Initial domain model of the scenario . . . . . . . . . . . . . . 160
4.2 Main goal delegations between the agents of the scenario . . 160
4.3 Creating a sustainable relationship between KM Division and
CoP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
4.4 Newcomer’s integration into work on (A) the organization
manager’s perspective and on (B) the newcomer’s point of view 164
LIST OF FIGURES xix
4.5 Newcomer’s perspective when joining a CoP . . . . . . . . . 167
4.6 The internal structure of the CoP . . . . . . . . . . . . . . . 169
4.7 Goal delegations from the CoP to the KARe System . . . . 171
4.8 Performance evaluation aﬀecting participation in CoPs . . . 172
4.9 Peer-to-peer knowledge sharing . . . . . . . . . . . . . . . . 176
5.1 Process of (A) acquiring knowledge, (B) using it for solving a
speciﬁc problem and (C) socializing it with others . . . . . . 187
5.2 A human peer responds to a question when no answer is found
by the system . . . . . . . . . . . . . . . . . . . . . . . . . . 188
5.3 The system retrieves an answer previously stored by another
peer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
5.4 Tropos diagram showing the high level architecture of the
KARe system . . . . . . . . . . . . . . . . . . . . . . . . . . 192
5.5 The distribution of agents within the nodes of KARe’s peer-
to-peer network . . . . . . . . . . . . . . . . . . . . . . . . . 194
5.6 Tropos diagram showing KARe’s high level architecture in
more details . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
5.7 Draft Agent Diagram . . . . . . . . . . . . . . . . . . . . . . 196
5.8 Conceptual Agent Diagram . . . . . . . . . . . . . . . . . . 197
5.9 Design Agent Diagram . . . . . . . . . . . . . . . . . . . . . 199
5.10 The Peer creates a personal taxonomy . . . . . . . . . . . . 201
5.11 The Peer includes a new document in his personal knowledg e
base . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
5.12 The Peer conﬁgures his personal information . . . . . . . . . 2 04
5.13 Mike submits a question to his associated PA . . . . . . . . 206
5.14 Mike’s PA searches for a Peer to directly respond to Mike’s
doubt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
5.15 A Peer responds to Mike’s question . . . . . . . . . . . . . . 210
5.16 The question and answer are stored in Mike’s knowledge repo s-
itory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
5.17 Joey’s question ﬁnds a quick answer . . . . . . . . . . . . . . 214
xx LIST OF FIGURES
5.18 The AM’s internal behavior when the answer to a question is
requested by the PA . . . . . . . . . . . . . . . . . . . . . . 215
5.19 The PA periodically asks other PAs for new artifacts of int er-
ests for its peer . . . . . . . . . . . . . . . . . . . . . . . . . 216
5.20 The PA looks for the answer for a pending question on behalf
of its peer . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
5.21 The PA searches for similar users on behalf of its associated
peer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
5.22 SCALE toolbox . . . . . . . . . . . . . . . . . . . . . . . . . 221
5.23 SCALE integration model . . . . . . . . . . . . . . . . . . . 223
5.24 A layered view of KARe . . . . . . . . . . . . . . . . . . . . 224
5.25 Exerpts of a real estate A) taxonomy and B) ontology . . . . 22 7
6.1 Our view on the information retrieval systems’ general arch i-
tecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239
6.2 Illustrating the inverted documents index . . . . . . . . . . . 2 42
6.3 The cosine function is used to compute the similarity betwee n
a query Q and a document dj . . . . . . . . . . . . . . . . . 246
6.4 Taxonomies of Mike and Joey contextualizing documents a nd
questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
6.5 A short vocabulary index and a vector representing a given
concept C in the user taxonomy . . . . . . . . . . . . . . . . 251
6.6 The evaluation experiment . . . . . . . . . . . . . . . . . . . 256
6.7 Comparison of recall measure taking the standard approach
and our proposed approach using (A) 1 concept, (B) 2 con-
cepts and (C) 3 concepts . . . . . . . . . . . . . . . . . . . . 257
6.8 Reﬁned AOR Agent Diagram . . . . . . . . . . . . . . . . . 260
6.9 KARe’s communication ontology . . . . . . . . . . . . . . . 262
6.10 AOR Interaction Frame Diagram explicitating interfac e be-
tween PA and AM . . . . . . . . . . . . . . . . . . . . . . . 263
6.11 UML Sequence Diagram modeling the indexing process . . . 26 5
6.12 UML Sequence Diagram modeling the searching process . . . 26 6
6.13 A screenshot of the desktop prototype . . . . . . . . . . . . 268
LIST OF FIGURES xxi
6.14 Two components composing the desktop prototype . . . . . 269
6.15 Extra component for the development of the handheld pro totype271
6.16 Distribution of the ﬁxed and handheld components . . . . . 2 71
6.17 Screenshots of the handheld prototype . . . . . . . . . . . . 273
xxii LIST OF FIGURES
List of Tables
1.1 Thesis Research Questions . . . . . . . . . . . . . . . . . . . 13
2.1 Groupware taxonomy based on time and space . . . . . . . . 30
2.2 Comparing methodologies . . . . . . . . . . . . . . . . . . . 73
3.1 ARKnowD’s viewpoints . . . . . . . . . . . . . . . . . . . . 125
3.2 Mapping Tropos into AORML . . . . . . . . . . . . . . . . . 127
3.3 Textual description of the rule R1 representing the PC Chai r’s
reactive behavior . . . . . . . . . . . . . . . . . . . . . . . . 143
4.1 The requirements elicited for the KARe system . . . . . . . 175
4.2 Summary of Tropos’s constructs and analysis techniques il-
lustrated in this chapter . . . . . . . . . . . . . . . . . . . . 179
5.1 Relevant user characteristics when searching for knowledg e . 184
5.2 Textual description of the rule R1 of the AM . . . . . . . . . 215
5.3 Classifying KM systems classiﬁed according to the layered
model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
6.1 Some statistics regarding the experiment taxonomies . . . . 254
6.2 Experiment results . . . . . . . . . . . . . . . . . . . . . . . 256
7.1 Relation between KARe’s requirements and the Construc-
tivist KM building blocks . . . . . . . . . . . . . . . . . . . 290
xxiii
xxiv LIST OF TABLES
Contents
Preface vii
Acknowledgements xiii
List of Figures xvii
List of Tables xxiii
1 Introduction 1
1.1 Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.1.1 Challenges of the Information Society . . . . . . . . . 3
1.1.2 Towards a Human-centric Knowledge Management Per-
spective . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.2 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.2.1 Constructivism and Knowledge Management . . . . . 6
1.2.2 Agent-oriented Knowledge Management . . . . . . . 9
1.3 Thesis Scope and Objectives . . . . . . . . . . . . . . . . . . 12
1.3.1 Research Questions . . . . . . . . . . . . . . . . . . . 12
1.3.2 Objectives . . . . . . . . . . . . . . . . . . . . . . . . 13
1.4 Research Approach . . . . . . . . . . . . . . . . . . . . . . . 15
1.5 Thesis Structure . . . . . . . . . . . . . . . . . . . . . . . . . 17
2 Theoretical Framework 19
2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.2 Knowledge Management . . . . . . . . . . . . . . . . . . . . 22
2.2.1 Deﬁnitions . . . . . . . . . . . . . . . . . . . . . . . . 22
xxv
xxvi CONTENTS
2.2.2 Knowledge Management Systems . . . . . . . . . . . 26
2.2.3 Main Challenges . . . . . . . . . . . . . . . . . . . . 34
2.2.4 Theoretical Background . . . . . . . . . . . . . . . . 36
2.3 Constructivism . . . . . . . . . . . . . . . . . . . . . . . . . 43
2.3.1 Jean Piaget: Genetic Epistemology . . . . . . . . . . 44
2.3.2 Lev Vygotsky: Social-historic Constructivism . . . . 46
2.3.3 Seymour Papert: Constructionism . . . . . . . . . . . 46
2.3.4 Paulo Freire: Dialogue enables Learning . . . . . . . 47
2.4 The Agent-oriented Paradigm . . . . . . . . . . . . . . . . . 48
2.4.1 Agents’ Deﬁnitions and Attributes . . . . . . . . . . 50
2.4.2 Agent-oriented Software Engineering
Methodologies and Languages . . . . . . . . . . . . . 53
2.5 Building Blocks for Constructivist
Knowledge Management . . . . . . . . . . . . . . . . . . . . 71
2.6 Towards Agent-oriented Constructivist
Knowledge Management . . . . . . . . . . . . . . . . . . . . 77
3 The ARknowD Methodology 81
3.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
3.2 Scenarios of Applicability . . . . . . . . . . . . . . . . . . . . 87
3.3 Activities and Lifecycle . . . . . . . . . . . . . . . . . . . . . 90
3.4 The Use of Agent Mentalistic Concepts . . . . . . . . . . . . 96
3.5 Towards an Ontology for the Domain of
Agents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
3.5.1 UFO-A: Endurants and Perdurants . . . . . . . . . . 100
3.5.2 UFO-B: an Ontology of Perdurants . . . . . . . . . . 104
3.5.3 Extending UFO-C . . . . . . . . . . . . . . . . . . . 105
3.6 Evaluating ARKnowD’s Notation . . . . . . . . . . . . . . . 114
3.6.1 Evaluation Method . . . . . . . . . . . . . . . . . . . 114
3.6.2 Evaluation . . . . . . . . . . . . . . . . . . . . . . . . 116
3.7 MDA-inspired Transformation Method . . . . . . . . . . . . 121
3.7.1 The Model Driven Architecture Viewpoints . . . . . 121
3.7.2 ARKnowD’s Viewpoints and Models . . . . . . . . . 123
CONTENTS xxvii
3.7.3 ARKnowD’s Transformations: Converting Tropos into
AORML . . . . . . . . . . . . . . . . . . . . . . . . . 126
3.8 Working Example and Methodological
Guidelines . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
3.9 Automated Support . . . . . . . . . . . . . . . . . . . . . . . 143
3.10 Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . 149
3.11 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
4 Domain and System Analysis 155
4.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
4.2 Knowledge Management in CoPs:
a Fictitious Scenario . . . . . . . . . . . . . . . . . . . . . . 157
4.3 The Domain Stakeholders . . . . . . . . . . . . . . . . . . . 159
4.4 Focusing on the Perspective of the
Newcomer . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
4.5 Joining a Community of Practice . . . . . . . . . . . . . . . 167
4.6 Adding New Agents: Detailing the CoP
Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
4.7 Identifying the Needs for the KARe System Agent . . . . . . 170
4.8 Adjusting the Evaluation Method . . . . . . . . . . . . . . . 172
4.9 The Conducted Analysis in Light of
Constructivist KM . . . . . . . . . . . . . . . . . . . . . . . 173
4.10 Focusing Closer on the KARe System
Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . 175
4.11 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
5 The KARe System 181
5.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
5.1.1 User Modeling in KARe . . . . . . . . . . . . . . . . 183
5.1.2 Using KARe to Ask and Answer Questions . . . . . . 186
5.1.3 Proactive Knowledge Delivery . . . . . . . . . . . . . 190
5.2 Architectural Design . . . . . . . . . . . . . . . . . . . . . . 191
5.3 Detailed Design . . . . . . . . . . . . . . . . . . . . . . . . . 196
5.3.1 Behavior and Interaction Modeling . . . . . . . . . . 199
xxviii CONTENTS
5.4 Integration with Other Systems . . . . . . . . . . . . . . . . 220
5.5 Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . 223
5.5.1 Materializing the Semantic Model . . . . . . . . . . . 225
5.5.2 Supporting the Adaptation and Presentation
Layers . . . . . . . . . . . . . . . . . . . . . . . . . . 229
5.5.3 Using the Layered Model to Classify KM Systems . . 231
5.6 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
6 Recommendation Algorithm and Implementations 235
6.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
6.2 Information Retrieval . . . . . . . . . . . . . . . . . . . . . . 238
6.2.1 Text Pre-processing . . . . . . . . . . . . . . . . . . . 240
6.2.2 Indexing . . . . . . . . . . . . . . . . . . . . . . . . . 241
6.2.3 Searching . . . . . . . . . . . . . . . . . . . . . . . . 242
6.2.4 Modeling . . . . . . . . . . . . . . . . . . . . . . . . 244
6.2.5 Evaluation . . . . . . . . . . . . . . . . . . . . . . . . 247
6.3 Recommendation Algorithm . . . . . . . . . . . . . . . . . . 248
6.3.1 Description . . . . . . . . . . . . . . . . . . . . . . . 249
6.3.2 Evaluation . . . . . . . . . . . . . . . . . . . . . . . . 254
6.4 Concluding KARe’s Detailed Design . . . . . . . . . . . . . 259
6.4.1 Agent Communication Ontology . . . . . . . . . . . . 261
6.4.2 Interaction Modeling . . . . . . . . . . . . . . . . . . 262
6.5 Prototypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
6.5.1 Desktop Prototype . . . . . . . . . . . . . . . . . . . 268
6.5.2 Handheld Prototype . . . . . . . . . . . . . . . . . . 270
6.6 Related Work . . . . . . . . . . . . . . . . . . . . . . . . . . 274
6.7 Conclusions and Future Work . . . . . . . . . . . . . . . . . 275
7 Conclusion 279
7.1 Results Overview . . . . . . . . . . . . . . . . . . . . . . . . 279
7.2 Research Questions Revisited . . . . . . . . . . . . . . . . . 282
7.2.1 Applying Agents to Support Constructivist
Knowledge Management . . . . . . . . . . . . . . . . 283
CONTENTS xxix
7.2.2 Developing a Methodology to Support Knowledge Man-
agement . . . . . . . . . . . . . . . . . . . . . . . . . 284
7.2.3 Using KARe to Support Constructivist KM . . . . . 289
7.3 Future Work . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
7.3.1 Moving Forward with the Work on ARKnowD . . . . 295
7.3.2 Future Developments on KARe . . . . . . . . . . . . 296
Bibliography 301
xxx CONTENTS
Chapter 1
Introduction
“Perplexity is the beginning of knowledge.”
Kahlil Gibran
This chapter discusses the motivations behind this work, also pr esenting
some background information. With this, it brings our work in l ine with the
developments in Knowledge Management and provides the ﬁrst ﬂ avor of our
own views regarding this ﬁeld. The chapter also describes the o bjectives of
the thesis and the approach used to achieve these objectives.
This chapter is organized as follows: section 1.1 presents the m ain motiva-
tions behind this work; section 1.2 focuses on some background i nformation,
thus giving the context in which this thesis has been develope d; section 1.3
describes the research questions that guided our research and cl early sets
up the objectives of this work; section 1.4 discusses the research approach
used to achieve the proposed objectives; and ﬁnally, section 1.5 presents the
structure of the remaining of this thesis.
1.1 Motivation
An ever changing and competitive market forced people to ﬁnd n ew ways
to improve their performance. They must maintain themselves u p to date,
seeking for new knowledge and improving their competences an d skills. Con-
currently, these changes had similar impacts within organiza tional settings.
1
2 Introduction
Mainly aiming at staying in business or seeking for higher proﬁts, organiza-
tions need support for fostering innovation and boosting produ ction. Knowl-
edge Management (KM) is appointed as a solution for both organ izations
and individuals to achieve excellence in performance (Alavi and Leidner,
1999) (Nonaka and Takeuchi, 1995) (Wiig, 1994).
KM may be broadly deﬁned as tools, techniques andprocesses for the
most eﬀective and eﬃcient management of intellectual assets (e .g. products
and process documentation, historical records, and informati on related to or-
ganizational member’s personal experience and intuition). In other words,
KM deals with providing the right information to the right pe ople, at the
right time (Fischer and Ostwald, 2001). This task is at the same ti me sup-
ported and challenged by the technological advances brough t by the new era
of the information society. On one hand, these advances have gr anted people
with more ready access to information. But as a side eﬀect, peop le must
cope with great amounts of information that is constantly bei ng broadcasted
over the Internet and through organizational Intranets. In t his context, one
might ask the following questions: how can one separate valuable from use-
less information? Assuming that a lot of what is broadcasted may be of use,
how to process so much information? How to determine if an inform ation
source is trustworthy or not? These are common problems faced bo th by
individuals and by organizations. In addition to that, organ izations also face
other diﬃculties, such as: a) guaranteeing an eﬀective knowled ge ﬂow among
its employees, in order to foster innovation and new knowledge creation; and
b) making sure that, in case one employee leaves, his/her knowled ge is kept.
This thesis tries to prove that Computer Science can play an im portant role
in providing methodologies and information systems, oﬀering a solution to
many of these problems.
Although being currently popular to provide assistance to the pr oblems
mentioned above, KM systems have often failed to meet their goa ls, espe-
cially due to a general lack of acceptance by the system’s users ( Pumareja
et al., 2003) (Orlikowski, 1992a). This work identiﬁes some of the problems
leading to this lack of acceptance, and presents innovative w ays to solve
them, proposing a methodology to guide the development of KM systems,
Motivation 3
and developing a recommender system that meets the philosophical assump-
tions we consider essential for enabling eﬀective KM both person ally, and
within modern organizations.
1.1.1 Challenges of the Information Society
Applewhite (2004) in his report entitled “The view from the top” provides
a quick assessment of the importance of the Internet in modern soci ety.
The report presents the result of a survey made with 40 technolog y experts
(among business top executive, academic institution’s manage rs, researchers,
and others) regarding technological advances of the past, pre sent and fu-
ture. When questioned about the most important technology of t he last
40 years, 9 interviewees directly mentioned the Internet, an d 4 others made
indirect reference to it, providing answers such as “informat ion technology”
and “global communication networks”. Moreover, these expert s predict that
in the near future, society will feel even more impact coming f rom telecom-
munication and information technology, since these are consid ered by 16 of
the interviewees as the most important technologies for the c oming decade.
Examining closer the way information technology has changed people’s
life in the past few years makes it diﬃcult to ignore the ‘gains vs. losses’
dichotomy that has emerged from the latest advances. On one han d, infor-
mation technology has presented people with new and more eﬃci ent ways
to address important problems in their daily lives. But on the o ther hand,
it has also brought about some serious challenges. Most of these cha llenges
have to do with coping with an incredible amount of informati on that one is
expected to process in one’s work and life in general. For exam ple, one may
say that electronic mail technology changed the way people co mmunicate for
the best. Email is often considered as a very eﬀective way to com municate,
since it is fast (i.e. messages arrive at their destination very soo n after being
sent), asynchronous (i.e. the contacted person does not need to be there
at the time the message comes, as in the case with phone calls) and re la-
tively reliable (i.e. messages rarely get lost, and quick repli es are generally
issued if there is a problem with the receiver’s address). However , email has
4 Introduction
also caused some time and eﬀort overhead on people’s routine, sin ce one is
expected to read one’s email box at least once everyday, and re plies are gen-
erally expected to be sent soon (at most one or two days after the m essage
arrived). If one of the above does not happen, the message recei ver possibly
becomes socially known as inconsiderate, lazy and/or unrelia ble. So the big
question is: has the emergence of email resulted in a solution or in a new
problem ? As in general, it has most probably resulted in a little bit of bo th.
In human history, while trying to solve a problem, human kind ha s often
created others as collateral eﬀects. This is the case with indu strialization
leading to deforestation and pollution, long use of antibioti cs for an acute
skin infection causing stomach pain, and why not, with technolo gy making
peoples’ lives more comfortable in one side and more complex on the other. It
seems that this is inevitable simply because humans are not able to predict all
problems a solution might bring, and usually learn more by maki ng mistakes
than by doing the right thing at the ﬁrst try. This general case c ertainly
applies to organizational KM, since promising practices and t echnologies
often lead to unforeseen issues, frustrating both direct users and managers
of the organization, who usually head such initiatives.
If all collateral eﬀects created with the adoption of a new pr actice or
technology may not be completely eradicated, some of them may be at least
predicted. Consequently, such eﬀects may be compensated or eve n avoided,
while beneﬁts resulting from the adoption of speciﬁc solutions may be re-
inforced and sought. For that, KM practitioners must be empowe red with
an engineering methodology capable of ﬁrst, analyzing the organizational
setting in need of support and then, designing the desired solution in terms
of the adoption of new information systems, or changes in organi zational
structures and processes. We claim that providing eﬀective KM sol utions
depends on paying more attention to the actual users of KM system (or
participants of KM practices). In this way, we defend a human- centric view
of KM instead of a techno-centric one, having in mind that know ledge is
primarily the product of human minds, and knowledge owners sho uld thus
be the focus of KM enabling processes and information systems.
Motivation 5
1.1.2 Towards a Human-centric Knowledge Manage-
ment Perspective
Business giants such as IBM (Gongla and Rizzuto, 2001) (Garvin, 1993),
Xerox (Brown, 1991), SIEMENS and Hewlett Packard (Kankanhalli et al.,
2003) are included among the biggest investors in KM. All these or ganiza-
tions share a single objective: enhancing the performance of t heir workers,
while also proﬁting from their personal knowledge to make orga nizational
processes more eﬃcient. Although aiming at the same targets, these organi-
zations often follow diﬀerent strategies to attain them. Hanse n et al. (1999)
classify KM projects into the following two categories:
1.Codiﬁcation approach : based on systematically storing worker’s knowl-
edge in repositories and databases, hoping that such knowledge m ay
be reused in the future.
2.Personalization strategy : founded on supporting knowledge holders
on their natural processes of knowledge exchange, motivating direct
person-to-person contacts, and facilitating worker’s commun ication.
Hansen et al. (1999) also point out that while the codiﬁcation ap proach
is geared towards reuse of old knowledge, the personalization strategy is
more prone to result in knowledge creation andinnovation . The view de-
fended in this thesis is closer to the position maintained by the adopters of
personalization strategies. We are particularly interested in initiatives that
provide workers with high degree of autonomy on knowledge sharing and on
theiractive participation in generating new knowledge. The current work-
ing processes supported at companies such as 3M Co. may be given as an
example of a success story in this regard. In 3M Co., workers are g iven the
chance to spend 15 to 20 percent of their working hours for perso nal projects
(Karlin, 2004), i.e. new ideas that they have developed by th emselves but
which can become new company products. This policy has been ad opted
because the managers of 3M Co. have realized that giving their employees
autonomy to explore their passions and exchange knowledge as t hey wish
fosters creativity, thus leading to innovation.
6 Introduction
Some research initiatives have realized that often, the know ledge gener-
ated in one particular occasion is diﬃcultly transferable to a diﬀerent context
or situation in the future (Bonifacio and Bouquet, 2002). Thi s claim sup-
ports the development of practices and information systems use d to support
the daily processes of knowledge sharing, instead of simply captu ring and
codifying knowledge. Groupware, recommender systems, decision support
system, content management systems andknowledge portals are examples
of system that may be adopted for such purposes. However, we emphasiz e
that the system needs to ﬁt within real activities of the knowle dge workers,
being adjusted according to the organization’s environment
1.2 Background
The results of this work have been accomplished with basis on pre vious
developments in several research topics under the realm of org anizational,
educational and computer science. Naming the thesis Agent-Oriented Con-
structivist Knowledge Management suggests that agent-orientation andcon-
structivism are two cornerstones of this work. The subsequent subsections
provide a brief discussion on these two topics, thus providing the main con-
text of this thesis.
1.2.1 Constructivism and Knowledge Management
Organizational KM is mainly about learning, but not formall y, by the means
of a course. Rather, it is about some kind of unintentional learning, meaning
that it is a natural consequence of people’s daily activities and collaboration
with peers within organizations. According to Lave et al. (199 1), this kind of
learning process can be deﬁned as situated learning or legitim ate peripheral
participation, which they explain as follows:
“The individual learner is not gaining a discrete body of abs tract knowl-
edge which he will then transport and reapply in later contex ts. Instead,
he acquires the skill to perform by actually engaging in the pro cess, under
the attenuated conditions of legitimate peripheral partici pation. This central
Background 7
concept denotes the particular mode of engagement of a learne r who partic-
ipates in the actual practice of an expert, but only to a limite d degree and
with limited responsibility for the ultimate product as a wh ole.”
In other words, organizations can be seen as knowledge sharing c ommu-
nities in which people collaborate and exchange knowledge t o perform their
work activities, consequently learning from each other. By in teracting and
collaborating, people get involved in a rich interchange of experiences that
gradually reduces the doubts each participant might have re garding organi-
zational processes and products, continuously broadening work ers’ mental
models as they ‘learn by doing’.
In educational science, diﬀerent theories have been created with the aim
of supporting active and collaborative learning. The most pro minent ones
are based on the philosophical principles of Constructivism, wh ich can be
summarized as follows (Mahoney, 2004):
•Active agency : learning involves active participation in the process
instead of passive behavior. In other words, individuals do not l earn
by being instructed but by engaging themselves in an active dia logue
with the learning content, with instructors and with peers.
•Finding Order or Structure : many human activities are devoted to
ﬁnding some kind of order or structure for things and processes, i. e.
people engage themselves in patterning of experiences by the means of
tacit, emotional meaning-making processes.
•Self construction : persons live and grow in a living web of relationships,
and they are endlessly constructing and reconstructing their pe rsonal
identity, when interacting with others.
•Social-symbolic relatedness : humans cannot be understood apart from
their organic embeddedness in social and symbolic systems, and such
situatedness aﬀect the way their cognitive models develop and evolve.
•Lifespan development : in human life, order and disorder co-exist in
lifelong quests for a dynamic balance that is never quite achi eved.
8 Introduction
Piaget (Piaget and Inhelder, 1969), Vygotsky (1978), Freire ( 1970) and
Papert (1993) are important precursors of Constructivism. Acco rding to Pi-
aget, people learn by balancing what they already know and wh at is novel for
them. He has noted the fact that humans are in constantly self-or ganization
(the processes of identity construction and reconstruction men tioned above),
and proposed a theory that explains how knowledge is created ( genetic epis-
temology). Studying his work can provide knowledge manager s with great
insight on how to foster knowledge creation and growth.
Vygotsky has also made important contributions, creating the soc io-
historical constructivism. The most relevant results of his studi es to our
work are his discoveries that learning is profoundly shaped by the historical
and socio cultural context in which it is carried out; and his c laim that col-
laboration among individuals from diﬀerent performance le vels is essential
for learning. These two postulates show us that: a) the culture i nvolving
the organizational setting has great impact over how people p rogress in their
working activities; and b) expert employees and newcomers mu st collaborate
in order to improve their work performances.
Finally, Freire brings a humanistic view into the constructiv ist research,
proposing that only dialogue can intermediate the solution fo r conﬂicts, and
that all voices should be heard, despite people’s position and p ower. His
work has been broadly recognized in the educational ﬁeld, an d should now
also be acknowledge in the KM area, proposing collaboration (i nstead of
competition) among all organization’s members as the best at titude to guar-
antee success, both for the organization and to each of its emplo yees.
Building over Piaget’s constructivism, Papert’s construcion ism empha-
sizes the importance of sharing knowledge by the means of concr ete artifacts.
Papert claims that learning eﬀectively occurs when the lear ner is engaged
in the construction of a shareable artifact. Building somethin g meaningful
and sharable leads to a cyclic process of externalizing the kno wledge that is
in the mind of the learner and internalizing new structures, as a result of
the social interaction around this external artifact. This e xternalization and
internalization cycle seems to coincide with Nonaka and Takeu shi’s Knowl-
edge Management (KM) theory (Nonaka and Takeuchi, 1995). Acco rding
Background 9
to them, there are two types of knowledge: explicit and tacit . The former
refers to codiﬁable components, which can be disembodied and t ransmitted,
while the latter refers to knowledge that is “conﬁned in peop le’s mind”, be-
ing diﬃcult to articulate and disseminate. Through social inte raction and
collaboration, tacit knowledge is turned into explicit, an d individual knowl-
edge is turned into organizational. Organizational knowle dge creation is a
result of a continuous and dynamic process of conversion betwee n these two
knowledge types.
As indicated in the previous section, this work supports the cre ation of
KM projects highly based on autonomy and peer collaboration. In this
thesis, we call Constructivist KM the human-centric view on KM, which
prescribes that constructivist principles should be taken into account when
designing a KM system and/or process. These principles are further deﬁned
and illustrated throughout this thesis.
1.2.2 Agent-oriented Knowledge Management
Agents have frequently been proposed as appropriate entities to enable the
analysis and design of complex systems, made up of several componen ts
that behave autonomously and interact with each other in orde r to achieve
a common objective (i.e. the system’s overall functionality) (Jennings et al.,
1998) (Wooldridge, 1999) (Wooldridge and Ciancarini, 2001 ). The social and
cognitive (or mentalistic) characteristics of agents are the ir main strength,
turning them into promising constructs to emulate human inter action and
rational behavior. The analysis of the current social structur es embedded
in the organization may lead to more appropriate system proposa ls. Then,
the developed systems enable such structures to evolve in terms o f eﬃciency
and performance.
Currently, organizational tasks and processes are often distri buted in dif-
ferent divisions and branches of the organization. In additi on to that, these
processes follow dynamic kinds of control structure, such as tho se of market
or collaborative network societies (Dignum, 2004a). Such ch aracteristics re-
quire present organizational structures and processes to be wel l-understood
10 Introduction
and often redesigned. So, designing KM solutions presents both c hallenges
of process re-engineering and of information system design, as t hey must
be shaped to respond to the speciﬁc needs of the organizational e nviron-
ment. In fact, many KM systems are abandoned or fall into disuse be cause
of inadequate understanding of the organizational context ( Dignum and van
Eeden, 2003) (Pumareja et al., 2003). Hence, analysis and desig n activi-
ties claim for adequate modeling constructs, such as those propo sed in the
agent’s paradigm.
Agents in Artiﬁcial Intelligence (AI) have been deﬁned as cogni tive be-
ings having characteristics such as goals,beliefs ,commitments andclaims ,
being inﬂuenced by studies from diﬀerent research communitie s, including
economics, sociology, and cognitive science. An agent can be deﬁ ned as an
autonomic entity inhabiting an environment from which it pe rceives cer-
tain events (perceptors), and on which it acts causing changes (eﬀectors)
(Wooldridge and Ciancarini, 2001). The behavior of perceiv ing the environ-
ment and acting as a result of such perception deﬁnes agent reac tiveness.
But besides reacting, agents are able to adopt goal-driven be havior, deciding
to act on their own (proactively), motivated by their given b eliefs about the
world and their desires with respect to how they would like the w orld to be.
Moreover, agents may “live” in a community of other agents, in teracting
with them in several ways, meanwhile pursuing its goals and/or r eacting
to events (which here include communicative events trigger ed by incoming
messages from other agents).
Recently, research in this area has moved its focus from the in dividual
characteristics of an agent, to the consequences resulting fro m agents’ inter-
actions. This has given life to a new research area known as Agent Organi-
zations (Sichman et al., 2005). Work in this area has focused, for exam ple,
on: a) the complexness of self-organizing communities (Di Mar zo Serugendo
et al., 2004); b) on how the organizational structure may aﬀec t the behavior
of human organizations, and how this understanding might help organiza-
tions adapt to changes (Dignum et al., 2004) and c) on modelin g organiza-
tions (Dignum, 2004a) (Guizzardi and Perini, 2005).
Concurrent to the evolution in organizational models, more a ppropriate
Background 11
agent-based abstractions have been developed, allowing the u nderstanding of
the organization’s social, economic and technological dime nsions. Advances
in agent societies are often focused on coordination framewor ks that enable
agents’ interaction, in such a way that they autonomously but co operatively
achieve their goals. Some authors classify agent organization s as having
more structure than agent societies, having in common the fact t hat the
agents in the system work towards a common overall purpose. In th is sense,
the main diﬀerences between organizations and societies may be given by
the emphasis on the decision processes that underlie organizati ons, making
more explicit the division of labor among agents (usually thro ughroles)
(Dignum, 2004a) (Ferber et al., 2004) (Hubner et al., 2002) (E steva et al.,
2002). However, organizations and societies could also be consi dered as
synonyms, as work on both ﬁelds should be targeted at empowering agents
with social structures, providing them with more complex abstra ctions to
model and support organizations.
The features highlighted above show that agents are adequate constructs
in representing humans in domain models and organizational a bstractions.
We can proﬁt from the organizational view, deﬁned by the noti ons of pur-
pose,structure ,rules andnorms (Dignum, 2004a) when modeling systems
to be adjusted to organizational processes and practices. Applyi ng agents as
human abstractions allows the system developer to abstract away from some
of the problems related to human complexity, focusing on the i mportant is-
sues that interfere with speciﬁc goals,beliefs andcommitments of the domain
agents in each modeling activity. This allows the developer to clearly under-
stand the current situation, and this is an essential factor for t he proposal
of the appropriate solution. Moreover, such kinds of models ma ke com-
munication with the stakeholders much more eﬀective, since th e developer
uses concepts that are more familiar to the common user (e.g. go al, task
and belief) than technology-oriented terminology (like ta bles, SQL query,
middleware and threads).
Applying agents as a metaphor on system development is not new an d
has been observed in (Jennings et al., 1998) (Wooldridge and C iancarini,
2001). However, especially in KM domains, agent organizations seem to be
12 Introduction
an interesting approach as agents may represent not only artiﬁ cial beings,
but also the human users and the organizations involved in a given sce-
nario (Guizzardi et al., 2004b) (Dignum, 2004a) (Perini et a l., 2004). This
allows, for example, the requirement engineer to understand, before model-
ing a KM system itself, how knowledge ﬂows within the organizati on. As
a result, besides introducing new technology, the business proc esses used in
the organization may be changed in order to enhance these know ledge ﬂows.
Moreover, if a technological solution is needed, agents enab le legacy systems
to be considered in the analysis, allowing the new solution to be b ased on
approaches of integration of old and new components. This may lead to
more satisfaction to end users, who are already familiar with the interface
and methods applied in the systems in use.
1.3 Thesis Scope and Objectives
As aforementioned, this thesis considers KM to be more appropri ately sup-
ported if knowledge is looked at from a constructivist perspect ive. In other
words, people (both individually or as organizational membe rs) are the driv-
ing force behind knowledge creation. Hence, when developing KM systems,
personal requirements should be taken into account. On the oth er hand, the
research community should provide methodologies and systems to mediate
negotiation between people and organizations, considering t he general orga-
nizational intentions behind the KM activities to enable th e accomplishment
of these goals.
1.3.1 Research Questions
The motivations behind this work led to the elaboration of th e research
questions presented in Table 1.1. These research questions are de scribed
in detail in the context of the objectives of this thesis, presen ted in the
subsequent section.
Thesis Scope and Objectives 13
1.3.2 Objectives
Taking the previously stated research questions, the global obje ctive of this
work may be summarized as:
Developing innovative ways to support knowledge creation an d sharing
within an organization, according to its inherent culture a nd processes,
according to what we call Constructivist KM.
Research Questions
RQ 1: Can agents be suitably used as metaphors to model
human organizations, supporting the creation of Constructi vist
KM?
RQ 2: How can a comprehensive methodology be tailored in
order to guide the analysis and design of appropriate KM info r-
mation systems and/or practices?
RQ 2.1: Which of the agent cognitive concepts should be con-
sidered in each development activity?
RQ 2.2: How can agent’s cognitive concepts be materialized in
concrete elements of a system?
RQ 3: What are the requirements for a recommender system
supporting Constructivist KM?
RQ 3.1.: How can social and cognitive aspects involving or-
ganizational members be used in the creation of knowledge
recommendations?
RQ 3.2: Which agent-oriented architecture should be pro-
posed in order to provide users with recommendations in a
non-intrusive way?
RQ 3.3: Which technique must be used in the creation of
recommendations?
Table 1.1: Thesis Research Questions
This main objective is further detailed as follows:
1. Propose an agent-oriented approach named Agent-oriented Recipe for
Knowledge Management Systems Development (ARKnowD) to guide
the creation and evolvement of KM solutions.
14 Introduction
2. Develop a recommender agent named K nowledgeable A gent for Re c-
ommendations (KARe) as a case study of the ARKnowD methodology,
but also aiming at exploring this system’s ability to eﬀectivel y support
Constructivist KM.
Let us focus on the ﬁrst objective listed above. To the best of our knowl-
edge, currently there is no engineering methodology speciﬁc ally tailored for
KM settings, comprehending all development activities. One of the main
contributions in this area, proposed by (Dignum, 2004a) is fo cused on the
analysis activity but lacks support for the detailed design of K M systems.
Furthermore, our methodology provides greater strength to t he initial stages
of requirements analysis. This is motivated by our claim that a n eﬀective
solution should be based on a deep understanding of the organizat ional po-
tentials, behaviors and processes concerning knowledge sharin g.
As suggested by research question RQ 1, this work aims at assessing the
appropriateness of the agent-oriented paradigm for the anal ysis and design
of Constructivist KM practices and enabling technologies. Our appropriate-
ness criteria regards understanding if agents can explicitly capture the enti-
ties, relations and behaviors characterizing human organiz ations, allowing a
deep analysis of the organizational processes and culture. In p articular, such
criteria concerns the determination of what principles cha racterize a Con-
structivist KM environment, and the investigation of how well t he concepts
underlying agents enable modeling and reasoning about such pr inciples.
However, having the right abstraction is not enough for guaran teeing the
development of adequate solutions for the organization. For that, a con-
sistent KM engineering methodology is needed (RQ 2), granting developers
with a set of modeling constructs besides methodological guide lines regard-
ing which modeling activities to perform and which techniqu es to apply.
In particular, we seek at grasping which cognitive (or mentali stic) notions
characterizing agents should be applied in each development activity, and
how they can be deﬁned (RQ 2.1). Moreover, in order to be imple mented in
a system, such concepts must become concrete, giving the develop er a clear
sense of how the previous theoretical deﬁnitions may be used in p ractice
Research Approach 15
(RQ 2.2).
Our second objective regards the development of an agent-ori ented rec-
ommender system named KARe. This takes us to RQ 3, where we ask whic h
are the requirements for such a system, speciﬁcally aimed at suppo rting Con-
structivist KM. Related to this question, we are particularly i nterested in
three distinct focus points. The ﬁrst one regards grasping the soc ial and cog-
nitive aspects that generally characterize the members of an organization,
and how these aspects can improve recommendations (RQ 3.1). Th e second
concerns the development of KARe’s agent-oriented architec ture (RQ 3.2).
Answering this question requires the deﬁnition of which agents compose the
system and how they interact to provide recommendations. Final ly, the
third focus point targets the implementation of the recomme ndation mecha-
nism, which demands the development of an eﬀective technique to assist the
system agents in ﬁnding from the information maintained by the community
of users, the one that responds to a particular knowledge request (RQ 3.3).
1.4 Research Approach
Figure 1.1 presents an overview of the research approach under taken in this
work.
Our ﬁrst step towards accomplishing the objectives setup in the p revious
section regards the deﬁnition of the Constructivist KM buildin g blocks. In-
tuitively, we understand that constructivism is in line with th e KM view we
aim at supporting. However, beyond intuitions, this work presen ts a detailed
description of which principles characterize a Constructivi st KM supporting
environment. We deﬁne such principles based on comparing and c ontrasting
the theories of the constructivists early mentioned in section 1.2.1 and some
prominent KM theories, coming from the organizational scienc es. Here, we
refer to these principles as building blocks as they can be seen as the raw
material for the development of KM systems and practices compl ying with
Constructivist KM.
Following, we develop the ARKnowD methodology that when appl ied to
16 Introduction
Constructivist KM 
Building Blocks Application of ARKnowD 
Methodology 
KARe System 
supports validates 
develops provide context forARKnowD Methodology 
experiments verifies 
Prototyping & 
Assessment Experimentvalidates 
recommendation 
mechanism 
Figure 1.1: Research approach
model an organizational environment, is able to verify to wh ich extent this
environment supports the Constructivist building blocks. This is why Fig.
1.1 states that the building blocks provide the context for th e application
of ARKnowD’s methodology, i.e. they work as a checklist to be co nsulted
in the methodology enabled analysis. Included in the developm ent of the
methodology is the understanding of which constructs ARKnowD sh ould
comprehend, which scenarios of use it should target, and what ac tivities
and life cycles it should follow. Particularly, the methodol ogical constructs
reﬂect the concepts comprehended in an ontology we present fo r the agent-
oriented domain. This ontology enables us to evaluate, adju st and combine
the notations adopted in ARKnowD.
Aiming at validating the proposed methodology, we apply ARKnow D to
analyze a ﬁctitious scenario speciﬁcally tailored to illustra te some of the
main KM challenges. The scenario is built to reﬂect a realistic p roblem
domain, according to existing KM literature. Following ARKno wD, the
scenario is analyzed, and changes in the environment are prop osed, both
regarding KM practices and the adoption of enabling technol ogy, more par-
Thesis Structure 17
ticularly the KARe recommender system. Still using ARKnowD, we de sign
KARe, prompting it for implementation. This way, KARe consolid ates the
validation of the ARKnowD methodology, showing that it is able to take the
developer from a detailed domain analysis to a consistent design activity.
Besides exemplifying the use of the methodology, the KARe recom mender
system is a contribution in itself. KARe is proposed and designed ta king the
Constructivist KM building blocks into account, thus providi ng support to
these earlier identiﬁed principles. Finally, a prototype of t he system is im-
plemented with the main purpose of assessing its core recommendat ion algo-
rithm. The prototype comprehends the core functionalities that lead to the
creation of knowledge recommendations. These functionaliti es are obtained
by developing an Information Retrieval technique to recomm end knowledge
artifacts that satisfy incoming knowledge requests. An experime nt has been
developed to assess our technique in comparison with a standard ap proach.
Through this experiment, we are able to assess the eﬀectiveness o f our ap-
proach. The remaining features of the system, along with scalab ility and
usability issues are left as future work.
1.5 Thesis Structure
The ﬁndings of this thesis are reported within the six remainin g chapters
organized as follows:
•Chapter 2 provides state of the art on existing theories about Knowl-
edge Management, Constructivism and Agents, stating the Construc -
tivist KM building blocks and motivating the need for a KM deve lop-
ment methodology.
•Chapter 3 introduces the ARKnowD methodology, describing it in
its full extension, including its underlying concepts, scenar ios of appli-
cability, activities and life cycle.
•Chapter 4 presents the requirements analysis of the organizational
domain described by the chosen scenario, coming ﬁnally to the pr o-
18 Introduction
posal of the KARe system to support knowledge sharing in the given
domain.
•Chapter 5 presents the main description of the proposed system, also
focusing on its architecture and design models.
•Chapter 6 describes KARe’s recommendation mechanism, presents
an assessment experiment performed to evaluate such mechanism, an d
provides details about two implemented prototypes.
•Chapter 7 concludes this thesis, by presenting a discussion of the
main results of this work and describing our research agenda for the
future.
Chapter 2
Theoretical Framework
“One of the most tragic illnesses of our society
is the bureaucratization of the mind.”
Paulo Freire
The main objective of this chapter is to set the conceptual basi s of this
work. Having this in mind, this chapter describes state-of-the -art on Knowl-
edge Management (KM) and on the Agent-oriented paradigm. In a ddition
to that, it discusses how Constructivism has inﬂuenced our views a nd choices
regarding: a) how to target knowledge management; and b) wha t kind of
methodological and technological support should be provided to enhance
KM.
This chapter is organized as follows: section 2.1 introduces t he chapter;
section 2.2 presents KM background work, including deﬁnition s, a discussion
on KM systems, a description of the KM main challenges, and a present ation
of some KM theories from an organizational science point of vie w; section
2.3 describes some constructivist theories that greatly impact ed the views
and choices underlying this work; section 2.4 present the state of the art on
agent technology; and ﬁnally, some discussions are presented in se ctions 2.5
and 2.6, respectively focusing on developing a constructivist v iew on KM
and on the development of agent-oriented support to Constructivist KM .
19
20 Theoretical Framework
2.1 Introduction
Knowledge is today recognized as one of the most important asset s of com-
petitive businesses (Alavi and Leidner, 1999) (Nonaka and Takeuc hi, 1995)
(Wiig, 1994). In other words, organizations realized that th e quality of their
products and services depend on the eﬀective use of the knowled ge that is
created and shared by its members. For this reason, the organiza tion should
be able to establish an environment that favors the creation of knowledge
and innovation. This usually involves the development of a kn owledge shar-
ing culture that enables a good ﬂow of knowledge among all mem bers of the
organization.
According to Nonaka and Takeuchi (1995), organizations should be tuned
to knowledge creation that is deﬁned as “a process that organi zationally
ampliﬁes the knowledge created by individuals and crystalli zes it as a part of
the knowledge network of the organization”. This is especial ly important in
today’s market when work force is highly dynamic and mobile, to guarantee
that knowledge is kept within organizational boundaries wh en employees
leave it. Moreover, such processes are aimed at making sure that p eople in
all organizational points-of-action have the information t hey need for their
particular activities, despite of being geographically distr ibuted or working
in diﬀerent organizational units (Wiig, 1994).
Alavi and Leidner (1999) remind us that the concept of capturi ng and
communicating knowledge in organizations is not in itself a n ovelty and has
long been accomplished through training, employee developm ent programs,
and access to organizational documentation, such as reports a nd manuals.
However, KM adds the dimension of potentially using enabling in formation
technologies (such as the Internet, Intranets, data warehouse s, data ﬁlters
and software agents) to support the systematic creation, integra tion, and
dissemination of knowledge. It is also important to note that co ntrarily
to training, KM aims at conveying knowledge to people in an in formal way,
rather than doing it in formal classes or tutorials. That is why K M is said to
lead to unintentional learning (Lave et al., 1991), embedde d in organizational
practices, policies and routines.
Introduction 21
The informality of knowledge transmission does not imply, howe ver, that
this happens as a pass of magic. On the contrary, it requires th e organization
to actively invest time and resources on creating a conducive e nvironment for
knowledge creation and sharing. Organizational reengineer ing, the adoption
of speciﬁc methods such as “total quality management” and “org anizational
learning techniques” can partially deal with separate parts o f this challenge
(Wiig, 1994). However, new methodologies speciﬁcally tailor ed to under-
stand the current organizational conditions, subsequently pro posing changes
in practices besides technology adoption are also essential for eﬀective KM
to take place.
This work claims that agents have a great potential to support Knowledge
Management (KM), serving as rich metaphors to enable the anal ysis of or-
ganization’s scenarios, and moreover functioning as buildin g blocks for KM
systems’ development. In fact, the suitability of agents for KM su pport has
been recognized elsewhere, both in theory (Dignum, 2004b) (v an Elst et al.,
2004), and in the development of agent-oriented systems (Abeck er et al.,
2003) (Gandon et al., 2002) (Preece et al., 2001). However, th is debate is
hardly ﬁnished. Our work takes advantage of the mentalistic no tions sup-
ported by agents, such as autonomy, reactiveness, proactiveness andsocial
ability (Wooldridge, 1999). In general, we propose that agents can re present
besides systems, human beings and organizations, allowing the an alysis of
their interrelationships, behavior and motivations, before a n actual KM solu-
tion can be proposed. In this way, we hope to be able to adjust KM p ractices
and systems to the organization’s particular requirements, asp ect of concern
of many KM researchers (Wiig, 1994) (Davenport and Prusak, 199 8). We
argue that it is important to understand where and how agent’s mentalis-
tic notions can be used to help system developers to abstract away from
unimportant matters, while focusing on the right concepts in e ach develop-
ment activity. Although various agent-oriented methodolog ies target these
notions in diﬀerent ways, a deep discussion about their conceptu alization
and practical use concerning information systems development is currently
an open issue.
KM practices can take diﬀerent forms and follow diverse point s-of-view.
22 Theoretical Framework
Here, we take Constructivism as a theoretical background to be closely fol-
lowed when proposing a new KM enabling process and/or system. Thi s
comes from the realization that KM is ultimately about learn ing. And more-
over, that the constructivist paradigm is largely compliant w ith the kind of
learning KM wants to accomplish: unintentional, situated, an d based on
active engagement by the one who learns. Constructivism also ale rts that
regardless of position within the organization, all members sh ould be seen as
potential sources of knowledge. In other words, according to t his paradigm,
learning and knowledge sharing are more eﬀective when non-hi erarchical,
idea that has been previously defended by knowledge managers and theo-
rists in the area (Orlikowski and Gash, 1994). In this chapter, w e discuss
how constructivist theories can aid us in shaping KM practices a nd systems,
allowing us to understand some of their general requirements b eforehand.
2.2 Knowledge Management
We start by providing a general overview about the KM ﬁeld. We f ocus on
the basic deﬁnitions underlying this ﬁeld (section 2.2.1) , an d slowly progress
towards the exploration of some themes related to how it can be supported.
In this realm, we present a discussion about KM systems, with a few ex-
amples (section 2.2.2). Then, we discuss the main challenges on providing
KM solutions (section 2.2.3). And, ﬁnally, we present some theori es from the
viewpoint of the organization sciences that comply with our v ision regarding
KM (section 2.2.4).
2.2.1 Deﬁnitions
Before we understand how KM may be facilitated, it is importan t to have
a clear picture of what knowledge actually is. Fields related to Information
Processing usually deﬁne knowledge in contrast to the related de ﬁnitions of
information anddata(Alavi and Leidner, 1999) (Davenport and Prusak,
1998). Data is raw by nature and thus, does not inform one of any thing,
except if it is analyzed and interpreted. A sentence like “Bea trixstraat” and
Knowledge Management 23
a number like “121” are examples of data. When data is analyze d and inter-
preted, it becomes information. For instance, knowing that “ Beatrixstraat”
refers to a street in the city of Enschede (The Netherlands) and th at “121”
refers to a house number, one suddenly has information about an address.
When information is authenticated and contextualized, inc luding indications
of how it should be applied in action, it ﬁnally becomes knowle dge. Figure
2.1 illustrates the transformation of data into information, and information
into knowledge.
analyze, 
interpretcontextualize 
Information 
Data Knowledge 
Figure 2.1: The relationship between data, information and k nowledge
According to (Alavi and Leidner, 1999), such deﬁnition is limit ed, as it
presumes a hierarchy from data to information, and from infor mation to
knowledge, with each varying along some dimension, such as cont ext, use-
fulness, or interpretability. Instead, they argue that “knowledge is informa-
tion possessed in the mind of an individual: it is personalize d or subjective
information related to facts, procedures, concepts, inter pretations, ideas, ob-
servations and judgments (which may or may not be unique, use ful, accurate,
or structurable). (...) information becomes knowledge onc e it is processed
in the mind of an individual (...). This knowledge then becom es informa-
tion again (...) once it is articulated or communicated to ot hers in the form
of text, computer output, spoken, or written words or other m eans.” (pg.
6) Consequently, Alavi and Leidner diﬀerentiate between info rmation and
knowledge analogously to Nonaka and Takeuchi’s deﬁnitions of explicit and
tacit knowledge (Nonaka and Takeuchi, 1995). These two knowledge types
are deﬁned as follows:
24 Theoretical Framework
•tacit knowledge has to do with personal values, intuitions, and experi-
ence, usually embodied in the person’s actions and choices. Thu s, this
kind of knowledge is hard to formalize and communicate;
•explicit knowledge , as the name suggests, refers to knowledge that is
codiﬁable and transmittable to others.
More philosophical views on knowledge deﬁne it as “justiﬁed tr ue belief”
(Audi, 1998), meaning that knowledge is a belief that can actu ally be veriﬁed
to be true in the objective reality, and for which we can provi de a reason (or
justiﬁcation). This deﬁnition is founded on the empiricist vi ew of epistemol-
ogy1, which claims that the only source of knowledge is sensory exper ience.
Such view is challenged by rationalist traditions that argue that true knowl-
edge can be attained by reasoning, hence not being necessarily j ustiﬁed by
sensory experience. Epistemology studies how knowledge emerge s through
its relations with human abilities, such as perception, memor y, reﬂection,
introspection and testimony (Audi, 1998).
Whatever view seems more appealing, rather than debating kno wledge
deﬁnitions, our main goal here is understanding what it represe nts to or-
ganizational contexts and how it can improve organizationa l products and
processes. In this sense, knowledge can be seen at the same time as a basic
ingredient and aproduct of everyday work within an organization. As an
ingredient, it can be regarded as personal belief andinformation that
enhances the ability of an individual to make decisions andtake eﬀective
action . And as a product, it can be seen as the direct result of organiza-
tional members’ actions, usually embedded in their own practic es and/or in
their work outcomes.
Note that, although considered as a concrete organizational a sset, knowl-
edge behaves in a very diﬀerent way when compared to physical a nd natural
resources. Instead of being bound to ﬁnish like natural resources, knowledge
can be replicated and expanded endlessly, enabling wide reuse b esides new
1Epistemology is the philosophy of knowledge, focusing on what knowledge is, how i t
is created and how it relates to other concepts such as memory, belief, perception and
reasoning (Audi, 1998).
Knowledge Management 25
knowledge creation. Moreover, when an individual possessing it shares it
with others, he or she does not give it away, as in the case of physic al re-
sources. Instead, knowledge is retained by both parties: the one who gives
it away, and the one who gets it (Allee, 1999).
Having all this in mind, KM can be deﬁned as a systematic process fo r ac-
quiring, organizing and communicating both tacit and expli cit knowledge to
all members, enabling them to be more eﬀective and productive in their work
(Alavi and Leidner, 1999). This process is based on practices an d technolo-
gies that motivate knowledge exchange, so that knowledge can be replicated
and ampliﬁed to be used in all points-of-action within the orga nization.
Fischer and Ostwald (2001) deﬁnes KM as a cyclic process composed of
three main activities: creation, integration and disseminati on of knowledge.
Knowledge creation , as the name suggests, is the activity that leads organi-
zational members to generate new knowledge; knowledge integration refers
to converting it into a sharable technological format, while also connecting
it to existing knowledge within the organization; and ﬁnally ,knowledge dis-
semination enables access of speciﬁc knowledge to all employees and units
that need to apply it in practice.
According to Nonaka and Takeuchi (1995), teams are a cornerston e of
eﬀective KM, working as a shared context for social interactio n, which is
essential to knowledge creation and dissemination. New ideas and points of
view are created through dialogue and discussion. This dialogu e can involve
considerable conﬂict and disagreement, but it is exactly such c onﬂict that
motivates organizational members to question their assumptio ns, making
sense of their experience in a new way. Consequently, such intera ctions
often lead to the transformation of personal knowledge into or ganizational
knowledge. Lave et al. (1991) and Wenger (1998) have also emph asized the
role of teams and communities in the knowledge sharing process. A wider
discussion on this topic is found in section 2.2.4.
26 Theoretical Framework
2.2.2 Knowledge Management Systems
Knowledge Management Systems (KMSs) have evolved in the past 30 years,
coming from systems based on central repositories of knowledge b uilt by
knowledge engineers to distributed systems, which grant the user s with full
autonomy over knowledge exchange. Following this evolutio n, three phases
can be distinguished.
The ﬁrst phase is characterized by central-based systems. The orga niza-
tion managers, supported by knowledge engineers, collected an d structured
the contents of an organizational memory as a ﬁnished product at design
time (before the organizational memory was deployed) and th en dissemi-
nated the product, expecting employees to use it and update it . Such ap-
proaches were top-down in that they assumed that management cr eates the
knowledge and that workers receive it (Fischer and Ostwald, 20 01). The
organization employees often disliked such approaches and de serted the sys-
tems, because:
•workers claimed that the knowledge stored in the repository wa s de-
tached from their real working practices;
•the work of constantly updating the knowledge base was seen as ex tra
work and as a burden.
These claims led to the development of evolutionary methods t o build
KM systems, starting the second phase of the KMSs evolution. Accord-
ing to these approaches, the basic KM platform was initially dev eloped and
evolved proactively in an on-going fashion (Hahn and Subraman i, 2000).
The system users were viewed as stakeholders in the platform deve lopment,
participating in the elicitation of requirements that woul d more closely re-
late to their daily activities. An example of this is the “Seedi ng, Evolution-
ary Growth, Reseeding (SER)” process model, developed to unde rstand the
balance between centralized and decentralized evolution i n sustained devel-
opment of large systems (Fischer and Ostwald, 2001). However, as m ost of
the initiatives were still based on building central repositor ies and portals,
Knowledge Management 27
issues of trust and motivation often led to the abandonment of th e systems
(Dignum, 2004a) (Pumareja et al., 2003). In other words, work ers resist on
sharing knowledge, since they do not know who is going to access i t and
what is going to be done with it. Moreover, the importance att ributed to
knowledge may give an impression that these central systems take a way a
valuable asset from his or her owner, without giving appreciab le beneﬁts in
return.
Currently, a new trend has been inaugurated: Distributed Kno wledge
Management (DKM), initiating a new phase in the development o f KMSs.
This modality of KM recognizes the users as owners of their kno wledge,
prescribing that they should decide the means and conditions f or knowl-
edge exchanged (Dignum, 2004a). The idea at the basis of DKM (B onifacio
and Bouquet, 2002) is supporting the integration of autonomo usly managed
nodes, without forcing the creation of centralized repositor ies, indexes or
shared ontologies. Proposals for distributed knowledge manage ment sys-
tems can be found in (Bonifacio et al., 2004) (Guizzardi et al ., 2004a) (Yu
and Singh, 2002). This new phase is also largely characterized by the recog-
nition that knowledge cannot be separated from the communiti es that create
it, use it, and transform it. This realization has motivated or ganizations on
supporting and even fostering Communities of Practice (CoPs), i.e. groups
of workers who share similar interests, personal aﬃnity and trust.
Common technologies used to implement central organization al memo-
ries are large relational databases or data warehouses, the lat ter providing
more complex reasoning capability over knowledge (O’Leary, 1998). With
the growing interest for Internet-based applications, much of these reposito-
ries gained web-based interfaces, commonly known as enterpri se knowledge
portals (van Elst et al., 2004). Groupware technology, such as the Lotus
Notes platform, has also been largely applied in the developme nt of KMSs
(Pumareja et al., 2003) (Orlikowski, 1992a). Slowly, the syste m’s underly-
ing technology has shifted to more ﬂexible structures, culmina ting in the
use of software agents (Abecker et al., 2003) (Gandon et al., 200 2) (Preece
et al., 2001) (Yu and Singh, 2002). This paradigm continues t o be frequently
researched and applied in the third phase of KMSs evolution, wh ich also in-
28 Theoretical Framework
troduced the use of peer-to-peer architectures to support DKM (Bonifacio
et al., 2004) (Guizzardi et al., 2004a). In the following subse ctions, we de-
scribe some types of KMSs. We do not intent here to provide a compl ete list,
but solely to discuss some of the most prominent examples of KM enab ling
technology.
Organizational Memory Systems & Content Management
Systems
Organizational Memory (OM) can be deﬁned as the means by whic h past
knowledge is made available for current activities, enablin g the organization
to act more eﬀectively. It includes organizational goals, pl ans, handbooks,
manuals, and standard operating procedures (Chen et al., 2003 ). Systems
that support the creation and maintenance of an OM are known as OM sys-
tems (OMSs). They are generally built over advanced database t echnologies
(such as data warehousing, data mining, and knowledge extract ion) and
network technologies (especially Intranet and Internet-ba sed technologies)
(Lehner et al., 1998).
Advanced database and network technologies have created the p ossibility
to store, retrieve and share large amounts of data. But the stora ge and re-
trieval of information is hardly the biggest problem in this d omain. Rather,
eliciting and contextualizing useful knowledge is the great est challenge (Chen
et al., 2003). According to (Conklin, 1997), an OM composed onl y of “for-
mal” knowledge (such as manuals, client information and proce dures) is
essentially an immense heap of disconnected things, a giant organ izational
attic. More valuable OMs are the ones that document more taci t kinds of
knowledge, such as why decisions have been taken, the content o f informal
communication, and the result of particular actions and choi ces. In this
realm, it is typical to include in the OMSs, records on lessons learned and
best practices regarding speciﬁc projects and/or procedures. The former
refers to negative experiences, including choices made and r easons for fail-
ure, in order to avoid similar mistakes in the future; conversel y, the latter
documents success stories that are encouraged and expected to b e repeated
Knowledge Management 29
(O’Leary, 1998).
OM systems often combine advanced network and database techniq ues
with diﬀerent types of technology, for example, case-based re asoning to sup-
portexperience management . Delaitre and Moisan (2000) propose case-
based reasoning applied to the OM to support risk management in ha zardous
situations, such as ﬁre-ﬁghting; while Henninger (2001) uses thi s reasoning
technique to allow software developer companies to standardi ze development
methodologies. Both cases rely on previous experience stored i n the OM and
adapt them as a potential solution to a problem at hand.
More recently, a new trend has emerged to provide richer know ledge con-
textualization methods: content management systems. These system s often
use taxonomies and ontologies as a means to provide a conceptu alization of
the OM, besides classifying the knowledge items it contains (Da vies et al.,
2003a) (Bonifacio et al., 2004). Taxonomies refer to hierar chy of concepts,
usually visualized in a tree-structure. An ontology is a shared co nceptu-
alization of a domain, composed of a set of concepts and relatio ns. This
model provides semantics about a speciﬁc domain, i.e. by looki ng at the
model, one is able to understand how the model’s developer (a p erson or a
community) interpret that speciﬁc domain. Ontologies have r ecently been
in the spotlight, especially with developments related to the SemanticWeb
(Davies et al., 2003b)
Examples of content management systems are Ontoshare (Davies e t al.,
2003a) and KEEx (Bonifacio et al., 2004). Ontoshare adopts a sh ared ontol-
ogy between a community of practice, and encourages the comm unity mem-
bers to annotate documents using RDF, linking them to the share d ontology.
Instead of relying on a centralized conceptualization KEEx, knowledge assets
are assigned to concepts in taxonomies named “contexts”. KEEx su pport
building and mapping of several contexts, which can be either c ollective or
individual.
30 Theoretical Framework
Groupware
Groupware systems are computer-based systems that support groups of peo-
ple engaged in a common task (or goal) and that provide an inter face to a
shared environment (Ellis et al., 1991). Examples of groupwa re are workﬂow
management systems, email systems, chat applications, shared white boards,
co-authoring systems, group calendering and scheduling systems, c ollabora-
tive virtual environments and conferencing systems (Farias, 2 002).
Diﬀerent classiﬁcations have been created in order to facilit ate under-
standing of the wide variety of existing groupware. Table 2.1 p resents a
taxonomy of groupware systems based on the distribution of colla borating
team members in time and space (Ellis et al., 1991). It classiﬁes groupware
applications according to whether they support work at the sam e place and
time, at the same place but at diﬀerent times, at diﬀerent place s but at the
same time, or at diﬀerent places and diﬀerent times. Thus, follo wing these
considerations of place and time, presented in Table 2.1, elec tronic meeting
room technology, for example, would ﬁt within the upper left cell. On the
other hand, a physical bulletin board could be placed within t he upper right
cell. Video conferencing belongs in the lower left cell and an email system
in the lower right cell.
Same Time Diﬀerent Time
Same Place face-to-face interac-
tionasynchronous inter-
action
Diﬀerent Places synchronous dis-
tributed interactionasynchronous dis-
tributed interaction
Table 2.1: Groupware taxonomy based on time and space
The importance of the use of groupware to enable KM can be under stood
by at least two factors:
1. Groupware supports social interaction and collaboration, considered
essential for knowledge sharing (Nonaka and Takeuchi, 1995).
2. The knowledge exchanged through groupware applications (such as
emails or chat applications) is maintained in messages and/or l og ﬁles,
Knowledge Management 31
remaining stored for future reference and use.
This recognition has lead to the adoption of groupware in pra ctice in
several organizations. Besides general email systems, the most pro minent
example of groupware is IBM Lotus Notes, largely adopted in org anizational
intranets (Orlikowski, 1992a) (Robertson et al., 2000) (Puma reja et al., 2003)
(Sumner, 1999).
Decision Support Systems & Expert Systems
Decision Support Systems are computer systems based on reasoning t ech-
niques to support the decision making process. They are usually ru le-based
and are suitable for semi-structured or unstructured and unanti cipated types
of decisions. Expert Systems are special kinds of Decision Suppor t Systems,
which capture the knowledge of an expert in a narrow domain of knowledge
(Luger, 2005). The main aim of Expert Systems is to simulate the problem-
solving behavior of an expert in his/her domain of expertise. Th ese systems
have been applied in a number of diﬀerent areas such as medicin e, for sup-
porting diagnosis Pedersen (2004), education, to support lear ning by sim-
ulating human tutors (Doyle et al., 1996), and agriculture, for agricultural
management and irrigation control (Hassan et al., 2004).
Decision Support Systems and Expert Systems are very similar in n ature.
They are usually composed of a) a knowledge base containing factual knowl-
edge; and b) an inference engine , which applies the knowledge contained in
the knowledge base to solve a speciﬁc problem.
Prior to its storage on the knowledge base, knowledge needs to b e rep-
resented in a computational form. The most common knowledge re presen-
tation technique is the use of rules, i.e. condition-action pa irs that indicate
that if the condition is satisﬁed, the indicated action should b e taken. Be-
sides rules, frames are also largely applied. Typically, a fram e consists of a
list of properties of the entity and associated values for those p roperties.
After knowledge has been captured and stored, the inference en gine can
now execute its problem-solving strategy, reasoning over the a vailable knowl-
edge. Diﬀerent strategies may be applied, such as forward or ba ckward
32 Theoretical Framework
chaining. Forward chaining starts by processing a set of conditi ons and goes
towards the conclusion, while in backward chaining, a conclu sion is stated
(for instance, the desired outcome) and the path to that conclu sion is then
inferred from the rules.
When compared to the other types of systems here presented, this class of
systems is highly based on AI techniques. Thus, Decision Support Syst ems
and Expert Systems are much more complex to develop than Group ware
and Content Management Systems. When building Expert Systems, f or in-
stance, a knowledge engineer needs to capture the knowledge o f an expert
and integrate it into the system before it is deployed. Except i n cases in
which machine learning techniques are used to derive new know ledge from
the one previously integrated, the knowledge base keeps static throughout
time. Contrarily, Groupware and Content Management Systems are usually
fed by the users while the system is already running. Furthermor e, the na-
ture of of expert knowledge is another source of complexity fo r this kind of
system. “Expert knowledge is a combination of a theoretical un derstanding
of the problem and a collection of heuristic problem-solving r ules that ex-
perience has shown to be eﬀective in the domain.” (Luger, 2005 , pg. 21).
Usually, in order to produce eﬀective results, Expert Systems req uire knowl-
edge from a well-studied domain, which has clearly deﬁned pro blem-solving
strategies. Despite these complexity issues, the applications of t his class
of systems for Knowledge Management is clear, as it can support m anagers
and workers of an organization to take ﬂexible decisions, based on knowledge
priorly acquired by other experts in their area of action.
Recommender Systems
Recommender systems support users in selecting items of their int erest or
need from a big set of items, helping users to overcome the overwh elming
feeling when facing a vast information source, such as the web, a n organiza-
tional repository or the like. This kind of systems has become ve ry popular
in the late 1990s, especially due to the popularization of the I nternet and the
consequent danger of information overload. Today, as the num ber of users
Knowledge Management 33
of the information society grows rapidly, recommender systems are not less
needed.
Having in mind that KM refers to “providing the right people wi th the
right piece of knowledge, at the right time”, it becomes evid ent that recom-
mender systems can be of much value in organizational settings. W orkers
can rely on recommender systems to ﬁnd out speciﬁc information, or to look
for people who would know what they need.
Recommendations may be based on similar items to those a given use r
has liked in the past (content-based recommendation); or on it ems owned
by users whose taste is similar to those of the given user (collabora tive
recommendation) (Balabanovic and Shohan, 1997). Both type s of recom-
mendation may be quite beneﬁcial in Knowledge Management co mmunities,
where knowledge is distributed and, thus, the knowledge one ne eds may be
hard to ﬁnd and sort out.
Besides the diﬀerence given by the aforementioned recommend ation ap-
proaches, recommender systems are also diﬀerentiated by (Monta ner et al.,
2003): the items they recommend (systems have been developed t o rec-
ommend web pages (Balabanovic and Shohan, 1997), movies (Go od et al.,
1999), etc.); the nature of the user models they use to guide the recommen-
dations (e.g. history of items accessed by the user, topics indic ating user
interest, etc.); the recommendation techniques (mainly, ho w the user model
is represented, what kinds of relevance mechanisms are used to u pdate the
user model, and which algorithm is used to generate recommenda tions); and
the recommendation trigger, i.e. whether the recommendati on is started by
the user or by the proactive behavior of the system.
Enterprise Knowledge Portals
Rather than a diﬀerent kind of KM system, Enterprise Knowledge P ortals
(van Elst et al., 2004) can be seen as a friendly web-based interf ace to serve
as a unique access point for all KM tools used in an organization . As or-
ganizations adhere more and more to the KM economy, adopting new tools
and applications, such as diverse groupware, diﬀerent content management
34 Theoretical Framework
systems, and various decision supporting systems, it may be diﬃcult f or or-
ganization’s members to keep up with so many knowledge sources. Thus,
Knowledge Portals come to support the integration of these div erse sources,
facilitating knowledge access to all members.
Knowledge portals are also popular as a virtual “home” for com munities
of practice. They collect the community’s memory, guide new comers on
accessing content and tools, and often advertise communities ac tivities and
accomplishments, both for members and outsiders. Examples of kn owledge
portals are ECOT (Brazelton and Gorry, 2003) and Knowledge B oard2.
2.2.3 Main Challenges
As reported in the previous section, technology presents a vari ety of means
to support knowledge capture, structuring and sharing. However , problems
with the acceptance and use of KM systems continue to be reported . These
systems are often abandoned or, in some cases, not explored in thei r full
potential to improve the work performance of organizationa l members and
keep knowledge from leaving the organization. Most of the cha llenges re-
lated to these problems seem to have sociological nature. These p roblems
profoundly inﬂuence how people see and use the adopted KM systems.
The KM literature has mentioned several times that the eﬃcacy of KM
processes and systems are very much impacted by organizational c ulture
(Allee, 2000) (Orlikowski and Gash, 1994) (Nonaka and Takeuchi, 1995)
(Alavi and Leidner, 1999). As in culture in general, organizat ional culture
is given by the common sense knowledge, accepted behavior, and cultivated
values within the organization. There are often reports on t he fact that the
adopted KM systems are based on architectures and methods that r einforce
old pernicious habits and power structures, instead of creatin g new and
beneﬁcial dynamics (Newell et al., 1999) (Orlikowski and Gash, 1994). This
shows the need for analyzing the current organizational setti ng, including
cultural habits and values, in order to propose a solution that r eﬂects the
changes that the organization require, in contrast to reassuri ng the existing
2http://www.knowledgeboard.com
Knowledge Management 35
vices.
One of the most common problems related to knowledge sharing re fers
to the fact that organizational environments lean toward co mpetition rather
than collaboration. Consequently, while KM requires true co llaborative be-
havior, work recognition and promotion are usually based on co mpetition
among colleagues (Orlikowski, 1992a). This means that havin g a speciﬁc
piece of knowledge may be the diﬀerential that one needs to cl imb the next
step in his/her career. This problem alone can prevent organiz ational mem-
bers to volunteer their knowledge. Reviewing evaluation me thods to favor
collaboration, and creating an incentive program for knowl edge sharing are
often cited as good practices aimed at enhancing the appeal o f knowledge
sharing within organizations.
The fear of making mistakes is another cited obstacle for knowl edge ex-
change (Orlikowski, 1992a). Generally, people feel that the y can explain
things better if they talk directly to the person who needs the ir knowledge.
They also fear that a static description of their expertise can be mislead-
ing, as knowledge is highly dynamic and diﬃcult to transfer to diﬀerent
situations. This is a challenge for system developers, for allowi ng a piece
of knowledge to be contextualized and connected with past kno wledge and
experiences. It is also a reminder that the organization should create an
environment which stimulates learning, and is tolerant to mi stakes. In fact,
mistakes can be valuable triggers for knowledge creation. Th is is recognized
by Garvin (1993), who describes situations involving corpora te giants such
as IBM and Boeing, in which great successes have been achieved by learning
from past failures.
Related to the fear of making mistakes is the suspicion that somet hing
unethical or inappropriate can be made using one’s knowledge . This may
be characterized as lack of trust, a common reason for keeping o ne’s knowl-
edge to oneself. Conducive environments for social interacti on and network
building, such as communities of practice (refer to section 2. 2.4) may be able
to overcome this problem. As for systems, those that provide priva cy and
accessibility options controlled by the user are favorable in t hese situations.
36 Theoretical Framework
Lack of time also scores high in the reasons for not using KM systems,
as does the fact that searching for knowledge requires great e ﬀort while
useful knowledge is seldom available (Pumareja et al., 2003) ( Orlikowski,
1992a). These problems stem from the fact that the use of KM System s
are often imposed by top management without an actual revision in the
working processes underlying the organization. In order to gu arantee that
the KM system is going to fulﬁll its promises, it is thus necessary th at a
comprehensive analysis of the organizational processes is made , leading to
changes in these processes in order to better accommodate the use of the
adopted technological solution.
Besides these common cited challenges, there can be domain depe ndent or
organization speciﬁc problems. An example is cited by Desouza (2 003), who
describes a case involving a software engineering company. In t his company,
software engineers regretted and often avoided being conside red an expert
in speciﬁc languages or methods. Known experts in this organiz ation would
be continuously allocated to participate in projects relate d to that speciﬁc
language or method, which would soon become boring and repeti tive. Thus,
something that is usually viewed as a symbol of status and recogni tion, in
this particular organization was seen as a burden. This demon strates that an
eﬀective KM solution, both in terms of processes and systems, can on ly be
attained case by case, after the current organizational cultu re and processes
are clearly understood.
2.2.4 Theoretical Background
A few KM theories from the point-of-view of the organization al sciences
comply with our views on KM and thus assisted in shaping our work. He re,
we summarize these theories, aiming at describing their main cla ims and
ideas, so as to provide a ﬂavor of how this thesis approaches KM.
Knowledge Management 37
The Knowledge Management Spiral
Nonaka and Takeuchi (1995) describe the creation and evolveme nt of knowl-
edge throughout the organization using a spiral metaphor. Acco rding to this
metaphor, innovation is generated by cyclic conversions bet ween tacit and
explicit knowledge, as deﬁned in section 2.2.1. Rather than a phenomenon
that is conﬁned in one’s mind, this conversion happens throug h social inter-
actions between people engaged in actions in a common enviro nment.
There are four diﬀerent modes of knowledge conversion:
1.Socialization (from tacit knowledge to tacit knowledge): a process
of sharing experiences and thereby creating tacit knowledge such as
shared mental models and technical skills. This process generat es what
Nonaka and Takeuchi named sympathized knowledge.
2.Externalization (from tacit knowledge to explicit knowledge): a pro-
cess of articulating tacit knowledge into explicit concepts, metaphors,
analogies, hypotheses or models. The type of knowledge resultin g from
this process is called conceptual knowledge.
3.Combination (from explicit to explicit knowledge): a process of sys-
temizing concepts into a knowledge system, involving the comb ination
of diﬀerent bodies of explicit knowledge. New knowledge is th en ob-
tained through sorting, combining and categorizing existing informa-
tion, resulting in systemic knowledge.
4.Internalization (from explicit knowledge to tacit knowledge): a pro-
cess closely related to “learning by doing”. When experiences through
socialization, externalization, and combination are inter nalized into in-
dividuals’ tacit knowledge bases in the form of shared mental mo dels or
technical know-how, they become valuable assets. The new knowl edge
obtained through this process is called operational knowled ge.
The knowledge spiral with its four knowledge conversion modes is illus-
trated on ﬁgure 2.2.
38 Theoretical Framework
Socialization Externalization 
Internalization Combination Dialogue 
Linking 
Explicit 
Knowledge 
Learning by Doing Field 
Building 
Figure 2.2: The Knowledge Spiral (Nonaka and Takeuchi, 1995)
When tacit and explicit knowledge interact, an innovation e merges. For
instance, let us consider an externalization/internalizati on situation, hap-
pening in a conversation between two people. When a person expl ains some-
thing to another, he/she is obliged to externalize some of his/h er knowledge,
while the other person processes internalization. However, the knowledge the
second person internalizes is not the same tacit knowledge of hi s/her inter-
locutor. The internalized knowledge gains a new interpreta tion based on the
listener’s own personal values and experiences. In the conversa tion process,
the two individuals negotiate meanings, compare their under standings, and
eventually generate new ideas based on their combined views.
While knowledge can only be created by individuals, the organ ization
has the role of motivating and supporting creative processes, ma intaining
an environment that is appropriate for innovation. In other words, the or-
ganization has to mobilize tacit knowledge created and accu mulated at the
individual level, amplifying this knowledge through the fo ur modes of knowl-
edge conversion, and crystallizing it at the collective level . When performing
this role, there are ﬁve conditions an organization should gu arantee to pro-
mote the knowledge spiral:
•Intention : deﬁned as an organization’s aspiration to its goals, it is
Knowledge Management 39
the driving force behind the knowledge spiral. To create know ledge,
business organizations should foster their employees’ commitme nts by
formulating an organizational intention and proposing it to them. This
can be achieved by stating a mission or creating strategies that c an
motivate employees to get involved in knowledge conversion a ctivities.
•Autonomy : all members of an organization should be allowed to act
according to his/her own wishes, as far as the circumstances perm it.
Autonomy leads to unexpected opportunities and motivates in dividu-
als to create and share knowledge.
•Fluctuation andCreative Chaos : ﬂuctuation refers to an order whose
pattern is hard to predict at the beginning, although diﬀere nt from
complete disorder. If organizations adopt an open attitude t oward
environmental signals, they can exploit those signals’ ambiguit y, re-
dundancy, or noise in order to improve their own knowledge syste ms.
Chaos is generated naturally when the organization faces a r eal crisis,
such as rapid decline of performance due to changes in market n eeds or
signiﬁcant growth of competitors. But it can also be generated i nten-
tionally when the organization’s leaders try to evoke a sense o f crisis
among organizational members by proposing challenging goal s.
•Redundancy : refers to intentional overlapping of information concern -
ing business activities, management responsibilities, and the co mpany
as a whole. Sharing redundant information promotes the shari ng of
tacit knowledge, because individuals can sense what others are trying
to articulate. Redundancy is especially important in a stage i n which
a new concept is being development, when it is critical to art iculate
images rooted in tacit knowledge. Redundancy also facilitat es the
interchange between hierarchy and non-hierarchy. Finally , it provides
the organization with a self-control mechanism to keep it movi ng in
a certain direction. There are several ways to build redundan cy into
the organization. One is to adopt an overlapping approach in which
diﬀerent functional departments work together in a “fuzzy” division of
labor (“rugby style”). Another way is through a “strategic rota tion”
40 Theoretical Framework
of personnel, especially between vastly diﬀerent areas of tech nology
or functions such as R&D and marketing. Besides, redundancy can
be achieved by the use of appropriate technology which mainta ins the
same piece of knowledge available in diﬀerent points of actio n.
•Variety : an organization’s internal diversity must match the variety
and complexity of the environment in order to deal with chall enges
posed by the environment. To maximize variety, everyone in th e orga-
nization should be assured of the fastest access to the broadest vari ety
of necessary information, going through the fewest steps.
Communities of Practice and Situated Learning
Recently, organizations have recognized communities of pr actice as a poten-
tial strategy to enable eﬀective knowledge creation and shari ng (Allee, 2000)
(Wenger, 1998). This understanding is motivated by the observ ation that
knowledge cannot be separated from the communities that crea te it, use it,
and transform it. Communities of practice (CoPs) can be deﬁned as infor-
mal groups of workers generally gathered based on similar inte rests, common
work, personal aﬃnity and trust. What holds these workers toget her is a
common sense of purpose and a real need to know what each other kno ws
(Allee, 2000).
Being in the same department or organization can be beneﬁcial but is
not a strong requirement for the formation of such communities. On one
hand, not all people grouped together in the same space or unit f orm a CoP.
On the other hand, a CoP can extrapolate the boarders of depar tments and
organizations, connecting people that are in several units an d geographically
dispersed. According to Wenger (1998), what deﬁnes a CoP is the c ombi-
nation of three distinct dimensions: mutual engagement, joint enterprise ,
andshared repertoire . Mutual engagement concerns the shared practices
among the participants of a community, i.e. the actions in wh ich they are
engaged, in a constant negotiation of meanings and behaviors. Membership
to a community thus depends on being involved in these same acti ons and
negotiation processes. By joint enterprise, the author means th e common
Knowledge Management 41
objectives and mutual accountability shared by community me mbers, as a
result of the collective processes in which they are involved. J oint enterprise
controls the community’s rhythm, and functions as a tool for coordination
and sense-making. And ﬁnally, shared repertoire refers to the re sources cre-
ated or used in the course of the community’s existence. These reso urces
include routines, words, tools, procedures, stories, symbols, acti ons, and
concepts.
In the perspective of organizational work, what makes these en vironments
appealing is the fact that the dynamics of the community lead people to nat-
urally share knowledge and learn from each other. Lave et al. ( 1991) argue
that learning is situated, i.e. it happens as a product of acti vity, context and
culture. Rather than asking what kinds of cognitive processes a nd concep-
tual structures are involved, situated learning focuses on what kinds of social
engagements provide the proper context for learning to take place. CoPs
can provide this context, being an ideal environments for th e enhancement
of performance of old-timers, while at the same time supporting newcomers
to engage into organizational practices.
According to the situated learning theory, people are part of C oPs that
embody a set of beliefs, norms and behaviors (i.e. culture), wh ere they
acquire and exchange knowledge. Lave et al. (1991) claim tha t this pro-
cess leads to legitimate peripheral participation, which co ncerns the process
by which newcomers become part of the community. In the begin ning, a
newcomer is in the periphery of the community. As the newcomer moves
from the periphery to the community’s center, he/she becomes more active
and engaged within the culture, hence assuming the role of expe rt or old-
timer. At the same time, legitimate peripheral participatio n also takes into
accounts the transformation of communities of practice, as a result of their
members’ interaction and practices.
Situated learning is very much related to the idea of apprent iceship, where
a learner evolves his knowledge and abilities by assisting an ex pert in doing
his work. In contrast with formal education, in apprenticeshi p settings, the
learner does not gain a discrete body of abstract knowledge, wh ich can be
transported and reapplied in later contexts. Instead, he/she ac quires the
42 Theoretical Framework
skill to perform by actually engaging in the process.
It is important to note that CoPs cannot be forcibly created, but they
may be fostered, by acquiring from the organization the means to grow and
mature within working settings (Gongla and Rizzuto, 2001) (D ignum and
van Eeden, 2003). Dignum and van Eeden (2003) emphasize the im portance
of setting up real targets to communities of practice, guaran teeing their value
for the organization to be concretely perceived and measured . In addition
to that, fostering also includes creating the conditions for a community to
emerge, both giving social and technological support for it. I n the social
dimension, community members can, for instance, be rewarded a nd remem-
bered. As for the technological support, an appropriate infra structure needs
to be provided to facilitate knowledge sharing.
Distributed Knowledge Management
Distributed Knowledge Management (DKM) (Bonifacio and Bouq uet, 2002)
has recently appeared as an attempt to provide an alternativ e to centralized
systems, which often lead to abandonment or misuse. According to DK M
proponents, KM is generally faced and pursued according to an o bjectivistic
epistemology, in which knowledge can be expressed following an objective
and general codiﬁcation (based on a supposedly shared conceptua lization
and understanding between organizational members). Besides, i t is also
assumed that knowledge can be shared and reused disconnected from the
individual or community that has created it. In addition to t hat, traditional
organizational models and paradigms of control are usually p rivileged, lead-
ing to centrally managed knowledge bases, containing knowled ge that once
made explicit, is property of the organization.
Contradicting this view, DKM focuses on the social and subjecti ve na-
ture of knowledge. According to this theory, an organization is formed by
multiple units named Knowledge Nodes , deﬁned as individuals, teams or
communities that have diﬀerent terminology and working pra ctices. These
Knowledge Nodes should be allowed to locally manage their own k nowledge,
thus having knowledge property and autonomy with respect to sh aring it
Constructivism 43
with others. KM becomes a problem of coordinating these multip le sources
of knowledge in a distributed way. So, while sharing knowledge , the source’s
terminology (or interpretative schema) should be communicat ed, and per-
haps translated to the destiny’s terminology, thus providing the context in
which that knowledge was created. In summary, these assumptions can be
summarized in two principles (Bonifacio and Bouquet, 2002):
•Principle of Autonomy: each unit (person or group) should be gra nted
a high degree of autonomy to manage its local knowledge;
•Principle of Coordination: each unit must be enabled to excha nge
knowledge with other units not by imposing the adoption of a sin gle,
common interpretative schema but through a mechanism of mappi ng
other units’ context onto its context from its own perspective .
In order to enable knowledge sharing, technology should be shap ed re-
ﬂecting these principles, resulting in a distributed architect ure.
2.3 Constructivism
Knowledge Management is indirectly aimed at learning, as on e of its main
objectives is to allow members of an organization to evolve i n terms of gain-
ing knowledge and developing skills. This suggests that a special attention
should be given to understanding and analyzing how knowledge e merges in
human thinking, acting and interacting with the world.
Note that, here, we refer to learning processes undertaken with out par-
ticular educational intervention, but rather unintention ally, embedded in
people’s daily routine. Complying with this view, Construct ivism is based
on the active participation of individuals in the constructi on of their own
knowledge, instead of being instructed. In this sense, the person ’s cognitive
system cannot be seen as an empty vessel to be ﬁlled in. Instead, each new
element assimilated by the cognitive system will be contrasted an d combined
with the already existing elements, according to the understan dings of that
particular individual.
44 Theoretical Framework
Although agreeing on a few general principle (e.g. active and autonomous
participation of learners in the learning process, learner’s self-construction,
etc), diﬀerent theorists have presented their own views on Con structivism,
focusing on diﬀerent elements to explain how knowledge emerg es. Here, we
summarize the main contributions of four thinkers that have p rofoundly in-
ﬂuenced how we view knowledge creation in this work. Later in this chapter,
we present a general discussion, comparing and contrasting the de scribed
contributions, and relating them to the KM theories discussed in section
2.2.4.
2.3.1 Jean Piaget: Genetic Epistemology
Piaget’s theory (Piaget and Inhelder, 1969) suggests that kno wledge is orig-
inated by a continuous construction and elaboration of new co gnitive struc-
tures through a central cognitive equilibration process. In g eneral, a modiﬁ-
cation in the environment generates a perturbation in the in dividual’s cogni-
tive system, taking it out of a state of virtual equilibrium. As th is cognitive
system is conditioned to seek equilibrium, it tends to stabilize although real
equilibrium can never be completely achieved. New stabilizat ion, given by
another temporary cognitive equilibrium state, depends on a ssimilation and
accommodation processes. First, assimilation allows that an exte rnal ele-
ment is incorporated in the individual’s conceptual schemas. Subsequently,
this new element is accommodated in the existing mental model , consid-
ering the characteristics of this element and contrasting it w ith what the
individual already knows. This process is illustrated in Figur e 2.3.
Figure 2.3 depicts the cognitive balancing process as a spiral . The line in
the center of the spiral represents the real equilibrium that a lthough sought,
is never actually achieved by the individual. In several mome nts (indicated in
the ﬁgure by black dots), the individual experiences a pertur bation triggered
by modiﬁcations in the environment with which he/she interac ts. This is
followed by phases of assimilation and accommodation that ﬁnal ly leads
to another virtual equilibrium state. In a following moment, there is a
new perturbation, triggering another cycle. At each stage, t he individual
Constructivism 45             	
   
                 
      
  
        
              
          
Figure 2.3: Cognitive balancing process
broadens his/her mental model, which is represented in the ﬁgu re by the
growing spiral arcs.
Although not extensively focusing on social interaction, Piage t has shown
its importance for learning (de La Taille, 1992). According t o him, the
stages of development of the logical operations correspond to the correlative
stages of social development. In a child’s sensorimotor stage, th ere is no
socialization of intelligence, i.e. knowledge sharing, whic h can only begin
with language acquisition. However, even after learning how t o speak, in
the preoperational stage, some characteristics prevent child ren to establish
eﬀective knowledge sharing. On one hand, the child lacks the a bility to com-
mit to a common system of meanings with other individuals. On the other
hand, he/she does not necessarily maintain his/her points of vie w through-
out the dialogue. And ﬁnally, the child is not able to place him self/herself
in the point of view of the other, and thus reciprocity relati ons are not es-
tablished. These three characteristics form what Piaget calle d egocentric
thinking. Starting from the operational stage, with the emer gence of logical
thinking, the child overcomes egocentric thinking and is ﬁn ally able to es-
tablish a real dialogue, by expressing his/her individual point s of view while
contrasting it with the perspectives of others.
46 Theoretical Framework
2.3.2 Lev Vygotsky: Social-historic Constructivism
Vygotsky (1978) has emphasized the role of culture and social int eractions in
learning processes. For him, culture has a great impact in the de velopment
of one’s intelligence. It is through the interaction with fa mily members and
other persons of his/her environment that a child creates his/h er conceptu-
alizations and develops his/her mental abilities. This is cle ar in Vygotsky’s
following statement:
“Every function in the child’s cultural development appear s twice: ﬁrst,
on the social level, and later, on the individual level; ﬁrst, between people (in-
terpsychological) and then inside the child (intrapsycholog ical). This applies
equally to voluntary attention, to logical memory, and to the formation of
concepts. All the higher functions originate as actual rela tionships between
individuals.” (Vygotsky, 1978, pg. 57)
According to this Russian psychologist, humans are capable of ind ivid-
ually constructing knowledge up to a certain level, called le vel of real de-
velopment. But a person can go beyond this level, to the level o f potential
development, if helped by a more capable peer, usually a paren t, a teacher,
or a more experienced peer. The diﬀerence between these two le vels is what
Vygotsky called the zone of proximal development. Vygotsky’s th eory is
illustrated in ﬁgure 2.4.
potential development 
level
real development 
level
current knowledge zone of proximal development
individually 
achieved interacting with 
most-able peer
Figure 2.4: Illustration of Vygotskys theory
2.3.3 Seymour Papert: Constructionism
Papert has been one of the ﬁrst thinkers to realize the potenti al of computer
technology in the development of intelligence (Papert, 199 3). In the sixties,
he proposed the use of computers as an educational strategy, and created
Constructivism 47
the programming language named LOGO to enable children to bu ild and
explore graphics and simulations as instruments of learning a nd enhancing
creativity.
The core idea in the Constructionist theory proposed by Papert i s illus-
trated in ﬁgure 2.5. He claims that individuals learn more eﬀe ctively when
engaged in the construction of something external and sharable , such as a
sand castle, a robot, a computer program, or a book. This leads t o a cycle
of internalization and externalization of knowledge, moti vated by the con-
struction of an external object that has meaning to the indivi dual and to
those that surround him/her.
internalization and 
externalization cycles 
Figure 2.5: Knowledge internalization and externalizatio n cycles motivated
by the construction of a sharable and concrete artifact
2.3.4 Paulo Freire: Dialogue enables Learning
Paulo Freire is one of the most prominent educators of our cent ury. His expe-
rience has included teaching children and adults from diﬀer ent backgrounds
and social levels. He has emphasized that the learning process is n ot in-
structional but rather dialogical (Freire, 1970). In this sen se, instructor and
pupil should be viewed at the same time as educators and learner s, respect-
ing each other by what they know, and gaining new knowledge to gether by
negotiating content and strategies. Given that KM is informal rather than
curriculum-based, his claim is especially relevant for our pu rposes.
Freire has proposed that the main purpose of gaining new knowle dge is
to enable critical thinking and the active engagement of the learner in the
48 Theoretical Framework
construction and enhancement of his own reality (Freire, 197 0). For that,
he has argued that the educational process should have its foun dation in
the consciousness of the day-to-day situations lived by the lear ners. Thus
selecting themes that are related to the pupils’ daily lives ca n lead to better
results than choosing subjects that have no attachment to their reality.
One of Freire’s particular claims regards the real gains of m otivating
learners to ask questions. According to his Pedagogy of Question ( Freire
and Fagundez, 1992), a question is the ﬁrst “knowledge sparkle” . By this
means, one is able to externalize some of his knowledge at the sam e time
as reﬂecting about what information he/she possesses in contrast t o what is
missing. In fact, it is through question and answering that we solv e many
of our problems in daily life, being it at work, at family enco unters, or in
other endeavors. And besides, questions are also the beginning of a ny scien-
tiﬁc work, in which ﬁnding relevant research questions express the maturity
of the one seeking for a scientiﬁc breakthrough. It is importan t to note
that questioning and answering here are not merely part of an in tellectual
game, but rather an important ingredient of the word-action -reﬂection triad.
In this sense, reﬂection leads to the expression of doubts that ar e directly
connected to action.
Diﬀerent cultural aspects can impel or constrain the act of que stioning.
A democratic environment is more appropriate than an author itarian one.
According to Freire and Fagundez (1992), authoritarianism pr events curios-
ity, since questioning can be seen as challenging authority. In addition to
that, dialog requires an environment where mistakes are tole rated and even
valued as a means for learning and improving performance.
2.4 The Agent-oriented Paradigm
Winograd (1995) claims that in the mid 1990’s, there was a shift in software
development from a programming to a design centered view. By t hen, soft-
ware engineers had realized that it was more diﬃcult to under stand which
functionality a system should exhibit than correctly codifyin g functionality
The Agent-oriented Paradigm 49
in a programming language. The biggest eﬀort should then be put on model-
ing the interactions between system and stakeholders, rather th an on coding
and debugging software. This observation triggered the adopt ion of many
diﬀerent software development approaches and methods, from t he object-
oriented software engineering paradigm through participat ory methods and
prototyping practices.
The agent-oriented paradigm comes again as one more step in th e evo-
lution of software engineering approaches (Jennings et al., 1998) (Parunak,
2000). Jennings et al. (1998) claim that agents have become so attractive due
to their ability to naturally and easily characterize a varie ty of applications.
We agree with this view. Agents are more able than objects to re present
active entities of a domain or a system. In fact, our world is com posed of
active and passive entities. For instance, in an organizational setting, an
employee is an active entity, while the resources he uses for hi s work are
passive. Similarly, we can conceive a system composed of active en tities
(agents) that manipulate a number of passive resources or inform ation en-
tities (objects) to accomplish their tasks. Therefore, especial ly with respect
to organizational software, the agent paradigm presents much more power-
ful abstractions to analyze and model the complexities and id iosyncrasies of
the organizational setting. It allows the view of organizati ons, humans and
software systems as intentional entities that interact on the p ursuit of both
common and individual goals, and on the execution of tasks.
The main characteristic that distinguish an agent from an objec t is its
capacity to act autonomously (Jennings et al., 1998) (Paruna k, 2000). This
work takes the deﬁnition of autonomy proposed by Jennings et a l. (1998).
According to this deﬁnition, to say that agents are autonomous means that
(to some extent) they have control over their behavior and can act without
the intervention of humans. Objects do have control over thei r state, but
not of their behavior. In other words, once an object B invokes a method
of object A, the method is executed. In agent-based systems, actio ns are
executed by request, i.e. an agent B must issue a request to agent A, w hich
then decides whether or not the action ﬁts its own internal mo tivations,
before executing it.
50 Theoretical Framework
The agent paradigm has been shaped by developments from severa l re-
search areas, such as distributed computing, object-oriented sy stems, soft-
ware engineering, artiﬁcial intelligence, economics, socio logy, and organiza-
tional science (Jennings et al., 1998). Still today, two main viewpoints on
agents can be identiﬁed in the agent research community.
•TheSoftware Engineering perspective takes agent as a powerful meta-
phor to develop software. In this perspective, the software syste m can
be thought of as a group of active entities (agents), each one h aving
its own goals and behavior. The sum of this “more simple” behavi or
gives the multiagent systems (MAS) overall complex behavior. C on-
sequently, MAS are referred to as more than the sum of its parts.
•TheArtiﬁcial Intelligence perspective emphasizes the intelligent and
ﬂexible behavior of agent, characterizing it as an autonomo us entity,
capable of both reactive and proactive (go-driven) behavio r, and social
ability.
Although we acknowledge the importance of the Artiﬁcial Intel ligence
research, and especially those targeted at understanding the me ntalistic
concepts attributed to agents, such as beliefs, desires, intenti ons (Rao and
Georgeﬀ, 1991) and commitments (Castelfranchi, 1995), here we take a Soft-
ware Engineering view. This choice is justiﬁed by our main con cern of ex-
ploring the potentials of the agent-oriented approach for t he analysis, design
and development of KM enabling systems.
2.4.1 Agents’ Deﬁnitions and Attributes
There is not a consensus on the deﬁnition of agents and their att ributes.
Weiss (1999) states that agents are autonomous computational entities,
which can be viewed as perceiving their environment through sensors and
acting upon their environment through eﬀectors. Figure 2.6 sh ows an ab-
stract top-level view of an agent. It shows that the agent takes sensory
input from the environment, and produces actions that aﬀect this environ-
The Agent-oriented Paradigm 51
ment as output. The interaction is usually an on-going, non-t erminating one
(Wooldridge, 1999).
Agent
EnvironmentSensor
inputAction 
output
Figure 2.6: An agent interacting with the environment (Woold ridge, 1999)
As there is no agreement on the deﬁnition of agent, the same happ ens re-
garding intelligence. For Wooldridge (1999), an agent is ca lled intelligent if it
can act ﬂexibly towards achieving its goals, which mean that t he agent must
be reactive, pro-active, and have social ability. These three characteristics
are described as follows:
•reactivity: intelligent agents are able to perceive their e nvironment,
and respond in a timely fashion to changes that occur in it;
•pro-activeness: intelligent agents are able to exhibit goal- directed be-
havior by taking the initiative;
•social ability: intelligent agents are capable of interacti ng with other
agents.
Other researchers, such as Sen and Weiss (1999) think that a system b eing
considered as intelligent is also expected to be able to learn. According
to them, learning can be deﬁned as the acquisition of new knowl edge and
motor and cognitive skills and the incorporation of this know ledge and skills
in future system activities, provided that this acquisition and incorporation
is conducted by the system itself and also leads to an improvement in its
performance. In other words, saying that an agent has learning ability means
that the agent is going to improve its future behavior, based o n knowledge
and skills it has acquired in past experiences.
52 Theoretical Framework
Agents may also exhibit other attributes, such as mobility, vera city, be-
nevolence and rationality. This does not mean that every age nt will have all
these characteristics. This depends on the nature of its tasks an d should be
decided by the designer. These attributes are deﬁned as follow s (Wooldridge
and Jennings, 1995):
•mobility: is the ability of an agent to move around electroni c networks;
•veracity: is the assumption that an agent will not knowingly co mmu-
nicate false information;
•benevolence: is the assumption that diﬀerent agents do not hav e con-
ﬂicting goals, and that every agent will therefore always try to do what
is asked of it;
•rationality: is the assumption that an agent will act in order t o achieve
its goals and will not act in such a way as to prevent its goals fr om
being achieved.
A system composed of two or more agents that interact in order to a chieve
a common goal is called a multiagent system (MAS) (Wooldridge and Jen-
nings, 1995). In a MAS, it is possible to encounter agents with diﬀ erent
levels of intelligence. Depending on the agent’s goals, it is necessary to pro-
vide it with knowledge and an inference mechanism, so that it ca n reason
and decide how it should act. On the other hand, other agents mi ght have
goals that do not require much intelligence, but require tha t they should be
mobile, for example. As mentioned before, the decision about t he attributes
that an agent must have depends on its internal requirements.
“A MAS can be seen as a loosely coupled network of problem solv ers that
work together to solve problems that are beyond the individua l capabilities or
knowledge of each problem solver. The characteristics of MAS are: a) each
agent has incomplete information, or capabilities for solv ing the problem,
thus each agent has a limited viewpoint; b) there is no global system control;
c) data is decentralized; and d) computation is asynchronous .”(Jennings
et al., 1998, pg. 285)
The Agent-oriented Paradigm 53
Note that such characteristics of MAS apply for artiﬁcial or huma n soci-
eties. Thus, we infer that a MAS composed only by humans, or by a mix o f
humans and artiﬁcial agents inherit the same kinds of problem s described
by Jennings et al. (1998) regarding purely artiﬁcial MAS. The se problems
regard, among others, the coordination of actions, the concil iation of mul-
tiple intentions, the allocation of limited resources, and the guarantee for a
noiseless communication.
2.4.2 Agent-oriented Software Engineering
Methodologies and Languages
Agent Technology has received a great deal of attention in the last few
years and, as a result, the industry is beginning to get interest ed in using
this technology to develop its own products. The role of agent -oriented
methodologies is to assist in all the phases of the life cycle of an agent-based
application (Iglesias et al., 1999), although diﬀerent ones emphasize one or
more development activities. In this section, we present some la nguages and
methodologies speciﬁcally tailored for the analysis and desig n of agent-based
systems. Whilst a comprehensive review of all methodologies and l anguages
is beyond the scope of this thesis, we here attempt to provide some of the
most prominent approaches.
The Gaia Methodology
According to (Wooldridge et al., 2000), the extended approac hes based
on the object-oriented view fail to adequately capture agen t’s ﬂexible, au-
tonomous problem-solving behavior, the richness of agents’ in teractions , and
the complexity of agent systems’ organizational structures. For these rea-
sons, the Gaia methodology has been speciﬁcally elaborated for the analysis
and design of agent-based systems. Analysis and design can be understo od
as a process of developing increasingly detailed models of the system to be
constructed. Figure 2.7 shows the Gaia models applied in each o f these
development activities.
54 Theoretical Framework
Requirement 
Specification 
Role ModelInteraction 
Model
Agent 
ModelService 
ModelAcquaintance 
ModelAnalysis 
Design 
Figure 2.7: The Gaia models (Wooldridge et al., 2000)
For Gaia, a multi-agent system can be viewed as an organization , in
which the agents assume diﬀerent roles. These roles have a certai n relation-
ship among themselves and each one of them will participate in sy stematic
interactions with the others. The analysis stage is dedicated f or the under-
standing of this organization, and this is made with the aid of two models:
the roles model and the interaction model.
A role is deﬁned by four attributes: responsibilities, permission s, activities
and protocols. The responsibilities deﬁne the functionalitie s of the role.
The permissions are the “rights” associated with the role to allow it to
perform its responsibilities. In other words, the permissions ide ntify the
resources that are available for the role, typically informa tion resources. So,
a role can be associated to the ability of reading, modifying or generating
a certain information. Activities are computations that can be executed by
the role alone, without interaction with other roles. On the o ther hand,
protocols deﬁne the way the role interacts with other roles, w hile executing
its responsibilities. The roles model can be precisely deﬁned as a set of role
schemata, one for each of the system’s roles.
There are dependencies and relationships between several rol es in a multi-
agent organization. This is central in the way the system works. For this
reason, the interactions must be captured and represented in th e analysis
stage. In Gaia, these links between roles are represented in the interaction
model.
The interaction model consists of a set of protocol deﬁnitions, o ne for each
The Agent-oriented Paradigm 55
role interaction. Here, the focus is in the essential nature and the purpose of
the interaction, and not in a precise order of a particular exc hange of mes-
sages. The protocol deﬁnition determines a textual descriptio n (proposal) of
the interaction, its initiator and the responder, its inputs and outputs and
a brief textual description of its process.
The aim of a “classic” design is transforming the abstract models d erived
during the analysis stage into models at a suﬃciently low level o f abstraction
that they can be easily implemented. This is not the case with ag ent-oriented
design, however. Rather, the aim in Gaia is to transform the ana lysis models
into a suﬃciently low level of abstraction that traditional de sign techniques
(including object-oriented techniques) may be applied in or der to implement
agents. To put it another way, Gaia is concerned with how a socie ty of
agents cooperate to realize the system-level goals, and what is required of
each individual agent in order to do this. Actually how an agent realizes
its services is beyond the scope of Gaia, and depends on the part icular
application domain.
The Gaia design process involves generating three models: the a gent
model; the services model and the acquaintance model. The age nt model is
concerned to documenting the various agent types used in the sy stem, also
assigning one or more roles to each type. The services model iden tiﬁes the
services associated to each role. And the acquaintance model deﬁ nes the
communication links that exist between agent types.
The design process can be summarized as follows:
1. creating the agent model: a) aggregating roles in agent ty pes; b) reﬁn-
ing it to create an agent hierarchy; and c) documenting the in stances
of each type;
2. developing the services model, examining activities, prot ocols and re-
sponsibilities of each role;
3. developing an acquaintance model, derived from the inter action and
agent models.
56 Theoretical Framework
ROADMAP
ROADMAP (Juan et al., 2002) focuses on building open systems and em pha-
sizes the societal aspects of an agent system. This methodology ex tends Gaia
by introducing use-cases for requirement gathering, explici t models of agent
environment and knowledge, and interaction model based on AUM L interac-
tion diagrams. Figure 2.8 presents the models adopted by this m ethodology.
Use Case 
Model
Role Model
Interaction 
Model
Agent 
ModelService 
ModelAcquaintance 
ModelSpecification 
and Analysis 
Design Environment 
Model
Knowledge 
Model
Protocol 
Model
Figure 2.8: The ROADMAP models (Juan et al., 2002)
Traditional UML Use Case Diagrams are applied to gather system re-
quirements. These case diagrams are then used to generate two oth er mod-
els: the environment and the knowledge models, which present a g eneral
view of the system’s environment and knowledge respectively.
TheEnvironment Model consists of a tree hierarchy of zones in the envi-
ronment, and a set of zone schema to describe each zone in the hier archy.
A zone schema includes a text description of the zone, and the fo llowing
attributes: objects, constraints, sources of uncertainty and assu mptions.
TheKnowledge Model consists of a hierarchy of knowledge components,
and a description for each knowledge component. Besides ident ifying and
decomposing knowledge components disposed in a hierarchy, thi s model is a
result of the analysis of these components’ life cycles, determin ing how the
knowledge components are generated, consumed and stored.
TheRole Model extends its correspondent model in Gaia with a role hi-
erarchy. The role hierarchy is represented as a tree of roles, i n which leaf
nodes of the tree are atomic roles, while the others are composi te roles. The
The Agent-oriented Paradigm 57
atomic roles retain their original deﬁnition and represent c haracteristics of
individual agents. The composite roles are deﬁned in terms of o ther roles,
whether atomic or composite. Roles are deﬁned as in Gaia, havi ng per-
missions and responsibilities. Besides this, ROADMAP Role schema has
two additional attributes: sub-roles and knowledge. The form er lists the
sub-roles of a composite role, representing the local organiza tion structure.
The latter represents local social knowledge, emerging from t he interaction
of sub-role knowledge. Roles can be changed at run-time given the correct
authorization (i.e. a permission to access and modify the deﬁni tion of other
roles). Instead of immutable contract of behavior, roles shoul d be consid-
ered as long-term agreement of behavior that can be reasoned a nd changed.
This diﬀerence allows a computing organization modeled in r oles to be more
ﬂexible.
The old Gaia interaction protocols are here subsumed by the Protocol
Model , which are then reﬁned into AUML interaction diagrams (refer to
section 2.4.2), which compose the Interaction Model . In this respect, the only
additional feature is the representation of zones in the inte raction diagrams.
With the adoption of AUML interaction diagrams, ROADMAP aims at
providing a more ﬂexible and dynamic way to model agent’s int eractions.
No addition is made in the design models related to the ones prop osed
in Gaia. Like previously, all models from the analysis are carr ied out into
design, where the Agent, Service andAcquaintance models are designed for
the system.
The ROADMAP methodology provides strong support for engineerin g
complex open systems, but is less suitable for application not req uiring these
properties. In cases of systems having static nature, simple envir onment and
lack of knowledge, creating the models prescribed by ROADMAP sim ply
causes extra overhead (Juan et al., 2004).
OperA
The OperA methodology (Dignum, 2004a) allows for the formal speciﬁcation
of agent societies (i.e. a system is seen as an organization or soci ety of
58 Theoretical Framework
agents). OperA at the same time, facilitates the discussion with d omain
experts that are not knowledgeable in agent theory, and is ba sed on a formal
semantics that make veriﬁcation possible.
OperA modeling approach consists of two main phases: the ﬁrst phase
is dedicated to build an Organizational Model , which comprehends the def-
inition of the organizational structure and global behavior of the system;
in the second phase, the organizational structure is actually p opulated by
agents, and speciﬁc conditions are agreed for their enacting o f the orga-
nizational roles. This second phase is accomplished through two diﬀerent
models, namely the Social and the Interaction models.
TheOrganizational Model speciﬁes the organizational characteristics of
an agent society in terms of four structures:
•Social structure: speciﬁes objectives of the society, its role s and what
kind of model governs coordination.
•Interaction structure: details interaction moments (scene sc ripts) that
represent a society task that requires the coordinated action o f several
roles; and gives a partial ordering of scene scripts, which specif y the
intended interactions between roles.
•Normative structure: describes society norms and regulations i n terms
of role and interaction norms.
•Communicative structure: speciﬁes the ontologies for descrip tion of
domain concepts and communication illocutions.
In the Social Model , the enactment of roles by agents is ﬁxed in social con-
tracts that describe the capabilities and responsibilities of the agent within
the society, that is the agreed way the agent will fulﬁll its ro le(s). Because
the society designer does not control the design and behavior of individual
agents, there is a need to verify the actual behavior of a societ y population.
This is done by analyzing the agreements speciﬁed in the social contracts.
The use of contracts to describe activity of the system allows, on o ne hand,
The Agent-oriented Paradigm 59
for ﬂexibility in the balance between organizational aims a nd agent desires,
and, on the other hand, for veriﬁcation of the outcome of the sy stem.
In the Interaction Model , concrete interaction scenes are dynamically cre-
ated by role-enacting agents, based on the interaction scripts speciﬁed in
the OM. Role enacting agents negotiate speciﬁc interaction a greements with
each other. Such interaction commitments are ﬁxed in intera ction contracts.
As in the Social Model, interaction contracts allow on one han d for ﬂexibility
and personalization of the organizational design, and on the o ther hand, for
the veriﬁcation of design and activity. That is, it can be veriﬁ ed whether the
interaction agreements between a speciﬁc population satisfy a nd are suﬃ-
cient for the organizational interaction aims speciﬁed in th e Organizational
Model.
The choice for modeling the systems in these two distinct phases, on e
for modeling the society and the other to enable the populatio n of the soci-
ety makes OperA very suitable for situations that involve the i ntegration of
agents developed by several parts. In fact, OperA assumes that th e agents
composing the system are already designed beforehand. Thus, Oper A con-
sists of a methodology to combine these agents into a system that ex hibits
coherent behavior and meets the needs deﬁned by the system requ irements
(Organizational Model), rather than proposing a design metho dology which
develops the agents from scratch to compose a system.
Tropos
Tropos is an agent-oriented software development methodolo gy for engineer-
ing distributed systems (Bresciani et al., 2004). The methodolo gy adopts
a model-driven approach, i.e. it guides the software enginee r in building
a conceptual model, which is incrementally reﬁned and exten ded, from an
early requirements model, namely a representation of the org anizational set-
ting where the system-to-be will be introduced, to system design a rtifacts.
Indeed, a distinctive feature of the methodology with respect to current
agent-oriented methodologies is that of ﬁlling the gap betw een requirements
analysis and system architecture design, by adopting an uniform notation
60 Theoretical Framework
and an uniform analysis technique to model business goals, system r equire-
ments and system architecture.
Tropos uses a conceptual modeling language derived from the i * frame-
work (Yu, 1995), which provides a graphical notation and a set of techniques
for goal analysis. This notation has been extended in order to a llow for infor-
mal and formal speciﬁcations. Basic constructs of the conceptua l modeling
language are those of actor, goal, plan, softgoal, and resource :
•an actor can represent a stakeholder in a given domain, a role or a set
of roles played by an agent in a given organizational setting;
•a goal represents the strategic interests of actors. Two basic typ es of
goals are considered, namely hardgoals and softgoals, the latt er hav-
ing no clear-cut deﬁnition and criteria as to whether they ar e satisﬁed.
This diﬀerence is captured in (Chung et al., 2000), which sugg ests to
say that (hard) goals can be satisﬁed, while softgoals can be satis-
ﬁced. Softgoals are useful to represent how a state of aﬀairs shou ld
be reached, that is they can represent goal/plan qualities an d non-
functional requirements.
•a plan (or task) speciﬁes a particular way of doing something, i. e. a
particular course of action that can represent a means for satisf ying a
goal or for satisﬁcing a softgoal;
•a resource is a physical or informational entity used in a given t ask or
to achieve a certain goal.
A dependency link between pairs of actors allows the analyst t o model the
fact that one actor depends on another in order to achieve a go al, execute a
plan, or acquire a resource. The former actor is called the dep ender, while
the latter is called the dependee. The object (goal, plan reso urce) around
which the dependency centers is called the dependum. If the d ependee fails
to deliver the dependum, the depender would be adversely aﬀec ted in its
ability to achieve its goals. In this sense, the depender become s vulnerable
due to its dependency links. This type of information can be gr aphically
The Agent-oriented Paradigm 61
depicted in an actor diagram, a graph whose nodes represent act ors (circles)
and whose arcs represent dependencies (a couple of arrows link ed by its
dependum).
The process of model building in Tropos has been speciﬁed in (Br esciani
et al., 2004) in terms of a non-deterministic concurrent algo rithm, here we
give a qualitative description. Model building begins with t he deﬁnition of
a number of actors, each with a list of associated main goals (or sof tgoals).
Notice that at the beginning, the minimum set of actor goals whi ch relates
to the analysis purpose is explicitly modeled. Throughout the reﬁnement of
the model, further goals may be included.
Each root goal is analyzed from the perspective of its respecti ve actor
and depicted in a sort of balloon, called the goal diagram. For instance,
goal means-end analysis proceeds by reﬁning a goal into sub-goa ls, plans,
and resources that provide means for achieving the goal (the e nd). Con-
tribution analysis allows the analyst to point out goals and sof tgoals that
can contribute positively or negatively in reaching the goal being analyzed.
Decomposition allows for a combination of AND and OR decompositi ons of
a root goal into sub-goals, thereby reﬁning a goal structure. Th e generated
sub-goals are delegated to other actors, or remain a responsibil ity of the
actor itself. Sometimes new actors need to be introduced, to w hom some
goals and/or tasks are delegated. For instance, in order to rep resent the
role of technology at support of the organization’s processes, n ew actors are
introduced, reﬁning a model of the organization’s needs int o a model of the
requirements for an information system able to meet these needs. Softgoal
analysis is typically used to drive the choice of a particular c hoice among dif-
ferent alternatives that may emerge during OR-goal decompo sition (Chung
et al., 2000). Modeling is complete when all goals have been d ealt with to
the satisfaction of the actors who pursue them.
Prometheus
The Prometheus (Padgham and Winikoﬀ, 2002) methodology foc uses on
building agents using BDI platforms and on providing explici t and detailed
62 Theoretical Framework
processes and deliverables suitable for use by industry practiti oners with
limited agent experience, or by undergraduates. Having in min d the de-
velopment of large industrial applications, this methodolog y is based on an
incremental development, which allows constant reﬁnements in artifacts and
documentation. Prototyping of skeleton code is enabled duri ng these reﬁne-
ments, allowing for a better understanding of the system’s behav ior before
its actual complete implementation.
Prometheus methodology consists of three activities: system spec iﬁca-
tion, architectural design, and detailed design. The system speciﬁcation
activity focuses on identifying the basic functionalities of the system, along
with inputs (percepts), outputs (actions) and any important sh ared data
sources. Use case scenarios, adapted from UML, are created to provide a
more general view of the interaction between actions, percep ts and function-
alities.
Architectural design uses the outputs from the previous activi ty to de-
termine which agents the system will contain and how they will i nteract.
During this stage of the design, it is important to identify the events that
the agent will respond to. Agent messages are also identiﬁed, form ing the
interface between agents. Possible shared data objects should al so be iden-
tiﬁed at this stage.
Detailed design looks at the internals of each agent and how it will accom-
plish its tasks within the overall system. The focus is on deﬁning capabilities
(modules within the agent), in terms of internal events, plan s and detailed
data structures.
Prometheus supports the engineering of conventional closed sy stems with
controlled and trusted agents. It speciﬁcally supports the BDI f ramework,
and focuses on functionalities. However it lacks support for adv anced prop-
erties such as openness and is not suitable for systems requiring t hese prop-
erties (Juan et al., 2004).
The Agent-oriented Paradigm 63
AUML
AUML presents an agent as an extension of active objects, exhibit ing both
dynamic autonomy (the ability to initiate action without ex ternal invoca-
tion) and deterministic autonomy (the ability to refuse or mod ify an external
request). Other capabilities, such as BDI mechanisms, mobility a nd explicit
modeling of other agents can also be added as extensions to the b asic AUML
agents (Odell et al., 2000).
The AUML proposal takes UML, which is an accepted formalism in aca -
demic and commercial environments and extends and adjusts th is language
to the context of agents. According to AUML proponents, UML provid es
tools for modeling many of the concepts regarding agents, such as interac-
tion protocols and internal behavior (Odell et al., 2000). I n other cases,
the authors suggest UML extensions that support additional conce pts. The
proposed modiﬁcations include (Wooldridge and Ciancarini, 2001):
•support for expressing concurrent threads of interaction, thu s enabling
UML to model such well-known agent protocols as the Contract Net ;
•a notion of “role” that extends that provided in UML, and in par tic-
ular, allows the modeling of an agent playing many roles.
It is important to point out that, like UML, AUML is rather a mode ling
language than a methodology. This means the proposed models c an be used
in diﬀerent ways, according to the adopted methodology.
MessageUML
MESSAGE (Methodology for Engineering Systems of Software Age nts), also
known as MessageUML, is an agent-oriented methodology that bui lds upon
current software engineering best practices covering analysi s and design of
MAS (Caire et al., 2001). MESSAGE uses a notation that is based on UML
whenever appropriate. More speciﬁcally, MESSAGE’s modelin g language
is related to UML as follows: a) it shares a common metamodeling l an-
guage (meta-metamodel) with UML and MOF; and b) it extends the UML
64 Theoretical Framework
metamodel with ‘knowledge level’ agent-oriented concepts. The main UML
behavioral concepts that are used to deﬁne the ‘physics’ of the M ESSAGE
worldview are: action, event and state.
The main contributions of MESSAGE are its proposed agent know ledge
level concepts and diagrams for viewing these concepts in the analysis model.
Most of the MESSAGE knowledge level entity concepts fall into the main
categories: ConcreteEntity, Activity, and MentalStateEnti ty.
A ConcreteEntity can have the following types:
•Agent: is an atomic autonomous entity that is capable of perfo rming
some (potentially) useful function. SoftwareAgent and HumanAge nt
are specializations of Agent.
•Organization: is a group of agents working together to a comm on
purpose. It has structure expressed trough power relationships ( e.g.
superior-subordinate) between constituents, and behavior/co ordina-
tion mechanisms expressed through interactions between consti tuents.
•Role: the distinction between role and agent is analogous to t hat be-
tween interface and object in UML.
•Class: describes the external characteristics of an agent in a pa rticular
context.
•Resource: is used to represent non-autonomous entities such as d ata-
bases or external programs used by agents. Standard object-ori ented
concepts are adequate for modeling resources.
An Activity can have the following types:
•Task: is a knowledge-level unit of activity with a single prime per-
former.
•Interaction and Interaction protocol: the MESSAGE concept of In-
teraction borrows heavily form Gaia (refer to section 2.4.2) . An In-
teraction by deﬁnition has more than one participant, and a p urpose
The Agent-oriented Paradigm 65
which the participants collectively must aim to achieve. An In terac-
tionProtocol deﬁnes a pattern of Message exchange associated wi th an
Interaction.
MESSAGE assumes an architecture that separates an inference me cha-
nism from a knowledge base and a working memory. The knowledge b ase
contains ﬁxed or slowly changing domain or problem-solving kn owledge in a
declarative form. The working memory contains more transien t sense or de-
rived information. This working memory is viewed as an abstra ct database
holding instances of MentalStateEntities, and its contents d eﬁne the Agent’s
mental state.
Two other simple but important concepts used in MESSAGE are: a)
InformationEntity: is an object encapsulating a chunk of inf ormation; and
b) Message: the agent-oriented concept of Message diﬀers from th e object-
oriented one in a number of respects. In UML, a message is a causal lin k in
a chain of behavior, indicating that action performed by one object triggers
an action by another object. In MESSAGE, a message is an object c om-
municated between Agents. The attributes of a message specify the sender,
receiver, a speech act (categorizing the message in terms of the intent of the
sender) and the content (an InformationEntity).
MESSAGE deﬁnes a number of views that focus on overlapping sub -sets of
entity and relationship concepts: organizational view, goal /task view, agen-
t/role view, interaction view, and domain view. The existenc e of diﬀerent
system views is aimed at providing ﬂexibility to the analyst, i. e. he/she can
choose an appropriate strategy, based on the combination of two or more
of these diﬀerent views. A possible modeling approach starts with a top
level of decomposition, referred to as level 0, which is subsequ ently reﬁned
to provide a complete understanding of the system.
AORML
The Agent-Object-Relationship (AOR) modeling approach, app lying the
Agent-Object-Relationship Modeling Language (AORML) (Wagn er, 2003),
is based on an ontological distinction between active and passiv e entities,
66 Theoretical Framework
that is, between agents and objects. The agent metaphor subsumes both
artiﬁcial and natural agents. Thus, the users of the informatio n system are
included and also considered as agents in AOR modeling.
AOR distinguishes between agents and objects according to the se two
main points: 1) while the state of an object in OO programming ha s no
generic structure, the state of an agent has a ‘mentalistic’ stru cture: it con-
sists of mental components such as beliefs and commitments. 2) wh ile mes-
sages in object-oriented programming are coded in an applica tion-speciﬁc
ad-hoc manner, a message in Agent-Oriented Programming is code d as a
‘speech act’ according to a standard agent communication lang uage that is
application-independent (Labrou et al., 1999).
In AORML, an entity is either an agent, an event, an action, a c laim, a
commitment, or an ordinary object. Agents and objects form, r espectively,
the active and passive entities, while actions and events are th e dynamic
entities of the system model. Commitments and claims establish a special
type of relationship between agents. These concepts are fundam ental com-
ponents of social interaction processes and can explicitly hel p to achieve
coherent behavior when these processes are semi or fully automat ed.
Only agents can communicate, perceive, act, make commitmen ts and sat-
isfy claims. Ordinary objects are passive entities with no such ca pabilities.
Besides human and artiﬁcial agents, AOR also models institution al agents.
Institutional agents are usually composed of a number of human, artiﬁcial,
or other institutional agents that act on its behalf. Organiz ations, such as
companies, government institutions and universities are mode led as insti-
tutional agents, allowing to model the rights and duties of th eir internal
agents.
There are two basic types of AOR models: external and internal m odels.
An external AOR model adopts the perspective of an external obse rver who
is looking at the (prototypical) agents and their interacti ons in the problem
domain under consideration. In an internal AOR model, AORML a dopts
the internal (ﬁrst-person) view of a particular agent to be mod eled. External
models typically have a focus, that is an agent, or a group of ag ents, for which
The Agent-oriented Paradigm 67
we would like to develop a state and behavior model. Figure 2.9 shows the
elements of an external AOR model, in which the language nota tion can be
seen.       
                ! ! "  # $ % & # ' () $ & #   * ' (  & + , - (. /  0  1  2 / 3 4       
  ! ! # & ! (  & 5  6 % # !+ , - (
7
(  878  (7
9    :   ;< = >  1     
3 ?   :   ;< = >  1      @( $ ( # ' (7- (
@$ ( # ' (7- (
@$ ( # ' (7
) $ & #   * ' (  & + , - (
Figure 2.9: The core elements of AOR external models
Object types belong to one or several agents (or agent types). T hey deﬁne
containers for beliefs. If an object type belongs exclusively to one agent or
agent type, the corresponding rectangle is drawn inside this a gent (type)
rectangle. If an object type represents beliefs that are share d among two or
more agents (or agent types), the object type rectangle is con nected with
the respective agent (type) rectangles by means of an UML aggre gation
connector. As can be seen in Fig. 2.9, there is a distinction betw een a
communicative action event (or a message) and a non-communica tive action
event. Also, AOR distinguishes between action events and non-ac tion events.
The ﬁgure shows in addition that a commitment/claim is usually followed
by the action event that fulﬁlls that commitment (or satisﬁes t hat claim).
An external model may comprise one or more of the following diag rams:
•Agent Diagrams (ADs), depicting the agent types of the domain, c er-
tain relevant object types, and the relationship among them. An AD
is similar to a UML class diagram, but it also contains the domain’ s
artiﬁcial, human and institutional agents.
•Interaction Frame Diagrams (IFDs), depicting the action eve nt types
and commitment/claim types that determine the possible inter actions
between two agent types (or instances).
68 Theoretical Framework
•Interaction Sequence Diagrams (ISDs), showing prototypical instances
of interaction processes.
•Interaction Pattern Diagrams (IPDs), focusing on general int eraction
patterns expressed by means of a set of reaction rules deﬁning an
interaction process type. Reaction rules are the chosen compo nent by
AOR to show the agent’s reactive behavior and it can be represen ted
both graphically and textually.
As AUML, AORML is rather a modeling language than a methodology ,
not prescribing a speciﬁc modeling process. Instead, this should b e deﬁned
case by case by the system analyst and designer.
MAS-CommonKADS
The MAS-CommonKADS methodology extends the models deﬁned in C om-
monKADS (Schreiber et. al, 1994), adding techniques from obj ect-oriented
methodologies (OOSE, OMT) and from protocol engineering fo r describing
the agent protocols (SDL, MSC96) (Iglesias et al., 1998).
The methodology starts with a conceptualization activity th at regards
an informal phase for collecting the user requirements and obt aining a ﬁrst
description of the system from the user’s point of view. For this p urpose,
the use cases technique from OOSE is used, and the interactions o f these use
cases are formalized with MSC (Message Sequence Charts). The met hod-
ology deﬁnes the models described below for the analysis and th e design of
the system:
•Agent Model: describes the main characteristics of the agent, i ncluding
reasoning capabilities, skills (sensors/eﬀectors), services, goal s, etc.
•Task Model: identiﬁes the tasks (goals) carried out by agents, an d task
decomposition, using textual templates and diagrams.
•Expertise Model: describes the knowledge needed by the agents to
carry out the tasks.
The Agent-oriented Paradigm 69
•Coordination Model: focuses on the conversations between age nts,
that is, their interactions, protocols and required capabili ties.
•Organization Model: models the organization in which the mu lti-agent
system is going to be introduced and the organization of the age nt
society.
•Communication Model: details the human-software agent inte ractions,
and the human factor for developing these user interfaces.
•Design Model: collects the previous models and is subdivided i nto
three sub models: application design: composition and decomposi -
tion of the agents of the analysis according to pragmatic crit eria and
selection of the most suitable agent architecture for each agen t; archi-
tecture design: designing of the relevant aspects of the agent n etwork;
and platform design: selection of the agent development platf orm for
each agent architecture.
This methodology has been successfully applied in several resear ch proj-
ects in diﬀerent ﬁelds, as intelligent network management, a nd the develop-
ment of hybrid systems with multi-agent systems.
Comparing the Presented Methodologies
The methodologies described have diﬀerent proposals for mode ling an agent
and a multi-agent system. However, they do have things in common . All of
them, in a way or another, attempt to model an agent as an auton omous
entity, and also address the interaction between this agent an d the others
in the agent society. Table 2.2 provides a comparative scheme a mong all
described approaches, presenting the concepts each of them mod el in each
development activity.
AUML, AORML and MessageUML are more easily adaptable in an in-
dustrial setting, since they extends UML, an already accepted sta ndard in
industrial environments. In a sense, these approaches extend obj ect-oriented
modeling techniques to model agents. This can be justiﬁed for a number
70 Theoretical Framework
of reasons, for example, the fact that the object-oriented pro gramming lan-
guages have been considered a natural framework for agent’s i mplementation
(Iglesias et al., 1999). On the other hand, as agents and objec ts are not the
same thing, this can be a risky approach (Iglesias et al., 1999) ( Wooldridge
and Ciancarini, 2001). From these three approaches, only Messag eUML pro-
vides methodological guidelines, the others limiting themse lves on providing
a modeling notation. AUML has been the choice of FIPA3, the strongest
standard body in the agent’s community. Most eﬀorts regarding AUML
have been concentrated on expressing diﬀerent kinds of coordi nation pro-
tocols. On the other hand, this methodology lacks support for i nformation
modeling, and more sophisticated behavior and interaction mo deling mech-
anisms. Such tools are oﬀered in AORML, which also oﬀers the possib ility
of combining objects and agents. This seems to be very interesti ng, since
not all entities in a system are active, thus being more adequat ely mod-
eled as agents. Other than AORML and Prometheus, which mention the
combination of agents and objects, Tropos and MessageUML allows the dif-
ferentiation of passive and active entities, introducing the c oncept of resource
to represent the former, while agent models the latter.
Gaia is also inspired in object-oriented analysis and design (in FUSION,
to be more speciﬁc) (Wooldridge and Ciancarini, 2001). No exam ple of
successful experience using this methodology has been advertise d until this
moment. In addition to that, although Gaia claims to oﬀer a de sign method-
ology, this is still a high-level design. Several steps are nece ssary to get the
design to the point of actually being implemented. For this de tailed de-
sign, another notation (often UML) is usually needed. Extendin g Gaia,
ROADMAP presents some special features to model open systems, allowi ng
the structure of the system to change at runtime. This capabilit y is exclusive
to ROADMAP, lacking in all other approaches here described.
Other methodologies have been developed with particular ty pes of system
in mind. Prometheus, for instance, is particularly suitable fo r BDI agents,
i.e. agents are modeled based on their beliefs, desires and inte ntions. OperA,
on the other hand, presents a suitable approach to accommodate agents
3http://www.ﬁpa.org
Building Blocks 71
designed by several parties. This tends to become more and more c ommon
with the developments in the SemanticWeb (Davies et al., 200 3b), which
envisions an Internet populated with agents which can be used i ndividually
or in combination to perform a variety of functions to the user .
While ROADMAP and Prometheus claim to support requirements spec -
iﬁcation, Tropos is the methodology that more consistently sup ports this
activity. The ﬁrst two approaches limit themselves at describi ng use case
scenarios, while Tropos allows the analyst to systematically go f rom an or-
ganizational model to the elicitation of requirements for a system to support
this organization.
Two of the presented approaches provide support to the deﬁniti on of
some kind of contract between the agents, namely OperA, with its norma-
tive structure, and AORML, with the use of commitments and clai ms to
regulate agent’s interaction. While a dependency in Tropos deﬁne some
kind of commitment between two agents, this construct provide s more lim-
ited support to contracts, as it only appoints the existence of c ommitments,
rather than enforcing them at design time.
The MAS-Common KADS methodology, rather than being inspired by
object-orientation, is closer to the knowledge engineering methodologies
(Iglesias et al., 1999), and introduce a bigger number of deta ils in the sys-
tem’s modeling. Although these methodologies might be adequa te for mod-
eling reasoning agents, it might add unnecessary complexity for the case of
more general applications.
2.5 Building Blocks for Constructivist
Knowledge Management
In this thesis, we claim that KM can be more eﬀectively supported if viewed
through a Constructivist perspective. Constructivism explains how individ-
uals build knowledge in a natural and informal way. The Constr uctivist
paradigm is often confused with anarchism and disorder (Mahone y, 2004).
However, it is important to note that emphasizing individual a utonomy and
72 Theoretical FrameworkMethodology Development Activities
Early Requirements Late Requirements Architectural Design Detailed Design
Gaia - Roles and interac-tions Agents, services andacquaintances -
ROADMAP - Functionalities,environment model(zones, perceptsand actions); knowl-edge, roles andinteractions Agents, services andacquaintances Interactions in moredetails
OperA - Organizationalmodel (roles, co-ordination models,norms, ontologies,interaction scripts) Social model(agents, social con-tracts), interactionModel (agents,interaction scenes) -
Tropos Organizationalactors, goals,softgoals, tasks,resources, depen-dencies Organizationalactors (includingsystems), goals,softgoals, tasks,resources, depen-dencies Sub-actors detailingsystem architecture Capabilities and in-teractions modeledwith AUML
Prometheus - Actions, perceptsand functionalities Agents and assign-ment of function-alities to agents,events and messages(interaction) Capabilities, plans
Building Blocks 73Methodology Development Activities
Early Requirements Late Requirements Architectural Design Detailed Design
AUML - - - Activities and inter-action
Message/UML - Domain concepts,organization, roles,agents, resources Roles, agents, re-sources, tasks, inter-action goals Roles, agents, re-sources, tasks, inter-action goals
AORML - Agents, objects andrelations Agents, objects andrelations Interactions and in-ternal behavior
MAS-CommonKADS - Functionalities,agents, tasks,events, interaction,knowledge (domain,agent, and environ-ment), organizationmodel and societyof agents Network facilities(e.g.: yellow/whitepages, agent nameservice etc.),knowledge facilities(e.g.: ontologyservers), coordi-nation facilities(e.g. coordinationprotocols), agentarchitecture Selection of softwareplatform
Table 2.2: Comparing methodologies
74 Theoretical Framework
active participation in knowledge creation does not imply t hat no planning
should be required, and that knowledge inadvertently emerge s. In fact, this
section is dedicated to understanding which would be the condi tions for
knowledge creation, according to the presented Constructivi st theories.
The KM theories presented in section 2.2.4 have been selected du e to the
congruence between their principles and the Constructivist v iews (even if this
has mostly not been consciously noted by these KM theories’ propon ents).
Here, we would like to discuss the most signiﬁcant contributions o f these KM
theories in light of the presented Constructivist theories (re fer to section 2.3).
This discussion will grant us with the means to draw the requirem ents for
the development of what we will call from now on Constructivist KM.
A clear connection between the described KM theories and Const ruc-
tivism is given by the fact that all these theories are highly ba sed on the
active and autonomous engagement of the knowledge holder on the process
of acquiring and sharing knowledge. Each person has a particul ar way of
expressing him/herself, sharing what they know, as well as seekin g for new
knowledge and abilities. If individuals are restrained, they may feel uneasy
about sharing knowledge with others. While contributing to mo tivation,
autonomy may also lead to unexpected situations of knowledge c reation and
innovation. Individuals should then be impelled to share inste ad of retain
knowledge. Organizations should actively create opportuni ties for sharing
and collaboration. But employees should also be allowed to ﬁnd their own
ways to exchange knowledge while engaged at work, so as to avoi d sharing to
become bureaucratic or as an obligation. In this sense, despite of the orga-
nizational power structure, knowledge exchange should be non-hierarchical ,
i.e. sharing processes should not be constraint by organizationa l roles or
hierarchical positions. Instead, all organizational members should be rec-
ognized as possible knowledge contributors, each one being val ued for their
competence and expertise in their particular ﬁelds of action .
All theories presented here value the role of social interaction to the con-
struction of knowledge, recalling the social cognitive theor y of Vygotsky.
Humans are social beings, and knowledge only emerges as a result o f their
interaction. In the Knowledge Spiral, social interaction is paramount for
Building Blocks 75
knowledge sharing, especially for the processes of socializatio n and external-
ization, which respectively lead to the communication of tac it and explicit
knowledge. Situated Learning makes direct reference to Vygo tsky’s theory,
especially when exploring the beneﬁts of apprenticeship, whi ch leads a new-
comer to learn by collaborating with an expert, being direct ly engaged in
his practices. What makes CoPs so desirable for KM is exactly the types of
dynamic environment it creates on the basis of its members int eraction when
involved in the community’s practices. Through these interac tions, mean-
ings are negotiated and the community’s practices are themse lves constantly
reshaped. Finally, DKM states that while locally managing the ir knowledge
assets, knowledge holders should get involved in a rich exchange of knowl-
edge, in a way that their local interpretations are dynamica lly negotiated.
Piaget’s theory emphasizes the importance of a perturbation in the in-
dividual’s cognitive system as the trigger for learning. This has also been
noted by Nonaka and Takeuchi, who indicate that ﬂuctuation an d creative
chaos are important characteristics of an environment that su pports knowl-
edge creation. In a sense, this is also implicitly included in Pa ulo Freire’s
Pedagogy of Question. This theory states that a question is the i nitiator of
dynamic processes comprehending discussion and reﬂection in act ion, which
are relevant for the generation of innovation.
The Constructionism proposed by Papert has a lot in common with t he
Knowledge Spiral, since both focus on the knowledge external ization and
internalization cycles that occur when people interact, ul timately leading to
knowledge creation and learning. In addition to that, Paper t has emphasized
the importance of an external and socially meaningful artifact for knowledge
creation. This artifact is part of what Wenger calls shared re pertoire, in the
context of Communities of Practice, i.e. a resource that is cr eated as a
result of shared practice, or used in action by community member s, and
which is meaningful in this social environment. Knowledge ar tifacts are also
important in the context of DKM, in which knowledge exchange is attributed
to the constant sharing of locally managed knowledge artifact s.
Finally, Paulo Freire argues about the need to provide contextualized envi-
ronments for the proper emergence of knowledge. In other words, he clai ms
76 Theoretical Framework
that learning is much more productive in environments that a re connected to
the learner’s reality. In this sense, Situated Learning and kn owledge sharing
in CoPs aﬃrm the same, as they propose that people learn by being in-
volved in real practices (i.e. learning by doing), instead of acquiring a body
of abstract knowledge that can supposedly be transported and app lied in
posterior situations.
Summarizing the above discussion, Fig. 2.10 presents the buildi ng blocks
for Constructivist KM, i.e. the conditions for it to emerge.
perturbation autonomy social interaction 
physical
meaningful
artifacts contextnon-hierarchical
knowledge sharing 
Figure 2.10: The building blocks for Constructivist Knowledg e Management
In summary, Constructivist KM claims that more attention should be
given to the knowledge holders. They should be the focus when pr oposing
a speciﬁc process or system to support KM. This does not mean that or ga-
nizational objectives will be forgotten. Rather, organiza tional global goals
(or what Nonaka and Takeuchi call organizational intention) and individual
goals of the organization’s members should both be considered . Construc-
tivist theories explain the processes that lead to the emergenc e of knowledge.
Supporting these processes is the key to the generation of new kn owledge
and innovation.
Having established this work’s philosophical basis, it is importa nt to un-
derstand how to take Constructivist KM into practice. Construct ivism has
been mentioned in connection to computer science in diﬀerent ways. For ex-
ample, it has been used as a supporting theoretical framework f or work on
Computer Supported Collaborative Learning (CSCL). In an in novative ap-
proach to Artiﬁcial Intelligence, Drescher (1991) has built a computational
learning and concept-building mechanism referred to as schem a mechanism
Agent-oriented Constructivist KM 77
inspired in Piaget’s constructivist theory. Our work is more cl osely related
to the former than to the latter, as constructivism here is also se en as a theo-
retical framework to guide the development of KM practices a nd information
systems.
More speciﬁcally, we propose that, aiming at understanding the se pro-
cesses and verifying if the conditions for Constructivist KM hol d, an analysis
of the organizational setting must take place. In the analysis, se veral knowl-
edge holders from diﬀerent levels within the organization st ructure should
be consulted, so that a global understanding can be built. The an alysis
should be able to negotiate the global strategies of the organi zation and the
individual goals of the knowledge holders. As a result of the org anization
analysis, an internal process may be redesigned, or a new KM system m ay
be developed, following the principles of Constructivist KM. In this way,
the proposed solution is prone to ﬁnd less resistance in the organi zational
setting, targeting some of the challenges described in section 2 .2.3
2.6 Towards Agent-oriented Constructivist
Knowledge Management
In this work, we claim agents are suitable abstractions for mod eling KM do-
mains and systems. Some reasons for this can be found in early secti on 2.4.
To be more precise, in KM settings, agents may represent not only a rtiﬁcial
beings, but also the human users and the organizations involved in a given
scenario. Agents’ inherent characteristics (such as autonomy, r eactiveness,
proactiveness and social ability) and cognitive concepts (e. g. intentions, be-
liefs, commitments/claims) enable the explicit capture of imp ortant aspects
of the organizational setting. For instance, they allow reason ing about or-
ganizational members’ beliefs and perceptions, their intera ctions, and the
commitments they establish with each other on the organizatio n’s behalf.
The understanding about these aspects help the analyst to create a clear
picture of the organizational culture, besides understandin g how knowledge
ﬂows within the organization. As a result, besides inserting new technology,
78 Theoretical Framework
the business processes applied in the organization may be change d in order
to enhance these knowledge ﬂows. In addition to that, if a techn ological
solution is needed, agents enable legacy systems to be considere d in the
analysis, allowing the new solution to be based on approaches of i ntegra-
tion of old and new components. This may lead to more satisfactio n to end
users, who are already familiar with the interface and methods applied in
the systems in use. This is compliant with the idea of Constructiv ist KM,
which emphasizes the need to provide more attention to knowle dge holders,
while at the same time, trying to consider organizational gene ral goals and
strategies when proposing a KM solution.
Agents are specially powerful to assist in the capture and reasonin g of the
identiﬁed Constructivist KM principles. For example, as expla ined in sec-
tion 2.4.1, autonomy and social ability are inherent charact eristics of agents.
By exploring them, we are able to identify how much autonomy is granted
to the agents of a KM setting, and how well they collaborate and interact
(refer to social interaction building block). Examining the structure of the
agent society, understanding the relations between its popul ating agents,
gives us the possibility to grasp if knowledge ﬂows in a hierarch ic way or not
within this society (verifying the compliance to the non-hierarchic knowledge
sharing building block). While pursuing their goals, agents apply inf orma-
tion resources. These passive system entities are captured by constr ucts
of most of the described engineering approaches, being modeled as objects,
resources or permitted information items. The analysis of the i nformation
resources created, maintained and exchanged between agents enables the
identiﬁcation of the physical meaningful artifacts that mediates knowledge
creation and sharing. Finally, by focusing on the characterist ics of the envi-
ronment where agents inhabit, we are able to analyze whether or not such
environment provides context for knowledge sharing, and to which extent
constructive perturbations are explored.
The lack of a systematic agent-oriented methodology has been m entioned
as one of the biggest obstacles for the large-scale adoption of t he agent
paradigm Jennings et al. (1998) Parunak (2000). Although muc h work tar-
geted this topic in the past few years, there is still room for deb ate in the
Agent-oriented Constructivist KM 79
area. Nevertheless, it seems that this discussion has reached a poin t of ma-
turity. If before the focus was the proposal of diﬀerent model ing abstractions
and methods, today the attention has shifted to comparing meth odologies
in order to understand for which application types each appro ach is more
suitable (Juan et al., 2004) (Dam and Winikoﬀ, 2003) (Sabas et al., 2002) or
for combining diﬀerent approaches (Henderson-Sellers, 2005) (Bernon et al.,
2004) (Juan et al., 2003) in order to maximize their advantag es and minimize
their drawbacks. Perhaps, at some point, this debate will culmi nate with the
proposal of a standard approach, following the paths of the obj ect-oriented
community that has proposed UML as a standard for object-orient ed anal-
ysis and design.
This is also the approach taken in this thesis. Our objective is t o com-
bine existing work on agent-oriented software engineering to tailor a suitable
methodology for Constructivist KM settings. In our view, import ant char-
acteristics of an adequate methodology are the following:
•supporting crucial engineering activities, allowing the dev eloper to ﬁrst
understand the analyzed environment and its inherent proble ms, and
then consistently lead the developer to the design of the solutio n;
•oﬀering a suitable set of concepts and constructs for the target ed sys-
tem development activity;
•providing a visual language besides textual descriptions, thus facilitat-
ing the communication between stakeholders and analysts, and a mong
analysts and system designers;
•being relatively accessible and not requiring too much overhe ad in the
sense of extra work from the part of the analyst in understanding a nd
using the given language and method.
The ﬁrst item above regards the particular development activ ities and
life cycle supported by the methodology. To guarantee that a c lear under-
standing is achieved before a solution is proposed, our methodo logy should
start with a detailed analysis of the domain, leading to the eli citation of
80 Theoretical Framework
system and/or process requirements. And then, in case an informati on sys-
tem is proposed, the methodology should cover architectural a nd detailed
design activities, enabling the designer to achieve the ﬁnal sta ges of system
implementation.
With respect to the second issue above, it is important to ﬁnd, amo ng
the existing approaches, the ones that support all entities of t he domain,
namely organizations, organizational members, communities, systems, and
other resources. Besides, the applied notation should be able to sy stem-
atically represent relations between these entities, model th eir interactions,
and design their internal behavior. In addition to that, we sho uld focus on
the right choice of agent mentalistic characteristics to be ap plied in the dif-
ferent activities of the development cycle. Concepts such as agent’s beliefs ,
goals,commitments andplans are vastly discussed in literature and diﬀer-
ent models have been proposed (Rao and Georgeﬀ, 1991) (Wooldr idge and
Ciancarini, 2001). However, it is hard to know how to eﬀective ly consider
these concepts while analyzing a domain and designing a system. P articu-
larly, it is diﬃcult to materialize these constructs as concre te elements of an
information system.
The discussion about adequate concepts, models, and life cycles i s re-
sumed in the next chapter, where we propose and describe our meth odology.
We speciﬁcally explore the combination of two agent-oriente d approaches,
complying with the third and forth items above. The resulting notation pro-
vides the user with a comprehensive set of diagrams and analysis m ethods
that are visually rich, thus facilitating reasoning and commu nication about
the created models. Furthermore, the two combined approache s are well-
known in the agent-oriented community. This makes the eﬀort of analysts
and designers adopting our methodology much diminished, in co mparison
with cases in which a total new set of concepts, constructs and met hods are
adopted and need to be learned from scratch.
Chapter 3
The ARknowD Methodology
“Our brains are essentially
model-making machines.”
Vilayanur S. Ramachandran
Having seen in the previous chapter, what are the characteristi cs of a
KM environment and what are their most pressing needs, the next ste p is
proposing an approach that taking such characteristics into ac count, attend
the main highlighted needs. For this purpose, we introduce a me thodology
we name Agent-oriented Recipe for Knowledge Management Syste m Devel-
opment (ARKnowD). ARKnowD is aimed at analyzing the current sta te of
an organization, trying to identify the previously deﬁned Co nstructivist KM
building blocks. As we have seen, the degree to which the organiz ational
setting meets these building blocks directly conditions KM sup port. We
believe that Constructivist KM especially leads to a higher deg ree of ac-
ceptance level of organizational members towards informat ion systems and
practices adopted by the organization.
In this chapter, we start by introducing the main assumptions un derlying
ARKnowD (chapter 3.1), one of which is the applicability of ex isting agent-
oriented methodologies that in combination, may meet the de mands of our
approach. Then, we describe in depth the scenarios of applicab ility of our
methodology (3.2) and its underlying activities and life cy cle (3.3). Next,
we discuss existing work using agent’s cognitive concepts (3.4) and based on
81
82 The ARknowD Methodology
such concepts, develop an ontology comprehending all ARKnowD’ s modeling
constructs (3.5). This ontology is then used as a reference mod el to guide the
evaluation of the two notations applied in ARKnowD, making th e necessary
adjustment to facilitate their merge into one language (3.6) . Moreover, in
order to combine these two existing agent-oriented approache s, we provide
an MDA-inspired transformation method, described in detail in se ction 3.7.
Following, section 3.8 focuses on a working example that serves as a context
for some important methodological guidelines that should aid the analyst
and designer to undertake the task of building an organization al model using
ARKnowD. Next, we provide a discussion on automated support (3.9) w hich
is succeeded by the description of a few approaches having aﬃni ty with ours
(3.10). Section 3.11 ﬁnally concludes this chapter.
3.1 Introduction
As discussed in the previous chapter, KM has lately become the foc us of
much attention and great investments within organization set tings. This
stems from a general realization that the biggest assets owned by businesses
and corporations lie within the minds of the people who consti tute them, or
work on their behalf. As a consequence, knowledge is usually emb edded in
the organization’s routines and products. The understanding of how knowl-
edge ﬂows within an organization is paramount for supporting KM. This
understanding enables knowledge to be elicited, besides prov iding insights
on how to support KM in a speciﬁc organizational scenario.
As argued in section 2.6, agents are suitable entities to model h uman
and artiﬁcial organizations due to their autonomous, reacti ve and proactive
nature, besides other cognitive characteristics. This can supp ort domain
analysts and system designers in understanding the current organ izational
setting before proposing the development or adoption of parti cular solutions.
However, having an appropriate abstraction is not enough for g uaranteeing
the development of adequate solutions for the organization. For that, a
consistent engineering methodology is needed to transform the se abstract
Introduction 83
notions in useful tools to enable problem solving in real scenar ios.
In this thesis, we propose a methodology named Agent-oriented Re cipe
for Knowledge Management System Development (ARKnowD), prel iminar-
ily introduced in (Guizzardi et al., 2005). ARKnowD is an inte grated agent-
oriented methodology to develop KM solutions, which represent s as agents
all humans, organizations and information systems of the domai n. This
enables the analyst to understand their relations and interac tions, guiding
him/her on ﬁnding appropriate solutions to target the idiosyn crasies of that
particular environment. Note that our conceptualization of ‘system’ is gen-
eral, including but not being restricted to that of informati on system. In
this work, system is deﬁned as a general set of interacting entit ies (Bunge,
1979), thus comprehending artiﬁcial and non-artiﬁcial ent ities (such as hu-
mans, organizations and organizational units). This opens th e possibility to
consider several outcomes resulting from the application of ou r methodol-
ogy, such as: changing organizational structures, modifying pr ocesses, and
adopting technological or non-technological tools.
Beneﬁts as a result of the application of ARKnowD may be attribu ted to
our choice of using the proper agent cognitive characteristic s in the diﬀerent
development activities. Concepts such as agent’s beliefs, goa ls, and plans
are vastly discussed in literature and diﬀerent models have been proposed.
However, there is a gap between knowing their deﬁnition and ac tually ap-
plying them eﬀectively in practice. In this respect, our work attempts to
provide an answer to the following questions: Should these conce pts be con-
sidered all at once in system development? If not, when are goals suitable,
and when should the developer start considering agent’s beliefs , for example?
And, perhaps, the most frequent question of all: How can these conce pts
be materialized in practical elements of an information syste m? Although
there is no ﬁnal answer for such questions, we aim at contributing to clarify
these important issues.
Another strong characteristic of ARKnowD is the adoption of visua l mod-
eling for supporting requirements analysis and design. A model here can be
deﬁned as an abstraction of the reality. It usually focuses on a p articular per-
spective and thus, on speciﬁc concepts that are important for a g iven model-
84 The ARknowD Methodology
ing activity. Visual modeling supports reasoning both about the domain and
the proposed solution. More speciﬁcally, visual models provide analysts and
designers with means for visualizing, specifying and communic ating about
elements of the domain and the solution. Besides, visual modelin g allows
groups of developers to work in physically disperse environmen ts, aiding the
integration of the diﬀerent components of an information syst em, developed
with basis on models made with the same notation. Finally, comm unication
with the stakeholders is also facilitated by the use of visual mod els. In this
sense, we emphasize the appropriateness of agent-oriented conc epts, such as
goals, plans, beliefs and commitments. These concepts are much c loser to
the reality of common stakeholders than technology-oriente d terminology,
such as tables, SQL query, middleware and threads.
Given the current stage of research on the agent-oriented para digm, and
the vast availability of methods and languages for agent-ori ented analysis
and design, the methodology presented here is built over existi ng work. One
of the principles of our methodology is granting analysts and designers with
freedom to select the appropriate tools from a vast ‘library’ o f methods and
languages, depending on the speciﬁc case at hand. It is our belie f that not
one method possesses all the right properties. Instead, these prope rties can
often be attained by combining diﬀerent approaches. This vie w is compliant
with the method engineering approach adopted in the OPEN met amodel
(Henderson-Sellers, 2005), which prescribes the reuse of fragme nts of diﬀer-
ent agent-oriented methods according to a given situation. F igure 3.1 illus-
trates diﬀerent possibilities of combining existing agent-or iented languages
and methodologies, already described in section 2.4.2.
Fig. 3.1 depicts several options one could select when develop ing a sys-
tem. For instance, analysts that are familiar with the Gaia met hodology
(Wooldridge et al., 2000) could start with the deﬁnition of ro les and inter-
actions and, then, reﬁne these models respectively into OperA’ s roles and
scenes (Dignum, 2004a) (path 1). This would result in a more det ailed and
formalized analysis model. Another possibility is given by the c ombination
of Tropos (Bresciani et al., 2004) and OperA (path 2). As viewed in table
2.2, Tropos is the approach that gives more attention to the r equirements
Introduction 85
Gaia OperA 
Tropos 
AORML roles 
interactions roles 
scenes 1coordination 
models
3 Actors, goals, 
dependencies... 3
Agents, object, 
relations, 
commitments 22
1
2
3
34
4
ROADMAP roles and 
zones 
interactions 5
5Interactions, 
internal behavior
Figure 3.1: Combining diﬀerent agent-oriented approaches
analysis activity, which can be highly beneﬁcial for KM settin gs. Combin-
ing Tropos and OperA allows the analyst to take advantage of Tr opos’s
requirements analysis propensity at the same time as generatin g a formal-
ized analysis model. However, if a formalized model is not nece ssary, Tropos
can be combined with AORML (Wagner, 2003) (paths 3 and 4), gen erating
a methodology that covers all activities of system developmen t, coming from
early requirements analysis to detailed system design (this last activity is not
covered by OperA). Following path 3, the analyst still applies o ne of OperA’s
resources, namely the coordination models, to guide them on the creation of
a suitable system architecture (Dignum, 2004a), before using AO RML for
detailed design. Path 4 is indicated for cases where the designe r uses his
previous experience for generating the solution’s architec ture, so AORML
can be applied directly after Tropos. Finally, in path 5, ROADM AP (Juan
et al., 2002) and AORML are combined. ROADMAP is speciﬁcally tai -
lored to enable the development of open systems. This methodolo gy usually
applies AUML (Odell et al., 2000) for detailed design. Here, how ever, we
suggest AORML as an alternative design language.
In this work, we explore the possibility given by path 4, i.e. th e combina-
86 The ARknowD Methodology
tion of Tropos and AORML. Both approaches use the notion of age nt and
related cognitive concepts in all software development acti vities, from early
requirements analysis down to the actual implementation. How ever, as an
extension of UML, AORML is rather a modeling language than a met hod-
ology, though some methodological directions on how to use AOR ML for
software development have already been identiﬁed in (Wagner , 2003).
Another diﬀerence is given by the diﬀerent strength of each of t he ap-
proaches for the diﬀerent system development activities. Trop os gives a
crucial role to the early requirements analysis activity tha t precedes the pre-
scriptive requirements speciﬁcation of the system-to-be. Altho ugh AORML
has been proposed for domain modeling (Guizzardi et al., 2004 a), it does not
provide speciﬁc diagrams for requirement’s speciﬁcation. Ev en if traditional
UML use cases diagram may be applied, the Tropos’s notation is muc h more
rich and appropriate for agent-oriented modeling. On the ot her hand, con-
trarily to AORML, Tropos does not cover detailed design, adop ting AUML
for supporting this activity.
The adoption of AUML has its drawbacks. For instance, AUML does no t
provide a rich model of the domain and system entities such as AOR ML
(information modeling). Using the AOR agent diagram, the desig ner is able
to represent all agents and objects considered in the domain, a long with
their properties. In AUML, information modeling does not rece ive much
attention, and traditional class diagrams are often used, alt hough they are
not made for agent-oriented modeling. The result is that only agents are
allowed (no objects are considered), or else the same construct i s used to
represent both agents and objects. The latter leads to construc t overload,
which may seriously undermine the understanding of the resultin g models
(Guizzardi, 2005). Another advantage of using AORML is the ava ilability of
three diﬀerent diagrams of modeling interactions, compared to one oﬀered by
AUML. This includes the AOR Interaction Pattern Diagram, whi ch models
the internal reactive behavior of an agent while interactin g with others.
The diﬀerences between Tropos and AORML suggest that these two
approaches can be rather complementary than competing. The concepts
adopted in Tropos can be consistently mapped to AORML construct s, al-
Scenarios of Applicability 87
lowing them to be carried out farther from the requirement an alysis to the
design activity. Section 3.7 presents more details on the tran sformation
between these two notations.
We believe the combination Tropos/AORML is proﬁtable in both di-
rections. Speciﬁcally in respect to organizational or KM Syste ms model-
ing, Tropos may beneﬁt from the following strengths of AORML: 1) the
fact that ‘mentalistic’ (or cognitive) concepts of agents, suc h as beliefs and
commitments, are explicitly considered in system design supports the an-
alyst/designer to reason about and to model the behavior of agen ts, both
internally and in interaction with other agents of the system; 2) although
norms and contracts are not directly supported by AORML, it pr ovides de-
ontic modeling constructs such as commitments and claims, whic h form the
basis for the establishment of such norms and contracts; 3) it capt ures the
behavior of agents with the help of rules. Besides these strength s, since
AORML is an extension of UML, preserving its principles and conc epts, it
is an accessible language, and it allows the use of UML constructs w henever
an extension is not provided, thus providing a comprehensive se t of tools
for the analyst/designer. On the other hand, the explicit use of Tropos’s
goals and plans provide a rich conceptual framework for mode ling the in-
tentional dimension of the organization. This includes a pre liminary view of
how user’s interact, without however adding unnecessary proto col details in
the early stages of requirements analysis. Such concepts of goa ls and plans
are missing in AORML.
3.2 Scenarios of Applicability
We envision three possible application scenarios for ARKnowD, il lustrated
in Figure 3.2.
a) Proposing changes in the organizational structure to accom modate/en-
hance KM practices.
b) Modifying business processes to accommodate/enhance KM prac tices.
88 The ARknowD Methodology
(A) (B) (C)
Figure 3.2: Three application scenarios for ARKnowD
c) Adopting an enabling tool, technological or not, to support KM. In
case an information system is needed, there are three possibiliti es:
•Developing a KM System based on legacy systems currently in
use.
•Developing a KM System from scratch.
•Adapting an existing KM System (out of the shelve) in a cur-
rent business process, making the necessary processual changes
accordingly.
Technology has been cited as only one part of the solution to en able KM
(Orlikowski, 1992b). At times, enhancing the knowledge ﬂow wi thin the
organization does not require the adoption of any new tool, b ut rather mod-
ifying the structure and the business processes underlying the or ganization.
Organizational reengineering has often been mentioned as a solution to
create more conducive environments for knowledge sharing (O rlikowski et al.,
1995) (Wiig, 1994). This can be achieved by creating or extin guishing or-
ganizational units or departments. As an interesting example, we cite the
case of the Dutch insurance company Achmea reported in (Dignum a nd van
Eeden, 2003), which created a new division (the KM division) to propose
projects and take care of all matters related to KM. Other case s include
periodic rotation of personnel, which may enhance the ﬂow of k nowledge
from one department to the other. New knowledge sharing opport unities
and synergy accrue from such personnel rotation, as recognized by Nonaka
Scenarios of Applicability 89
and Takeuchi (1995) and Perini et al. (2004).
Several are the cases reporting KM enhancements that emerge a s a result
of changes in process. Nonaka and Takeuchi (1995) report a case of this sort,
involving a team of technicians from Matsushita that were invo lved in the
construction of the ﬁrst fully automatic electronic bread-ma king machine
for home use, released in 1987. After a few frustrating experienc es, espe-
cially to automate the process of kneading the dough, Matsushit a achieved
encouraging results after an internship that a senior develope r made with a
baker. In observing and participating in the activities of ma king bread, he
realized the right way a dough should be worked on, posteriorly embedding
a mechanism in the machine that imitated the movements of the b aker. In
this case, no new department was created and no new tool was ado pted.
Instead, the routine of an employee (the software developer) w as radically
changed, enabling him to capture tacit knowledge embedded i n the practices
of a specialist, much as advocated by Lave et al. (1991) (refer t o section 2.2.4
for a full discussion on this).
An eﬀective knowledge ﬂow requires the right set of tools or inst ruments.
These tools can be based on information technology or not. In som e situa-
tions, a simple ﬂip-chart may be required to register new ideas i n a brain-
storming session, allowing the exploration of analogies and met aphors, advo-
cated as drivers for tacit knowledge sharing (Nonaka and Takeu chi, 1995).
For other purposes, information systems as the ones described in se ction
2.2.2 may be needed to enable and enhance the capture, structu ring and
dissemination of knowledge throughout the organization. Fin ally, a combi-
nation of physical tools and information systems’ capabilities may result in
the creation of novel supporting instruments, following the tr end of ubiqui-
tous computing (Weiser, 1994).
ARKnowD supports three distinct situations regarding the adopt ion of
information systems. The system may be developed from scratch. For that,
ARKnowD analyzes how the new system ﬁts in relation to the member s of
the organization, and how it changes the current processes. Fol lowing, the
inner-structure of the system is detailed and developed. Howeve r, organi-
zations normally have some legacy system in place that although obsolete,
90 The ARknowD Methodology
oﬀer a few functionalities that are essential to the organizat ion. Agents have
been cited as especially suited for enabling development of ne w systems by
integrating legacy systems (Jennings et al., 1998) (Wooldrid ge, 2002). In
this case, ARKnowD includes legacy systems as agents in the analy sis of the
organizational settings. The interaction of these systems with t he human
agents of the organization is detailed and ﬁnally, new funct ionalities may be
proposed. This can be done either by wrapper-agents that add n ew levels of
functionality over the legacy systems (Wooldridge, 2002), or by new agents
that simply interact with them as well as with human agents. Fin ally, there
is a third possibility of information system adoption. This refe rs to the case
when an organization wants to adopt a speciﬁc system that is alre ady a
ﬁnished product. This is more common than one might imagine, a s a result
of hype or market pressure regarding a speciﬁc kind of technolog y. Here,
ARKnowD supports the insertion of the new information system with in the
organizational setting, by ﬁtting it into organizational pr ocesses, making
eventual necessary adjustments to better integrate the new solu tions within
organizational practices.
3.3 Activities and Lifecycle
The proposed methodology comprehends the following activit ies:
1.Requirements elicitation. Requirements elicitation is a basic activity
of all software engineering processes. Before starting to build a new infor-
mation system, it is necessary to grasp what stakeholders (i.e. fut ure users
of the systems and other inﬂuenced parties) really need. This is exactly
the main aim of Requirements elicitation (Nuseibeh and Easterb rook, 2000)
(Goguen and Linde, 1993). In ARknowD, however, this activity takes a
more general notion, since the organization may not need a new information
system, but solely a structural or process change. Thus, requireme nts here
refer to any need for change in terms of organizational struct ure, process
and tools, reﬂecting the scenarios described in section 3.2.
In any case, one thing is certain: the way people work within an organiza-
Activities and Lifecycle 91
tion is bound to change. These changes may bring about positive outcomes
in respect of knowledge sharing. Changes generate perturbati ons in the or-
ganizational environment, which as claimed by Constructivi st KM, naturally
lead to learning and performance enhancement (for an in dept h discussion
about this topic, refer to the previous chapter, sections 2.2 .4, 2.3.1 and 2.5).
However, there is no point in making unecessary changes, or even h amper-
ing current best practices within the organization. Thus the importance of
gathering the right set of requirements before jumping into t he development
of a new solution.
As the term elicitation suggests, requirements are not simply out there,
waiting to be collected (Nuseibeh and Easterbrook, 2000). The a ctivity of
requirements elicitation is, thus, ill-structured and comple x. Several tech-
niques have been propose to support this activity, as described in (Goguen
and Linde, 1993) and (Nuseibeh and Easterbrook, 2000). Traditi onal tech-
niques rely on individually answered questionnaires or inter views, while oth-
ers propose special activities to be performed with groups of st akeholders.
Ethnographic techniques have recently gained attention in recognition for
the complexity of requirements elicitation. Ethnomethodo logy usually re-
quires that the analyst is immersed in the organizational setti ng, performing
active observation and trying to understand this setting from t he perspec-
tive of a real member of the organization. ARKnowD does not pre scribe
any speciﬁc technique for requirement elicitation. However, our work rec-
ognizes that observation of people in action, as proposed by et hnographic
techniques, should be combined with interviews and questionna ires, leading
to more consistent requirements.
2.Requirements analysis. Requirements analysis refers to the activity of
modeling and reasoning about organizational requirements. O ur methodol-
ogy models requirements as goals. This view has been largely a cknowledged
by the Requirements Engineering community. Note, for instanc e, that Zave
cited by (Nuseibeh and Easterbrook, 2000) deﬁnes Requirements Engineer-
ing as “the branch of software engineering concerned with real-world goals for
functions of, and constraints on software systems” . This deﬁnition empha-
sizes the importance of viewing the stakeholders’ real goals as motivators
92 The ARknowD Methodology
for choosing a particular solution over another. For a discussion on RE
methodologies that apply goal analysis, refer to (Kavakli and Loucopoulos,
2005).
The adoption of goals is also compliant with KM theories. Accord ing
to the Knowledge Management Spiral (Nonaka and Takeuchi, 199 5) (see
section 2.2.4), for example, one of the main drivers of knowle dge creation
is the organization’s intention, deﬁned as “an organizatio n’s aspiration to
its goals”. Nevertheless, these authors mainly focus on the organ ization
top management’s intention for facilitating KM initiative s. In contrast, we
consider the goals of all stakeholders, trying to understand the relations and
possible discrepancies between their goals. This view is aimed a t providing
autonomy in knowledge sharing, as prescribed by Constructivist KM, and
also emphasized by Dignum (2004a).
ARKnowD particularly supports the analysis regarding the exte nt of the
analyzed setting’s compliance to the Constructivist KM buildi ng blocks ear-
lier deﬁned in section 2.5. In other words, the methodology’s su pported
concepts and techniques allow the analyst to understand:
•how much autonomy is given to each organizational member to share
knowledge the way he/she sees ﬁt;
•if the creation and sharing of knowledge happens in a bureaucr atic
way, obeying hierarchical structures within the organizati on of if it is
rather non-hierarchical and natural, motivating each one to contribute
with his/her share of knowledge despite organizational positio n or ex-
perience;
•how well organizational processes favor social interaction , considered
here as an essential ingredient for the disambiguation of tacit knowl-
edge, and thus for the generation of innovation;
•what kind of meaningful artifacts are exchanged among organizational
members, cross-cutting divisions and communities and in this wa y,
carrying knowledge throughout the organization;
Activities and Lifecycle 93
•how constructive perturbations are generated and coped with within
the organization, triggering the dynamics that motivate em ployees to
constantly self-improve;
•what kind of contexts emerge or are actively planned by the or ganiza-
tion for knowledge creation, integration and sharing.
We claim that the presence of the highlighted characteristics within the
organization’s environment lead to more eﬀective support to KM. Thus, a
deeper understanding of how much the analyzed setting complie s with these
principles gives the analyst the means to assess how well the orga nization
currently supports KM. Consequently, such principles may be use d as guid-
ances, serving as a kind of checklist for the domain analyst. Under standing
the presence or absense of such principles allows limitations in the organi-
zation’s environment to be corrected and appropriate KM solu tions to be
proposed.
Borrowing Tropos’s approach, requirements analysis is divid ed in two sub-
activities, namely early requirements and late requirement s analysis (Bres-
ciani et al., 2004). In early requirements analysis, modeling focuses on un-
derstanding the organization’s and stakeholders’ goals as the y carry out their
work and responsibilities. This activity culminates with an un derstanding
of the rationale behind stakeholders’ needs of a speciﬁc solutio n (in terms of
tools, changes in the organizational structure, or process cha nges). Finally,
in late requirements, we focus on the requirements for the solu tion, being
able to trace them back to the fulﬁllment of the social and indi vidual goals
previously analyzed.
3.Design. The design activity is responsible for providing the solution
in as much detail as to enable it to be developed in practice. A t design
time, we should be able to identify all agents that take part in the structure
of the solution, as well as their relations. Moreover, processes are fully
modeled, making clear the interactions among agents, besides their external
and internal behaviors that should also be explicitated.
In the case of the development of an information system, the desig n can
be viewed as two distinct sub-activities: architectural design anddetailed
94 The ARknowD Methodology
design . As the name suggests, architectural design is concerned with the
architecture of the system under development. At this point, a ll agents of
the system should be identiﬁed, along with their individual goa ls. In ad-
dition, the resources and plans used by the agents to achieve th eir goals
are modeled. Note that the transformation between Tropos and A ORML
happens exactly at this point. Finally, in the detailed desig n, the informa-
tion structure of the system is detailed, along with processes and agent’s
behavior. The ﬁnal result of detailed design should be a system mod el that
can be implemented using a programming language and/or frame work. AR-
KnowD does not commit to a speciﬁc programming infrastructure . Chapter
6 exempliﬁes the detailed design of a system implemented using th e JADE
framework (Java Agent DEvelopment Framework)1.
Figure 3.3 illustrates ARKnowD’s life cycle, summarizing our d iscussion
on the supported activities.
Requirements
Elicitation
Early
Requirements
Analysis
Late
Requirements
AnalysisDesignSolution Design:  solution is
described in details. For
information systems:
Architectural Design
Detailed DesignAnalysis of the Current
Organizational Setting:
human agents goals and
responsibilitiesInteraction with
stakeholders:
interviews
ethnographical methods
Analysis of the Solution
Requirements:  new agents,
goals are delegated and
analyzed
Figure 3.3: ARKnowD’s lifecycle
Note that this chain of activities may be performed several tim es, in an
iterative process. The development of a solution commonly requ ires several
1http://jade.tilab.com/
Activities and Lifecycle 95
cycles, each one performing some or all activities to a certain extent. The
ﬁrst cycles are characterized by the focus on the clariﬁcatio n, negotiation
and agreement of requirements, thus requirements elicitati on and analysis
are iterated several times. Then, the focus slowly shifts to the d evelopment
of the solution, although each design cycle may still require th e elicitation
and further analysis of new requirements. To clarify this poin t, we borrow
from the Rational Unifying Process (RUP) the concept of phases (K ruchten,
2000). RUP divides the development process in four phases, deﬁne d as
follows:
•Inception : targets the speciﬁcation of the vision of the solution and its
business case, as well as the deﬁnition of the scope of the project .
•Elaboration : focuses on planning the necessary activities and required
resources, besides specifying and designing the architecture.
•Construction : aims at building the solution and evolving the vision,
the architecture, and the plans made in the previous phase unt il the
solution is ready for delivery to the targeted community.
•Transition : concerns the adjustment of the solution to the stakehold-
ers. In case the solution is non-technological, it usually invol ves train-
ing and monitoring the stakeholders within their new division , or per-
forming new working processes If an information system is part of the
solution, besides training and monitoring, it also involves de ploying,
supporting and maintaining the system.
Organizational top and/or middle managers are usually respon sible for
the project’s vision (Nonaka and Takeuchi, 1995), elaborated during incep-
tion. However, Constructivist KM emphasizes the importance of i nvolving
all organizational members in this debate as much as possible. Inception
is also a time for advertising the project’s vision, gaining supp ort from the
stakeholders, especially those individuals that are going to be involved in
the activities of requirements elicitation. In fact, this p hase may even indi-
cate who are the best candidates to be included in the elaborat ion plans for
future observation or interviews.
96 The ARknowD Methodology
During transition, the applied solution should be assessed, and min or
problems should be corrected. Assessment typically takes a long pe riod, as
the results of early and late employments of new processes and to ols may
be very diﬀerent (Orlikowski, 1992a). Meanwhile, organizat ional require-
ments are liable to change, and the solution may need to be conse quently
updated. This initiates another phase of inception, trigger ing new iterations
of ARKnowD’s main activities. Note that, in this case, informati on sys-
tems and new organization divisions are now included as new ag ents in the
requirements analysis phase.
3.4 The Use of Agent Mentalistic Concepts
As stated in section 2.4, an AI perspective of agents characterize it by its
cognitive (or mentalistic) properties, such as beliefs, goals a nd commitments.
Although a software engineering view on agents emphasize its po tential for
information system development, without too much care for men talistic or
cognitive notions, we here argue that such properties may inde ed favor both
domain and system analysis and design. This is especially motivat ed by
the fact that we apply agents as metaphors to model members of organiza-
tions. Thus, it may be interesting to consider these properties to explicitate
particularities of human relations, along with their intera ction with infor-
mation systems. In this sense, notions such as goals,plans anddependency
adopted by Tropos, along with belief,perception andcommitment supported
by AORML made these notations particularly attractive for mo deling our
view of human organizations. Particularly for Constructivist KM support,
these cognitive notions assist the analyst in the task of capturing the pe-
culiarities of the organization’s environment and culture . Understanding
agent’s goals, perceptions and beliefs lead to a deeper compr ehension of the
values and strategies adopted in the organization, thus cont ributing for the
conception of more suitable practices and information systems to enable
Constructivist KM.
Several agent cognitive models are proposed in AI literature, the most
The Use of Agent Mentalistic Concepts 97
well-known of them being the BDI model (Rao and Georgeﬀ, 1991 ). This
approach models agents by focusing on the three basic mental co mponents
ofbelief,desire andintention . Belief refers to knowledge the agent has about
the environment and about the other agents with whom he/she in teracts.
Desire refers to the particular “will” of the agent towards a sp eciﬁc state
of aﬀairs of the world (goal), although he/she might never act ually pursue
these goals. And ﬁnally, intention leads to speciﬁc plans and com mitments to
achieve speciﬁc goals. Among the practical use of such framework, Rao and
Georgeﬀ (1991) present a possible-words formalism for BDI-arch itectures,
while the InteRRaP architecture proposed by Fischer et al. (19 96) takes a
less formal view of this model, realizing it through a set of thr ee layers that
aim at explaining agent behavior and supporting system design.
A diﬀerent model characterizes the state of an agent as a combi nation
of mental components such as beliefs, capabilities, choices, an d commit-
ments (Shoham, 1993). However, according to (Wagner, 2003), both this
and the BDI model fail to recognize two fundamental elements for the de-
sign of agent-oriented information systems: perceptions of environmental
events and messages of other agents, which form the basis for the a gent’s
reactive behavior; and memory of past events and actions.
Notions such as beliefs, goals and commitments have been largel y used
to model multiagents’ cooperation and teamwork (Pynadath et al., 1999).
For instance, CAST (Yen et al., 2001) has been developed to simul ate and
support teamwork within mixed human/agent teams. The petri-n et based
formalism applied in CAST enables it to represent besides belief about the
world, also belief about the current goals and activities of o thers in the
team. In addition to that, CAST generates representation of roles and
responsibilities , along with individual and team plans. Based on the shared
mental model, CAST agents are able to decide on the ﬂy how to acc omplish
desired goals, how to select responsibilities to commit to ordelegate , how to
proactively assist others in the team, and how to eﬀectively com municate
within the team.
CAST applies a knowledge representation language called MALLE T (a
Multi-Agent Logic-based Language for Encoding Teamwork), wh ich models
98 The ARknowD Methodology
beliefs, roles, responsibilities, and capabilities (Yin et al., 2 000). Further-
more, Mallet considers both plans and goals, having plans bein g decomposed
to fulﬁll agent goals. Other work on cooperation that deal wit h goals and
plans, linking them to the notions of beliefs, desires and inten tion include
(Boella et al., 1999).
Currently, research in this area has shifted its focus from the individ-
ual characteristics of an agent to a view of multiagent systems a s orga-
nized bodies. In this sense, coordination and control should be a ddressed
as organization-centric instead of agent-centric, as earli er (Sichman et al.,
2005). This has given life to a new research area known as Agent Organiza-
tions. Research in this area is much in line with our aim at modeling h uman
organizations, our work being particularly focused on the app lication area
of KM. Thus, within the work on agent organizations, we are part icularly
interested in the proposed modeling frameworks.
Several such frameworks have been proposed. Among them, we have al-
ready mentioned OperA (Dignum, 2004a), which besides being a software
engineering methodology, has been speciﬁcally tailored for modeling agent
organizations. As described in section 2.4.2, the organization al model pro-
posed by OperA views an organization as a set or rolesthat abstractly de-
scribe the functional position agents will later occupy. Besid es, this model:
a) deﬁnes the coordination structure followed by the organiz ation (such as hi-
erarchy, market or network); b) models interaction moments through scenes ’
description; and c) prescribes norms , associated to roles and interactions.
Besides OperA, AGR (Ferber et al., 2004), MOISE+ (Hubner et al., 2002)
and ISLANDER (Esteva et al., 2002) are among the most prominent ex am-
ples of agent organizations frameworks. AGR focuses on a struct ural view
of the organization, modeling it as a set of agents ,rolesandgroups . Agents
are active, communicating entities playing (multiple) rol es within (several)
groups. Besides a structural view similar to that of AGR, MOISE+ a lso
presents functional and deontic aspects. On one hand, function al aspects
concern organizational goals , which are decomposed in plans and assigned to
agents through missions . On the other hand, deontic aspects describe roles’
permissions andobligations concerning missions. In MOISE+, roles may be
Agent Ontology 99
related by communication and authority links. In ISLANDER, the organi-
zation’s roles and their relationships are presented in the dialogic framework ,
which also prescribes a common ontology that guides agent’s co mmunica-
tion and knowledge exchange. Interactions in ISLANDER are mod eled as
scenes , which are then related through performative structures . And ﬁnally,
ISLANDER also models norms through the deﬁnition of commitment s, obli-
gations and rights of participating agents.
It is worth mentioning that much work related to philosophy an d cogni-
tive sciences have supported the deﬁnition of the cognitive no tions mentioned
here, guiding its practical use for modeling and developing m ultiagent sys-
tems. Among these is the early work of Bratman (1987) on goals, bel iefs,
intentions and related mental models, and the contribution o f Castelfranchi
and colleagues on commitments (Castelfranchi, 1995), depen dency (Castel-
franchi et al., 1992), and delegation (Castelfranchi and Fal cone, 1998). In
addition to these, work on conceptual formalization through the use of on-
tologies have also provided valuable contribution in this re spect (Guizzardi,
2005) (Bottazzi and Ferrario, 2005).
Because the deﬁnition and treatment of such cognitive concept s are diﬀer-
ent in each work, we found important to provide our own concep tualization.
Hence, in the sequence, we present an ontology of agent and relat ed con-
cepts. In this work, we try to merge the diﬀerent existing views, sometimes
combining them, sometimes compromising one idea in favor of an other. It
is important to add that here, we particularly apply this ont ology for guid-
ing the understanding and the evaluation of the notations ado pted by AR-
KnowD (i.e. those of Tropos and AORML). Furthermore, we aim wi th such
initiative, to give a step forward in the direction of clarify ing agent-related
concepts, thus contributing to the state of the art in the area.
100 The ARknowD Methodology
3.5 Towards an Ontology for the Domain of
Agents
An ontology can be deﬁned as a speciﬁcation of a representationa l vocabu-
lary for a shared domain of discourse (Guizzardi, 2005). In othe r words, an
ontology is a domain model, composed of a set of concepts and rel ations. An
ontology is useful to provide a clear understanding about a cer tain domain.
Its concepts and relations provide the precise meaning of the domain’s con-
cept. Here, an ontology is applied to clarify ARKnowD’s concep ts, inherited
both from Tropos and AORML.
We base our Agent Ontology on the foundation ontology previously de-
ﬁned by Guizzardi and Wagner (2005). According to these author s, a foun-
dation ontology, or upper level ontology “deﬁnes a range of top-level domain-
independent ontological categories, which form a general fo undation for more
elaborated domain-speciﬁc ontologies” (Guizzardi and Wagner, 2005, pg.
346). These foundation ontology is divided into three increm entally lay-
ered compliance sets: 1) UFO-A deﬁnes the core of UFO, excluding t erms
related to perdurants (i.e. processes) and terms related to the spheres of
intentional and social things; 2) UFO-B deﬁnes, as an increment t o UFO-A,
terms related to perdurants; and 3) UFO-C deﬁnes, as an incremen t to UFO-
B, terms related to the spheres of intentional and social thing s. This section
brieﬂy describes UFO-A and UFO-B, focusing only on the concepts t hat are
important for the complete understanding of our ontology. Fo llowing, we
present UFO-C in detail, extending it to create our ontology.
3.5.1 UFO-A: Endurants and Perdurants
Figure 3.4 shows an excerpt of UFO-A. UFO-A distinguishes between t wo
kinds of individuals: endurants andperdurants . This distinction can
be intuitively understood in terms of the distinction between ”objects” and
”processes”, respectively. An endurant does not have temporal parts, and
persists in time while keeping its identity. Examples of endur ants include a
house, a person, a hole, the (objectiﬁed) color of an apple, and an amount
Agent Ontology 101
of sand. A perdurant , conversely, is composed of temporal parts. A storm,
a heart attack and a business process are three examples of perdu rants.
Perdurant
Physical Object Amount of 
Matter {disjoint}
Substance 
IndividualEndurantIndividual
Moment 
Individual
{disjoint, complete}inheres in 
1..*
*1
Relator 
Intrinsic 
Moment{disjoint}
{disjoint}
Externally 
Dependent 
Moment
existentially depends *mediates 2..* 
*
Figure 3.4: Diﬀerent kinds of individuals in UFO-A
Endurants are further specialized into substance individual andmo-
ment individual . The former refers to an endurant that possesses direct
spatio-temporal properties and can exist by itself, i.e. substan ce individuals
are not existentially dependent on other endurants, except po ssibly on some
of its parts. A building, a person and a dog are examples of substan ce indi-
viduals. A moment individual , however, is an endurant that cannot exist
by itself; that is, it existentially depends on other individua ls (e.g. the age of
a person, a belief of an agent). Making an analogy with the obje ct-oriented
software engineering domain, we can understand the diﬀerence between sub-
stance andmoment comparing them respectively to object and(objectiﬁed)
property .
A moment individual can be either an intrinsic moment or arelator
(or relational moment) . Anintrinsic moment is a moment individual
that is existentially dependent on one single individual (e.g ., the color of
an apple depends on the existence of the apple itself). Meanwhi le, are-
lator is a moment individual that is existentially dependent on mor e than
102 The ARknowD Methodology
one individual (e.g., a marriage, an enrollment between a stu dent an edu-
cational institution). In other words, a relator is an individ ual capable of
connecting or mediating entities (Guizzardi, 2005). For example, we can
say that John is married to Mary because there is an individual m arriage
relator that existentially depends on both John and Mary, thu s, mediating
the two. Likewise, we can say that Lisa works for Xerox because ther e is an
employment relator mediating Lisa and Xerox.
We can say that endurants bear moments, or inversely, that a moment
inheres in an endurant. The relation of inherence is a special type of exis-
tential dependence relation between moments and their bear ers. Formally,
besides existential dependency, inherence implies the so-cal lednon-migration
principle (Guizzardi, 2005), i.e., if a moment X inheres in an individu al Y,
then there is no individual Z distinct from Y such that X inheres in Z. In
other words, inherence is a functional existential dependenc e relation. This
way, Fig. 3.4 particularly emphasizes that an intrinsic momen t inheres in
one single endurant. An externally dependent moment is a special kind
of intrinsic moment which although inhering in a speciﬁc endur ant, also ex-
istentially depends on another one. The employee identiﬁer i s an example
of externally dependent moment, since although inherent to t he employee,
is also dependent on the organization where this employee wor ks. A relator
R mediating the individuals A and B inheres in the individual composed of
A and B (the so-called mereological sum of A and B)(Guizzardi, 2 005) and,
due to the aforementioned non-migration principle, this in dividual cannot
change. In other words, R inheres in (and, thus, is existentiall y dependent
on) exactly that speciﬁc collection of individuals formed by A and B.
A substance individual is further specialized into amount of matter
andphysical object . Aphysical object satisﬁes a condition of unity, for
which certain parts can change without aﬀecting its identit y (e.g. a house,
a person, the moon). Conversely, an amount of matter is a substance
individual that does not satisfy a condition of unity, typical ly referred to by
means of mass nouns (e.g. a lump of clay, a pile of bricks, an amou nt of
sand).
In Fig. 3.4, we emphasized that all specializations are disjoin t, meaning
Agent Ontology 103
that if an individual is an instance of one specialization class, it can not
be instantiated by another specialization class with the same pa rent. All
specialization relations described in this section have this n ature. Hence,
we refrain from providing such details in the subsequent pictur es in order
to simplify the models. The above information presented for the individual
level may be also replicated for the type level. Figure 3.5 show s anentity
may be either an individual or atype, the former instantiating the latter.
So for example, the substance individuals John, Mary and Lisa in stantiate
the substance type Person.
Individual
Moment Type 
Substance 
Kind Substance 
Type 
Substance 
Role Endurant Type Type Entity 
Relator
Type Material 
Relation Formal 
Relation Relation instantiates 
Figure 3.5: UFO-A diﬀerentiating between Kind and Role
Fig. 3.5 shows that for the category of substance types, UFO-A make s
a further distinction based on the formal meta-properties of rigidity and
anti-rigidity . In simple terms, a type T is said to be rigid if every instance
x of T is necessarily (in the modal sense) an instance of T. In other w ords,
x cannot cease to instantiate T without ceasing to exist. Converse ly, a type
T is anti-rigid if every instance x of T is possibly (in the modal se nse) not
an instance of T, i.e., if x can cease to instantiate T without cea sing to exist
(Guizzardi, 2005). A stereotypical example highlighting th is distinction is
given by the types person and employee, both instantiated by th e individual
Lisa in a given circumstance. Whilst Lisa can cease to be an employe e of
Xerox (and there were periods of time in which Lisa was not one), she cannot
104 The ARknowD Methodology
cease to be a person. In this thesis, a substance type that is rigid is named
aKind. In contrast, a substance anti-rigid type is named a Role.
Besides highlighting this important diﬀerence within the ca tegory of sub-
stance types, Fig. 3.5 also presents other entities. A relation is a type whose
instances are tuples of connected elements. For instance, taki ng Lisa’s exam-
ple presented above, the ‘works at’ relation connects Lisa to Xe rox. There
are two types of relations: formal relation andmaterial relation . A
formal relation holds between two or more entities directly, without any
further intervening individual (Guizzardi, 2005). Exampl es of formal rela-
tion include Lisa ‘is older than’ Mike, and John ‘is taller tha n’ Mary. As
pointed out in (Guizzardi, 2005), the relata of these relatio ns are in fact
moments and not substance individuals. To say that Lisa ‘is older t han’
Mike is to say that Lisa’s age is bigger than Mike’s age. Moreove r, the rela-
tion between Lisa and Mike exists without the need for any real c onnection
between the two. To put it diﬀerently, these relations betwee n substantials
are reducible to purely formal relations between intrinsic m oments of the in-
volved relata. Guizzardi (2005) also points out that instanti ation, inherence
and existential dependency are all types of formal relations.
Conversely, material relations are founded on the existence of a rela-
tor. Thus, Lisa ‘works at’ Xerox because there is an employment re lator
connecting the two. This employment can be composed, for exam ple, of all
commitments and claims associated with the role Lisa plays at th at organi-
zation, and vice-versa (i.e. by all commitments and claims asso ciated to the
organization towards Lisa). Later in this section we provide a more exten-
sive discussion on commitments and claims. Likewise, John ‘is kissin g’ Mary
because there is an individual kiss connecting the two. In summa ry, diﬀer-
ently from formal relations, material relations are not redu cible to relations
between intrinsic moments of the involved relata.
3.5.2 UFO-B: an Ontology of Perdurants
Figure 3.6 presents UFO-B, in which the concept of perdurant coming from
UFO-A is further specialized into state andevent . Astate is a perdurant
Agent Ontology 105
State 
Complex Event Atomic EventEventPerdurant
(from UFO-A)
Pre-state 
Post-state 
1*1*2..* 
Figure 3.6: UFO-B: understanding perdurants in details
whose temporal parts belongs to the same state type as the whole. An
event , on the other hand, is a perdurant that is related to exactly t wo
states (its pre-state and its post-state). Pre-state and post-stat e are shown
in the relations between event and state in Fig. 3.6.
An event is then specialized into atomic event andcomplex event .
The former refers to an event that happens instantaneously, th at is, an
event without duration, for instance: an explosion, or a message reception.
The latter is an event that is composed of other events by means of event
composition operators. Examples of complex event comprehend a parallel
occurrence of two explosions, a storm, a heart attack, and a work meeting.
Aprocess can be understood as a synonymous of complex event, i.e. an
event that is composed of two or more events as shown in Fig. 3.6.
3.5.3 Extending UFO-C
UFO-C is based on the concepts of physical object andmoment in-
dividual coming from UFO-A, and on the concept of event speciﬁed by
UFO-B. Our extended version of UFO-C is depicted subsequently, sta rting
from Figure 3.7 until Figure 3.10.
Fig. 3.7 shows that the UFO-A concept of physical object is here
specialized into physical agent andnon-agentive object . Aphysical
agent is a physical object that creates action events , perceives events
(possibly created by other physical agents ), and to which we can ascribe
a mental state. Here are some examples of physical agents: a man, a c at, a
106 The ARknowD Methodology
Physical Object 
(from UFO-A)
Physical Agent Non-Agentive 
Object 
Event 
(from UFO-B)
Action Event Non-Action 
Event perceives *
creates * 1..* 
Communicative 
Action Event 
Institutional 
Agent receives 
sends 1..* 
*
*1
Human Agent Artificial Agent Resource 
Complex 
Action Event Atomic Action 
Event Plan Execution controls uses *
1..* * 1..* 
2..* 1..* 
InternalAgent 
Plan Type instantiates 
Figure 3.7: Extending UFO-C from the UFO-A concept of physical o bject
and the UFO-B concept of event
robot. A non-agentive object is a physical object that is not a physical
agent (e.g. a book and a tree). A non-agentive object can be a resource ,
meaning that such object is used by a physical agent with speciﬁc purposes,
and typically owned or controlled by this or other physical agent (relation
owns andcontrols outcoming from physical agent).
A distinction is made between human agent ,artiﬁcial agent andin-
stitutional agent (all three sub-kinds of physical agent), to diﬀerentiate
humans agents, software (or hardware) agents, and agents repre senting or-
ganizations or organization sub-parts (such as departments a nd divisions).
Institutional agents are composed of several internal agents, w hich may be
any kind of physical agent (human, artiﬁcial or institutional ).
Most agent-oriented approaches only focus on agents, disregar ding the
presence of objects in the modeled scenario. We consider this a l imitation
and thus, acknowledge the existence of these two distinct entiti es. Especially
in KM settings, some connections can be intuitively identiﬁed b etween the
knowledge artifacts andobjects , between the KM system users andhuman
Agent Ontology 107
agents , and between a KM supporting organization asinstitutional agents .
Besides, the KM system itself can also be composed of multiple softwar e
agents that apply non-agentive objects as resources, mediati ng the processes
of knowledge creation, integration and sharing.
Action event andnon-action event are two types of event (concept
from UFO-B). The former refers to an event that is created thro ugh the
action of a physical agent, for instance, ‘sending a message to ano ther phys-
ical agent’, ‘writing a book’, and ‘reviewing a paper’. The l atter is an event
that is not created through an action of a physical agent (e.g. ‘a deadline is
achieved’, and ‘it becomes dark’), although it may be percei ved by him/her.
This diﬀerentiation is essential in agent-oriented approach es as modeling
the environment populated by agents is paramount. Therefor e, non-action
events are typically events generated by the environment it self and perceived
by the agents living in it. A plan execution can be deﬁned as an intended
execution of one or more actions, being in this way a special kin d of action
event. In other words, a plan execution may be composed by one or more
sequentially ordered action events, targeting a particular o utcome of interest
to the agent. These action events may be triggered by both acti on and non-
action events perceived by the agent. Besides, a plan executio n is connected
to aplan type , which is a general description of the action sequence that
a physical agent should execute.
Analogously to an UFO-B atomic event, an atomic action event is
an action event that happens instantaneously, such as ‘picking a book in a
shelve’ and ‘sending a message’. In fact, ‘sending a message’ can also be
seen as a subtype of atomic action event, referred to as communicative
action event . Physical agents both send and receive communicative ac-
tion events. Communication is one of the most important aspects of agent-
oriented systems as this triggers one agent to adopt goals or to execute
action events on behalf of another. As already pointed out in section 2.4,
unlike objects that simply execute actions when requested, an agent reasons
over another agent’s request before agreeing on a particular course of ac-
tion (Wooldridge, 1999). Communication may be also required to inform an
agent about changes in one’s course of action or in the environ ment itself,
108 The ARknowD Methodology
thus altering the agent’s beliefs.
Physical Agent
Individual
Moment Individual
(from UFO-A)
Relator 
(from UFO-A)Intrinsic Moment
(from UFO-A)
Mental Moment
*1
inheres in 
Intention Perception Belief
Commitment
State of Affairs Goal1..* Social Moment
Claim *2..* 
mediates 
*
Plan Execution achieves refers to 
Hardgoal
Softgoal 1..* *refers to 
refers to Social Relator 
1*
1*
Figure 3.8: Extending UFO-C from the UFO-A concept of moment in divid-
ual
In Fig. 3.8, the intrinsic moment concept of UFO-A is specialized into
mental moment , which denotes an intrinsic moment that is existentially
dependent on a particular agent, being an inseparable part of its mental
state. Examples of mental moments include a thought, a percep tion, a be-
lief, and an individual intention. We can then say that a mental moment
inheres in a physical agent (relation inheres in ). Here, we choose the
mental moments that we ﬁnd more useful for modeling agent-ori ented sys-
tems.Perception is a relevant concept to express the relation of agents to
events sensed from the environment and from other agents. Belief regards
information the agent has about the environment and about ot her agents.
In KM settings, belief and perception are highly conditioned b y organiza-
tional culture, i.e. the views, values and behavior socially a ccepted within
the organization’s boundaries.
Organizational culture may also constrain the action of agent s, and this is
highly related to another important type of agent’s mental m oments, namely,
Agent Ontology 109
intention . Agent’s intention directly leads to the adoption of certain goals
and objectives. Taking this into account, we here specify goalas a particular
state of aﬀairs (i.e. condition or state of the world) related to an intention
inhered in a physical agent (see the refers to relation between goaland
intention ). A goal may be specialized into hardgoal andsoftgoal . Here,
we adopt Tropos’ deﬁnitions that state that a hardgoal is associa ted a speciﬁc
condition for verifying whether it has been satisﬁed or not. A so ftgoal,
instead, has no clear-cut satisfaction condition. Due to this f uzzy nature
of softgoal, we decide not to go forward with the analysis of thi s concept
here, leaving it as future work. However, since we apply this co ncept in the
analysis we make in this thesis, we found it important to include it in the
ontology.
Social moment is an specialization of the UFO-A concept of exter-
nally dependent moment , including the concepts of commitment and
claim . When two physical agents agree to accomplish goals to one anot her,
a commitment/claim pair is generated between them. These deo ntic con-
cepts are highly important to regulate the social relations b etween members
of an organization. In KM environments, agents may have severa l commit-
ments and claims towards one another. On one hand, a consultan t might
commit to his colleague to pass on some valuable information ab out a past
case that he was involved in, which is similar to a present task of h is col-
league. On the other hand, the colleague can claim this knowl edge transfer
from the consultant. A pair commitment/claim constitutes a social rela-
tor, which is a particular type of UFO-A relator . Fig. 3.8 also shows that a
commitment and claim refer to a goal ( refers to between commitment and
goal and between claim and goal). In other words, when a physica l agent
A commits to a physical agent B, this means that A adopts a goal o f B.
Conversely, the social relator created between A and B state tha t B has the
right to claim the accomplishment of this speciﬁc goal to A. Caste lfranchi
(1995) made an important contribution on the understanding o f commit-
ments (and consequently also on the clariﬁcation of claims). In one of his
work, he cites Searle, who claims that “a commitment is a righ t producing
act” (Castelfranchi, 1995), highlighting that it is much mor e complex for an
110 The ARknowD Methodology
agent to disengage from commitments towards other agents (soc ial commit-
ments, in Castelfranchi’s term) than to dismiss his own intentio ns (which
Castelfranchi calls internal commitments).
Physical Agent
Individual
Moment Individual
(from UFO-A)
Intrinsic 
Moment1
inheres in 
Social Moment *Physical Agent 
Kind Physical Agent 
Type instantiates 
1 1
Physical Agent 
Role 
Social Moment 
Type instantiates defines 
1 1*
1..* 
Figure 3.9: Pointing out the diﬀerence between physical agen t type and
physical agent role
Fig. 3.9 emphasizes the diﬀerence between physical agent type and
physical agent individual . Furthermore, it also depicts the diﬀerence
between rigid and anti-rigid agent types, here physical agent kind and
physical agent role . While person is an example of a physical agent kind,
physical agent roles are speciﬁcally suited to model organizat ional roles (e.g.
secretary, manager) as well as other roles performed by agent s in speciﬁc
situations that can be played independently of the position som eone has in
an organization (e.g. ‘coﬀee maker’ or ‘book reader’). As pre viously clariﬁed
in UFO-A, a person cannot cease to be a person while a secretary can be
promoted into manager, or can assume another organizational p osition. This
distinction is characterized by the rigidity of physical agent type and the
anti-rigidity of physical agent role .
Still aiming at clarifying the concept of agent role, Fig. 3. 9 shows that an
agent role is deﬁned by social moment types , which describe what the set
ofgeneral commitments andgeneral claims a physical agent playing that role
has. This is again based on the work of Castelfranchi, who deﬁnes a general
commitment as a commitment an agent makes towards a set of goal s of the
Agent Ontology 111
same type. For example, when agreeing to perform the organiza tional role of
a ‘secretary’, one is automatically committing oneself to ‘wr iting letters’ and
‘making appointments’ on behalf of one’s boss. Conversely, this person also
has some claims a priori, such as receiving a certain salary in th e end of the
month and having a suitable working place. Bottazzi and Ferra rio (2005)
reminds us that an agent’s autonomy within an organization i s restricted by
the set of general commitments and claims he/she has, as a result o f playing
a speciﬁc role, also highlighted in (Dignum, 2004a).
Physical Agent 
Goal 
Dependency Formal Relation 
(from UFO-A)
Dependency 1
Plan 
Dependency Resource 
Dependency 
Plan Resource 
Dependum Dependum Dependum Depender 
Dependee 1
11 1* * **
*
Goal 
Delegation Material Relation 
(from UFO-A)
Delegation 
Plan 
Delegation 
Goal Resource 
Delegatum Acquisitum 
1 11
* **
1 *Delegator 
Delegatee *1
1
Plan 
*1Social Relator 
associated to 1
Delegatum Resource 
Acquisition associated to associated to 
accomplishes 
associated to Acquisitor Acquisitee 
1 1* *
Figure 3.10: Distinguishing between dependency, delegation and acquisition
relations
Figure 3.10 ﬁnally concludes our UFO-C extension, depicting t he impor-
tant distinction between the concepts of dependency and dele gation. The
ﬁrst diﬀerence regards the fact that while a dependency constitutes a for-
mal relation, a delegation consists of a material relation, following the
deﬁnitions of UFO-A. Let us examine this diﬀerence in further d etail. The
ﬁgure shows that a dependency connects two physical agents (a depen-
derand adependee ) and a dependum , whose nature deﬁnes the type of
112 The ARknowD Methodology
dependency. Thus, a goal dependum indicates a goal dependenc y, a plan
dependency is created around a plan, and a resource is a depend um of the
resource dependency. An agent A (the depender) depends on an ag ent B
(the dependee) regarding a goal G if G is a goal of agent A, but A c annot
accomplish G, and agent B can accomplish G. Here, the fact that an agent
cannot accomplish a goal may mean that this agent either does n ot have the
ability to achieve it. Or else, it may denote that this agent’s pursuit towards
this goal may interfere with his/her other intentions, such tha t he/she de-
cides not to pursue this goal after all. This may well be a reason why agent
A decides to delegate such goal accomplishment to agent B. A del egation is
thus associated with a dependency but it is more than that. As a ma terial
relation, it is founded on something more than its connected e lements. In
this case, the connected elements are two physical agents ( delegator and
delegatee ) and a goal ( delegatum ), and the foundation of this material
relation is the social relator (i.e. a commitment/claim pair ) established be-
tween the two physical agents involved in this delegation. In other words,
when agent A delegates a goal G to agent B, besides the fact that A depends
on B regarding G, B commits him/herself to accomplish G on behal f of A.
Goal and plan delegation refer to what Castelfranchi deﬁnes a s open and
close delegation (Castelfranchi and Falcone, 1998), meaning that the former
leaves the decision regarding the strategy towards goal accom plishment to
the depender. The latter rather prescribes a speciﬁc strategy ( i.e. a plan)
the depender should adopt towards achieving the delegated go al.
To illustrate the diﬀerence between dependency and delegati on, consider
the following case. Suppose John is a program committee member of a
certain conference and that he received from Paul (the confe rence program
chair) an article X to review. Suppose that John cannot review this article
by himself, since there are some aspects of the article which are o utside
his ﬁeld of competence. Now, suppose that George is a colleague o f John
who is knowledgeable exactly in those aspects that John needs t o review
article X. In this case, we could say that John depends on George to review
article X. Notice, however, that this relation between John an d George can
be reduced to relations between the goals and capabilities o f these individual
Agent Ontology 113
agents. Moreover, this relation does not even require that th e related agents
are aware of this dependence. This is certainly not the case fo r the relation
between Paul and John. As the program committee chair, Paul de pends on
John to review article X. However, in this case, not only they are both aware
of this dependence but there is the explicit commitment of Jo hn to Paul to
review article X. In other words, the delegation of Paul to John to review
article X cannot be reduced to relations between their intri nsic moments,
but it requires the existence of a certain relator (a commitme nt/claim pair)
that founds this relation. Not explicit in the diagram of Fig. 3.10 is the
concept of socially can achieve , orsocially can execute . In the paragraph
above, when we say that a certain agent can achieve a goal, this means
that such agent is able to do it him/herself or can delegate to an other agent
that can accomplish it on his/her behalf. In the example above, if John can
review part of article X by himself and can delegate a remainin g part to
George, we could say that John socially can achieve the goal of reviewing
article X.
Similarly to delegation, resource acquisition is also a material relation
associated with the same concepts of dependency and social relat or. We
created this as a diﬀerent concept because when agent A needs a ccess to a
resource R controlled by agent B, it is awkward to say that agent A delegates
resource R to agent B. Moreover, this relation is diﬀerentiat ed as follows:
an agent A acquires a resource R from agent B is equivalent to say that
agent A needs to use resource R, agent A does not control resource R, agent
B controls resource R, and agent B commits him/herself to give a gent A
access to resource R. In an alternative formulation we can say th at if agent
A acquires resource R from agent B then: a) there is a resource de pendence
from A to B w.r.t. R; b) A and B are mutually aware of this depend ency;
c) B socially commits to give A access to R.
114 The ARknowD Methodology
3.6 Evaluating ARKnowD’s Notation
When conceiving a novel modeling language, one should obviou sly be con-
cerned with its quality. This quality traduces in how well th e language is
able to represent phenomena in its domain of discourse, and on ho w clearly
the language is able to communicate such phenomena to the even tual readers
of the model. ARKnowD combines the notations of two diﬀerent m odeling
languages, the ones of Tropos and AORML. It is thus important t o verify
the quality of these languages individually, but especially t he consistency in
their combination to generate ARKnowD’s language.
3.6.1 Evaluation Method
Guizzardi (2005) provides a framework for evaluating model ing languages.
This framework veriﬁes how clear and expressive a language is, b y focusing
on its notation, but also evaluates how well this language is a ble to represent
the state of aﬀairs for which it is proposed (also referred in thi s work as
domain appropriateness ).
“The domain appropriateness of a language is a measure of the suitability
of a language to model phenomena in a given domain, or in other words, of
its truthfulness of a language to a given domain reality. (... ) Comprehen-
sibility appropriateness refers to how easy is for a user a giv en language to
recognize what that language’s constructs mean in terms of d omain concepts
and, how easy is to understand, communicate and reason with t he speciﬁca-
tions produced in that language.” (pg. 28)
The proposed framework is based on the construction of a domain o ntol-
ogy to describe the conceptual domain of discourse. This ontolo gy is then
used as a type of ‘mirror’ for the modeling language, i.e. for v erifying how
well this modeling language is able to represent the concepts and relations
represented in the ontology. This veriﬁcation results is a mea sure of the
quality of the domain appropriateness of the given language.
Given the ontology elaborated and described in the previous se ction, we
intend to apply this method to evaluate ARKnowD’s language. T he eval-
Evaluating ARKnowD’s Notation 115
uation criterion is based on four properties, namely: lucidity, soundness,
laconicity andcompleteness .
A language is considered lucidaccording to a conceptualization if each of
its constructs can represent at most one entity of this conceptu alization. Al-
though not exactly the same, lucidity is closely linked to const ruct overload,
i.e. having a single language construct representing two or mor e ontologi-
cal constructs. As stated by Guizzardi (2005, pg. 31), “Construct overload
is considered an undesirable property of a modeling language since it causes
ambiguity and, hence, undermines clarity. When a construct o verload exists,
users have to bring additional knowledge not contained in th e speciﬁcation
to understand the phenomena which are being represented.”
Soundness refers to the property of a language of representing solely the
entities of the domain conceptualization. Having one constru ct that does
not map to any ontological construct is also known as construct e xcess. The
presence of this extra construct should be avoided since it under mines the
understanding of the speciﬁcation. In other words, a speciﬁcati on is clear if
the reader is able to link the language constructs to the entit ies of the domain
of discourse. Consequently, only the entities of this domain (r epresented in
the domain ontology) should be modeled with the use of language constructs.
A language is said laconic if it possesses only one construct to represent
each phenomenon in the domain or discourse (i.e. each entity in the domain
ontology). Conversely, the same conceptual entity may be repr esented by
two or more constructs in a speciﬁcation, consequently adding c onfusion to
the meaning of the model. A reader may ask himself, for example, if the
two constructs are actually the same or if there is any semantic d istinction
between them. Laconicity is then related to construct redund ancy, which
besides turning more diﬃcult the understanding of speciﬁcatio ns, adds un-
necessary complexity to the modeling language.
A modeling language is said to be complete if every concept in a domain
conceptualization is covered by at least one modeling constru ct of the lan-
guage. This is directly linked to the expressivity of the given language. In
other words, if a language is incomplete, it fails to represent all phenom-
116 The ARknowD Methodology
ena in the given domain of discourse. The result of this incomple teness is
either an incomplete speciﬁcations or construct overload, wh ich are both
undesirable for deteriorating the clarity of the speciﬁcatio ns produced with
the given language.
3.6.2 Evaluation
Taking the ontology presented in section 3.5 and based on the met hod de-
scribed above, we have found a few problems in the current Trop os and
AORML notations. Consequently, we have decided to make a few ad just-
ments in order to proceed with their integration into ARKnowD . It is im-
portant to point out that these notations are here considered i n combination
with one another, so for example, if one comprehends a set of ont ological
concepts, the lack of these same concepts in the other is not consi dered
incompleteness. This decision is motivated by the fact that in AR KnowD,
each notation is used in a separate activity, for which one conc ept or another
may be more appropriate.
In Tropos, there are one case of lack of laconicity , one case of unsound-
ness, two cases of incompleteness , and one case of missing lucidity . First,
let us address the lack of laconicity and the unsoundness cases together. In
Tropos, besides the concept of agent and role, corresponding to our ontolog-
ical concepts of physical agent type and physical agent role, t here are two
other concepts: actor and position. Figure 3.11 depicts these c oncepts and
their corresponding notations.
The concept of position is considered solely with the purpose of aggre-
gating diﬀerent roles. However, for not being a domain concept , position
prevents Tropos from being considered laconic. Let us analyz e this concept
a bit further in order to make sure that it is really not present i n the domain.
As stated in section 3.5.3, a physical agent role is deﬁned by the se t of social
moments, i.e. commitments and claims a physical agent playing such role
agrees to. As a role aggregation, a position is deﬁned as two or m ore set
of social moments, which can be ﬁnally characterized as a social moment.
Referring to rigidity or antirigidity, position is an antiri gid concept as well
Evaluating ARKnowD’s Notation 117
AgentActor
Role Position 
occupies plays aggregates 
actor agent role position (A)
(B)
Figure 3.11: (A) an excerpt of the Tropos’s metamodel showing th e concept
of actor and its specializations and (B) corresponding notati ons
as role. We conclude that there is no real diﬀerentiation bet ween role and
position, thus not justifying the use of two ontological concep ts instead of
one.
Still referring to Fig. 3.11, we note that actor is a general concept which
can refer to an agent, to a role or to a position. However, we ﬁnd n o reason
why to consider such a concept, as from the start of a domain analy sis, the
analyst is able to identify the type of each domain participan t, considering
the rigidity and anti-rigidity properties explained in sect ion 3.5.1. Thus, the
concept of actor leads to unsoundness and we prefer not to consid er it in
ARKnowD. Dismissing the position and actor concept, the analyst id entiﬁes
from start, if a domain participant is an agent or a role. For re presenting
an agent, ARknowD adopts Tropos’s actor notation (empty circl e) for being
the most simple form, maintaining the Tropos’s role notation as it is.
Going forward with the evaluation of the Tropos language, we address the
incompleteness andmissing lucidity issues by considering the case illustrated
in Figure 3.12.
Fig. 3.12 illustrates the following situation. The department manager of
an organization relies on the department secretary to make an appointment
for a meeting with all the employees of the department. The secretary , on her
turn, depends on a speciﬁc calender system named eDate. The secretary is
118 The ARknowD Methodology
Department 
Secretary 
setting up a meeting 
with department’s 
personnel
Department 
ManagereDates 
System having employees’ 
availability  
information  
(A) (B)eDates 
System 
Developer
having free new 
system releases 
Department 
Secretary 
setting up a meeting 
with department’s 
personnel
Department 
ManagereDates 
System having employees’ 
availability  
information  eDates 
System 
Developer
having free new 
system releases 
Figure 3.12: Correcting two cases of incompleteness
always checking for free new versions of the eDate system in the d eveloper’s
website, aiming at proﬁting from new functionality and enhan cements in
this system. Department manager, department secretary, eDate , and eDate
system developer are example of Tropos agents, which correspond to the
UFO-C concept of physical agent .
In part (A), however, it is not possible to diﬀerentiate between physical
agent type andphysical agent individual . For instance, it is not clear
if we talk about a speciﬁc secretary and a speciﬁc system, or genera l ones.
Representing both ontological concepts using only one langua ge construct
is understood as construct overload (leading to missing lucidit y). This may
be in the way for a clear understanding of the modeled setting. W e have
therefore provided in (B), a way to diﬀerentiate these two ent ities. Inspired
by UML, we chose to underline the name of physical agent individuals
to point out the diﬀerence between them and physical agent type , thus
imitating the way UML diﬀerentiates between instances and cla sses. Our
choice provides a good connection between Tropos and AORML n otation,
Evaluating ARKnowD’s Notation 119
which already adopts this UML strategy. Following such strategy , part (B)
depicts eDate as an individual and all other agents as types. T he choice of
making the others as types is to maintain a level of generalit y for the model,
for instance this case would typically hold even if the secretar y was changed.
The new one would continue to be responsible for setting up meeti ngs on
behalf of his/her boss, and using the same system to do so.
A case of incompleteness that can be noted in Fig. 3.12 (A) refers to the
lack of language expressivity of the Tropos language to model t he concept of
dependency . What Tropos usually terms dependency is actually a case of
delegation according to our ontology. As we have seen, the latter is stronge r
than the previous, as besides dependency it also involves commi tment from
the dependee in relation to the depender. In part (A) of the ﬁgu re, the
delegation depicted between the secretary and the eDate system developer is
actually only a dependency. The secretary does not know the de veloper, who
on his turn has no way to commit speciﬁcally to her on releasing n ew system’s
versions. In other words, if the developer decides to stop provid ing free
releases and rather to start charging for new eDate versions, the secretary
does not have a claim towards him and will just have to live with this new
situation. To correct this expressivity problem, we created a n ew symbol
to distinguish dependency fromdelegation . This is a similar arrow as used
before, however empty headed to denote the lack of commitmen t. This new
symbol is illustrated in Fig. 3.12 (B).
The other case of incompleteness, actually refers to the concep t of re-
source acquisition. However, in this case, we simply refer diﬀere ntly to what
Tropos formerly termed resource dependency. We also do not see a point
in changing the notation in this case, as resource acquisition, goal and plan
delegations may be diﬀerentiated as shown in Figure 3.13. Thi s notation
maintains uniformity regarding the ones used for goal and pla n delegation,
showing that analogously to these relations, a resource acquisiti on is a re-
source dependency added by a commitment (in this case, the comm itment
of the acquisitee to provide the acquisitor with access to the ac quisitum).
In AORML, we have found one case of missing lucidity. This regard s the
notation used at the same time to model a non-agentive object an d a belief.
120 The ARknowD Methodology
dependee depender
goal dependency delegatee delegator
goal delegation 
dependee depender
plan dependency delegatee delegator
plan delegation 
dependee depender
resource dependency aquisitee acquisitor
resource acquisition 
Figure 3.13: Diﬀerentiating the three types of dependencie s, goal and plan
delegation, and resource acquisition
To correct this problem, we use stereotypes, an UML construct comm only
used to extend this language, diﬀerentiating old and new enti ties. Such
construct is already applied in AORML, for example to distingu ish between
human, institutional and artiﬁcial agents. Figure 3.14 shows o ur proposed
solution, depicting a typical situation involving a library i nstitutional agent
and a borrower human agent. The library uses an information syst em to
organize its book collection. The borrower borrows books, ha ving his own
internal beliefs related to these books. The ﬁgure diﬀerentia tes the actual
books from the agent’s internal beliefs by stereotyping the b elief class.
ITBE Library 
Book LibSys <<institutional>> 
Borrower<<artificial>> 
<<human>> 
Book <<belief>> organizes 
borrows agent
object
refers to Legend 
Figure 3.14: Distinguishing beliefs from non-agentive objec ts in AORML
using stereotypes
MDA-inspired Transformation Method 121
3.7 MDA-inspired Transformation Method
Recent progress in the development of distributed systems inclu de OMG’s
eﬀorts towards the deﬁnition of a Model Driven Architecture ( MDA)2. Al-
though aimed at developing object-oriented systems, a few elem ents of this
work may be equally valuable for agent-orientation. This is the case of the
concept of viewpoints and the idea of model transformation . This section
discusses both topics and describes how this is applied in the con text of
ARKnowD.
3.7.1 The Model Driven Architecture Viewpoints
MDA has been developed to enable ﬂexible design of distributed software
systems. It provides an open, vendor-neutral approach to avoid problems
arising from business processes and technological changes. In thi s respect,
MDA proposes the separation of the speciﬁcation of the operatio n of a system
from the details of the way that system uses the capabilities of i ts platforms.
In other words, for each system under development, MDA proposes t he deﬁ-
nition of a platform-independent model (PIM) that can then b e transformed
into one or more platform-speciﬁc models (PSMs). This allows t he system
to be implemented in diﬀerent platforms, while still maintain ing the same
PIM. Besides, beneﬁts of this approach stem from the possibility t o par-
tially automate the model transformation process. In this way, development
costs may be reduced and software quality may be improved. In ad dition to
that, this approach facilitates integration, evolution an d migration of soft-
ware solutions, hence contributing to the limitation of maint enance costs for
distributed applications.
Computational-independent, platform-independent and pl atform-specif-
ic are known as diﬀerent viewpoints in MDA. “A viewpoint is a technique
for abstraction using a selected set of architectural conce pts and structur-
ing rules, in order to focus on particular concerns within tha t system. Here
2MDA Guide Version 1.0.1, omg/2003-06-01, available at
http://www.omg.org/docs/omg/03-06-01.pdf
122 The ARknowD Methodology
‘abstraction’ is used to mean the process of suppressing sel ected details to
establish a simpliﬁed model.” (MDA Guide Version 1.0.1, pg. 2–3). A
computation-independent viewpoint focuses on the environm ent or domain
of the system. At this point, the system’s requirements are hidde n or un-
determined. The result of applying this viewpoint is the deve lopment of
a Computation-independent model (CIM), also known as domain model or
business model. A platform-independent viewpoint focuses on t he general
functionality of the system, without including the details th at are speciﬁc
of a given platform. In other words, this viewpoint presents pa rt of the sys-
tem speciﬁcation that does not change from one platform to ano ther. The
platform-speciﬁc viewpoint, conversely, is targeted at adju sting the PIM
speciﬁcations to a certain platform, providing details on ho w such a plat-
form implements the PIM speciﬁcations. The already mentioned PIM and
PSM are elaborated when respectively taking a platform-inde pendent and a
platform-speciﬁc viewpoint of the system.
When a system is developed, its CIM, PIM and PSM must be consistent.
In other words, in an MDA speciﬁcation of a system, CIM requiremen ts
should be traceable to the PIM and PSM constructs that implemen t them,
and vice-versa. For maintaining consistency between models, en abling a
smooth transition from one viewpoint to another, MDA proposes t he use of
transformation processes, i.e. processes that convert one model t o another
model of the same system.
The MDA Guide Version 1.0.1 describes several transformation me th-
ods. Here, we limit ourselves on describing the metamodel transfo rmation,
which is the one applied in this work. Figure 3.15 illustrates this type of
transformation.
As depicted in Fig. 3.15, ﬁrst, a PIM is speciﬁed, using a platform -
independent modeling language. Then, a particular platfor m is selected for
implementing the system. At this point, a transformation speciﬁ cation to
convert the notation used in PIM to the platform-speciﬁc langu age is already
available. This speciﬁcation maps the metamodels of the lang uage applied in
the PIM to the one used in the PSM. Consequently, a PSM may be prod uced
by following the guidelines of the transformation speciﬁcati on. Similarly, a
MDA-inspired Transformation Method 123
PIM 
PSM Transformation 
Specification Platform-
Independent 
Metamodel
Platform-
Specific 
MetamodelSource language 
Target language language used 
language used Transformation 
Figure 3.15: MDA metamodel transformation (MDA Guide Version 1.0.1)
CIM may be converted into a PIM.
The described transformation method oﬀers a systematic approac h to
convert the models elaborated taking diﬀerent MDA viewpoin ts. Following,
we explore how this is used in the context of the ARKnowD methodo logy.
3.7.2 ARKnowD’s Viewpoints and Models
In this work, we adopt the MDA viewpoints approach, aiming at suppressing
unnecessary details according to diﬀerent abstraction levels, which results in
an appropriate separation of concerns regarding system analysi s and design.
Table 3.1 shows ARKnowD viewpoints framework.
Table 3.1 shows for each abstraction level (or viewpoint), whi ch models
are used, according to each modeling aspect, i.e. the interact ion, informa-
tion and behavior aspects. These three aspects are, in general, t argeted in
every system analysis and design models. The information aspect compre-
hends the entities composing the system and the relations existi ng among
them. A preliminary view of such entities and relations can be obtained
in the CIM with the use of Tropos’s actor and goal diagrams, which depict
the agents and resources (later objects) of the domain and a hig h-level view
of how they relate. However, a complete information model may only be
attained through the use of AOR Agent Diagrams (modeling agent and ob-
ject classes) and UML Class Diagrams (exclusively modeling object classes),
124 The ARknowD Methodology
later in the PIM. The interaction aspect , as its name suggests, deals with the
dynamic aspects of the system, modeling the interactions among the agents
composing it. In the CIM, Tropos’s actor and goal diagrams, alth ough not
providing a detailed model of these interactions, provide an i nitial view of
the interaction relationships among agents through the depe ndencies, dele-
gations and acquisition links they show. Such interactions ar e modeled in
detail in the PIM with the use of the three types of AOR interact ion di-
agrams. Although characteristic of the PIM, these diagrams may b e also
applied in the CIM, in case any process of the domain must be analy zed in
further details. Finally, the behavior aspect focuses on the internal behavior
of each system component. Once more, in the CIM, Tropos only pro vides a
high-level view of such behavior, speciﬁcally with the use of go al diagrams,
which depict the internal perspective of a single agent of the d omain. The
behavior of the system agents may be better understood in the PIM , by
applying AOR pattern and activity diagrams, which provide de tails about
the internal reasoning and choices made by the agents.
As for the PSM, the used diagrams closely depend on the choice of t he
platform in which the system is ﬁnally implemented. Here we exem plify
possible models used for each aspect if a Java platform is selected for im-
plementation. In this case, UML Class Diagrams providing more d etails
than the one designed in the PIM are used both for information an d behav-
ior modeling. Such diagrams contain all object classes with th eir respective
attributes typed according to the platform, and depict all m ethods to be exe-
cuted by an object. Next to this, UML Sequence and Deployment Dia grams
model the interaction aspect, respectively providing detail s on the interac-
tion of objects and the distribution of objects among the system hardware
components (i.e. clients, servers, etc.). This thesis focuses mo re carefully
on the CIM and PIM, giving less strength to the PSM, although cha pter 6
illustrates how a system may be implemented based on a PSM that reﬁ nes
a speciﬁc PIM designed in chapter 5.
The division in three abstraction levels provide us with an int eresting
view, showing us that we should naturally target the modeling t ask from
diﬀerent perspectives: the domain model (CIM), a design model w hich can
MDA-inspired Transformation Method 125Abstraction Level Viewpoint Aspects
Information Interaction Behavior
Computation-independent Model(CIM) Tropos Actor Dia-gram, Tropos GoalDiagram Tropos Actor Dia-gram, Tropos GoalDiagram Tropos Goal Dia-gram
Platform-independent Model(PIM) Tropos Actor Dia-gram, AOR AgentDiagram, UMLClass Diagrams Tropos Actor Di-agram, TroposGoal Diagram,AOR InteractionSequence Diagram,AOR InteractionPattern Diagram,AOR InteractionFrame Diagram Tropos Goal Dia-gram, AOR Inter-action Pattern Di-agrams, AOR In-ternal Activity Di-agrams
Platform-speciﬁcModel (PSM) UML Class Dia-grams, others UML SequenceDiagrams, UMLDeployment Dia-grams, others UML Class Dia-grams, others
Table 3.1: ARKnowD’s viewpoints
126 The ARknowD Methodology
be reused, meaning that it is independent of the implementati on platform
(PIM), and ﬁnally a design model that depends on the implement ation plat-
form of our choice (PSM). Referring to section 3.3, we are able to link the
models generated as a result of the focus on the diﬀerent viewp oints explored
in table 3.1 with ARKnowD’s modeling activities. The models re sulting from
the requirements analysis activities are typically CIM. Next , the architec-
tural design and the initial detailed design activities gener ate a PIM. Finally,
the design is detailed even further, resulting in a PSM, which e nables the
system to be implemented using a particular platform and/or pro gramming
language.
3.7.3 ARKnowD’s Transformations: Converting Tro-
pos into AORML
As previously explained, it is necessary to provide a transformat ion method
to convert the notation of the models of the diﬀerent viewpoi nts. In AR-
KnowD, this is done by mapping Tropos concepts to AORML constr ucts.
Table 3.2 depicts this mapping, previously presented in (Guiz zardi et al.,
2005).
An agent in Tropos models an entity that has strategic goals and in-
tentionality within the system or the organizational setting. This concept
directly maps to one of the three types of agents in AORML: hum an, ar-
tiﬁcial or institutional agent, depending on its nature. Tro pos’s plans may
indicate paths for AORML’s interaction modeling. In other w ords, for each
plan in a Tropos model, there can be an AOR Interaction Sequen ce Diagram,
modeling the interactions of the agents participating in th is plan (i.e. agents
having the plan, or being connected to it by a delegation link ). Capabilities
in Tropos may be seen as a set of plans and, therefore, could be ma pped to
the set of interaction modeling paths, representing the agent’ s plans. Anal-
ogously, resources that represent physical or information enti ties in Tropos
become objects according to AORML conceptualization. Addit ionally, in
Tropos, goal, plan and resource dependency between two agents indicate
that one agent depends on the other in order to achieve some goa l, execute
MDA-inspired Transformation Method 127
Tropos Concepts AORML Constructs
agent agent
plan AOR Interaction Sequence
Diagram
capability set of AOR Interaction Se-
quence Diagram
resource object
dependency AOR Agent Diagram associ-
ation relation
delegation AOR Agent Diagram associ-
ation relation/AOR commit-
ment
resource acquisition AOR Agent Diagram associ-
ation relation/AOR commit-
ment
Table 3.2: Mapping Tropos into AORML
some plan, or obtain some resource. Because such dependency link i ndicates
a kind of relation between the two agents (depender and depen dee), an asso-
ciation link may be depicted between these agents in an AOR Agen t Diagram
(AD), typically used for information modeling. Here, we conside r the diﬀer-
ences between dependency, delegation and resource acquisiti on pointed out
in section 3.5. As mentioned in that section, besides involving d ependency
between agents, delegation implies that the delegatee has ac tually agreed
to accomplish a goal or perform a task on behalf of the delegator . Thus, a
commitment is established from the delegatee regarding the de legator (or a
claim emerges from the delegator towards the delegatee). Th erefore, goal
and plan delegations leads to the establishment of AORML commi tments/-
claims between agents, usually depicted in interaction model ing, using one
or more types of AOR interaction diagrams. Resource acquisitio n is treated
analogously to goal and plan delegation, since as previously di scussed in
section 3.5, these concepts have similar nature. In other words, also in the
case of resource acquisition, an association link in the AOR Agent D iagram,
and a commitment/claim link are assumed to exist between the two agents
(the acquisitor and the acquisitee).
128 The ARknowD Methodology
Note that one of the most important constructs in Tropos, the conc ept of
‘goal’, is not mapped into AORML. This relates to the fact tha t ARKnowD
applies goal modeling exclusively for requirements elicita tion and analysis.
At design time, all goals have already been dealt with. Goals m ay have
been fulﬁlled or abandoned. But most commonly, goal analysis l eads to the
delegation of unsolved goals to new or old actors, who are eithe r part of the
organization or a new information system. And ﬁnally, concrete plans are
assigned to goals with the purpose of accomplishing them. Consequ ently,
when the design activity starts, plans should be modeled rather t han goals.
As observed in table 3.2, plan modeling may be done through the u se of AOR
interaction sequence diagram, which details the protocol of communication
between agents to realize a speciﬁc sequence of actions/intera ctions.
3.8 Working Example and Methodological
Guidelines
In this section, we present a simple example of the use of ARKnowD, w ith
the main purpose of illustrating the transformation between th e notations
of Tropos and AORML, as described in section 3.7.3. Here, a few mo deling
guidelines are also presented. More details on the use of the met hodology
are presented in chapters 4 and 5.
We ﬁnd the conference review process an appropriate scenario t o exem-
plify ARKnowD. First, this is a well-known setting for the acade mic com-
munity. Furthermore, it has been used elsewhere (Dignum, 2004 a), thus
enabling the comparison of our approach and notation with tho se of other
methodologies. Figure 3.16 presents a Tropos actor diagram, d epicting the
main agents of the scenario, along with some goal and resource de pendencies
between them.
The diagram of Fig. 3.16 shows that the scenario involves the pa rticipa-
tion of four agents, namely the Conference Chair , the PC Chair , the Paper
Author and the PC Member . For realizing the conference, the Conference
Chair depends on the Paper Author to submit papers that will be selected
Working Example 129
for presentation in the conference ( submitting paper goal). For this papers
selection, the Conference Chair delegates to the PC Chair the responsibility of
selecting the best papers to be published in the conference proc eedings ( se-
lecting proceedings’ papers goal). The PC Chair and the Paper Author have a
mutual relationship. While the PC Chair wants to acquire papers submitted
by the Paper Author (submitted paper resource), the Paper Author delegates
to the PC Chair the goal of having his paper reviewed as part of the papers
selection process ( having paper reviewed goal). However, the PC Chair does
not review all papers on his own. For that, he relies on PC Members (review-
ing papers goal). For accomplishing this goal, the PC Member must receive
the papers assigned to them ( assigned paper resource), along with the review
form ( review form resource) from the PC Chair .
PC Memberselecting 
proceedings’
papers 
reviewing 
papers assigned 
papers Conference 
Chair
PC 
Chair
review form submitting 
paper
submitted 
paper
having paper
reviewed 
Legend 
actordependee depender
goal dependency delegatee delegator
goal delegation acquisitee acquisitor
resource acquisition Paper
Author
Figure 3.16: Tropos actor diagram depicting main agents and dependencies
from the paper review scenario
Modeling is made on the level of ‘classes’ rather than on the leve l of
‘instances’, i.e. agents are depicted as PC Chair andPaper Author , instead
130 The ARknowD Methodology
PC MemberConference 
ChairPC Chair
Paper 
AuthorAssigned 
Papers 
Submitted 
PaperReview Form 
agent
object
directed association 
relation Legend 
Figure 3.17: AOR agent diagram automaticaly generated from previous Tro-
pos actor diagram
of providing their names. This aims at making the model more ge neral,
abstracting away from the details of one speciﬁc case. It is also a pparent
from the diagram depicted in Fig. 3.16 that cardinality is no t provided
in this model. For instance, there is only one PC Chair , while there are
several PC Members . However, the agent names are kept in singular form,
as representing the class of agents. Cardinality is subsequently presented in
AOR Agent Diagrams.
At this point, we can already exemplify the ﬁrst transformatio n. Figure
3.17 depicts an AOR Agent Diagram (AD) that can be automaticall y gen-
erated with basis on the goal diagram of Fig. 3.16, using the tra nsformation
rules described in table 3.2.
This ﬁgure depicts the agents and objects of the scenario, resp ectively
transformed from the Tropos agent and resource constructs in th e actor
diagram of Fig. 3.16. Besides the scenario’s entities, the diag ram also depicts
the relations between them, converted from the dependencie s, delegations
and acquisitions depicted in the previously presented Tropos a ctor diagram.
Working Example 131
Note that the relations are directed. The direction of the rel ations between
agents has been directly inferred from the directions of the dependency,
delegation and acquisition links on the actor diagram. Moreo ver, the number
of relations between two agents is given by the number of depe ndencies,
delegations and acquisitions between these agents. For instanc e, between
PC Chair andPC Member , there are three relations, corresponding to the
two acquisitions and one delegation previously depicted in Fi g. 3.16, and
following the same directions of such links. Regarding relatio ns between
agents and objects, the direction is always the same: the relat ion comes
from the agents to the objects. This is due to the fact that agen ts are active
entities, while objects are passive. Thus, agents usually ‘use’, ‘ send’, ‘receive’
objects, i.e. in this way, the relation can be more naturally n ominated using
the active voice.
Although this ﬁrst automatic AD is truthful to our scenario, some m odiﬁ-
cations may be necessary for enabling its best use in practice. Th is diagram
can then be revised and modiﬁed, given rise to the AD of Figure 3.1 8.
PC MemberConference 
Chair PC Chair 
Paper 
Author 
Paper 
Review Form sends receives 
registers review reviews 
fills-in <<communication>> 
distributes 
PaperNo 
Title 
Status 
Accepted 1
1..* 
1..* 11 1
11
1
** *
1..* 1..* 
1
1
*12..3 1..* <<communication>> 
<<communication>> 
relies on 
Figure 3.18: Final agent diagram
In the AD of Fig. 3.18, two objects from the previous AD, namely Sub-
132 The ARknowD Methodology
mitted Paper andAssigned Paper have been merged into the Paper object.
This comes from the realization that the previously depicted resources on
the Tropos actor diagram actually referred to the same object , in two dif-
ferent states (i.e. ‘submitted’ and ‘assigned’). Hence, the two o bjects have
originated a single one, and such state is now given by the status attribute in
thePaper object. Besides status, other three attributes now characteri ze the
Paper, namely: PaperNo , which identiﬁes the paper in the reviewing process;
Title, i.e. the title of the paper; and the true/false Accepted attribute, which
indicates whether the paper has been accepted for publicati on or not. In ad-
dition to that, multiple relations between agents have been reduced to one
(as a result of a choice made by the designer. In other situations, multiple re-
lations may be considered desirable, thus being maintained) a nd all relations
have been named. Finally, we have created a speciﬁc type of rel ation be-
tween the agents, named communication relation (note the communication
stereotype). Besides being related by associations, agents typi cally relate
through communication relations, which indicate that they i nteract to ac-
complish their goals. Typically, communication relations wi ll occur among
agents that previously delegated goals or tasks, or acquired re sources from
one another. This is due to the fact that for a delegation or an acquisi-
tion to occur, agent A must explicitly interact with agent B, e ither to ask
him/her to accomplish some goal or execute a task on his/her behal f, or to
acquire a resource controlled by agent B. Details about such in teraction are
not presented in ADs, but rather in interaction diagrams.
Note also that the diagram of Fig. 3.18 presents the cardinaliti es of all
agents and objects of the scenario. In the case depicted here, o nly associ-
ation relations are necessary among the scenario’s entities. In other cases,
generalization and composition relations may be necessary (see , for instance,
the case depicted in chapter 5). In general, all UML relations m ay be nor-
mally used in the AOR AD. This kind of diagram allows us to depict all
entities of the scenario, presenting a comprehensive view of th e domain be-
ing analyzed. The attribute of the other entities may be adde d as needed,
describing the relevant properties of the scenario. When desig ning an in-
formation system, this type of diagram is particularly useful. Rather than
Working Example 133
this one, which focuses on domain concepts, the AD is then used to d epict
entities that compose the system, both in terms of agents and obj ects. Some
of these objects represent information entities that are late r (on implemen-
tation time) converted into database tables or ﬁles to be read and written
by the agents of the system (Wagner, 2003). This kind of use for th e AOR
AD is exempliﬁed in chapter 6.
Proceeding with the analysis of the scenario, our next step is to specify
the individual perspectives of the scenario’s agents. For simpl iﬁcation, we
here choose to exemplify this for only one agent, namely the PC Chair.
Modeling the view of a particular agent is accomplished using t he Tropos
goal diagram. Hence, while Fig. 3.16 presents an overview of th e scenario,
Figure 3.19 focuses on the particular view of the PC Chair.
The goal diagram of Fig. 3.19 shows that the PC Chair has adopted the
selecting proceedings papers goal previously delegated to him by the Con-
ference Chair . At this point, we start reﬁning this goal into sub-goals and
analyzing which actual plans may be used to accomplish them. Th eselecting
proceedings papers is here decomposed in two sub-goals that should both be
accomplished (AND-decomposition) by the PC Chair , i.e. the having papers
reviewed anddeciding on paper’s acceptance goals. Further analyzing the hav-
ing papers reviewed goal, we note that the plan taking care of review is used
to accomplish it. Next, this plan is decomposed in two sub-plans f rom which
the PC Chair may choose one (OR-decomposition), namely the having paper
reviewed by three PC Members and the participating in paper review plans. If
the PC Chair decides do participate in the review of the paper , besides re-
viewing it ( reviewing paper plan), he must send it to two other PC Members
(having paper reviewed by two PC Members plan) Note that there are two
softgoals that should be analyzed to understand why, at times, on e choice is
made over the other. The PC Chair wants, at the same time, to keep a fair
load of work for him and the PC Members ( sharing workload well softgoal)
and to guarantee that the papers are fairly reviewed ( being fair softgoal). On
one hand, the sharing workload well contributes positively to the having paper
reviewed by three PC Members , since in this way, the PC Chair is sharing his
work with the PC Members. But on the other hand, the being fair softgoal
134 The ARknowD Methodology
being fairPC 
Chair
having papers 
reviewed deciding on 
paper
acceptance 
taking care of
reviews comparing reviews 
 and making 
final decision selecting 
proceedings’
papers 
review form submitted 
paper
PC 
MemberAORML ISD 
having paper
reviewed by three 
PC Members sharing 
workload well
participating in 
paper review +
+--
having paper
reviewed by two 
PC Members reviewing paper
reviewing 
papers reviewing 
papers filled-in 
review form 
means-end positive 
contribution negative 
contribution +Legend 
plan -
AND-decomposition actor's 
perspective OR-decomposition softgoal
Figure 3.19: Tropos goal diagram specifying the point of view of the PC
Chair agent
Working Example 135
contributes negatively to this plan, since by loosing control of the review,
the PC Chair is not a hundred-percent sure that the paper will b e fairly
reviewed (although by knowing the PC Members and their respec tive exper-
tise may give an idea about this). In addition to analyzing goal s and plans,
the diagram also shows the resources used in the plans, i.e. the submitted
paper andreview form . Finally, the delegations to the PC Member are also
included in this diagram. For executing the having paper reviewed by three
PC Members andhaving paper reviewed by two PC Members plans, the PC
Chair delegates to the PC Members the goal of actually review ing the paper.
And for performing the comparing reviews and making ﬁnal decision plan, the
PC Chair must acquire from the PC Member the review form, ﬁlled in with
the data from the paper review.
The diagram of Fig. 3.19 illustrates several analysis methods o f Tro-
pos, namely AND/OR-decompositions, means-end analysis andcontribution
analysis . By examining it careful, we are able to present a few importan t
guidelines. Decompositions, for example, are just allowed betw een entities of
the same type. For instance, as illustrated in the diagram, one g oal may be
decomposed into two goals, or one plan may be sub-divided into tw o plans.
Between entities of diﬀerent kinds, means-end and contributi on relations typ-
ically hold. However, we should note that semantically, these tw o relations
are diﬀerent. Means-end signify that an entity is actually used to achieve
another. This is typically depicted between plans and goals (i.e. plans are
means to achieve goals) and between resource and plans or resour ces and
goals (i.e. resources are used in plan execution or in goal acco mplishment).
Contribution between a plan and a goal, or between goals are a lso possible.
However, consider a plan contributing to a goal. In this case, a p lan is not
considered a complete strategy for accomplishing the goal, as i n the means-
end relation. Conversely, this plan partially accomplishes i t, i.e. provides
some sort of contribution for that goal achievement. In genera l, in a means-
end relation, the plan has been tailored speciﬁcally or has th e main purpose
of achieving that goal. This is not the case for contributions, where plans
that have other purposes may unadvisedly participate in goal a chievement.
Another common use of contribution is on the analysis of alterna tives, as
136 The ARknowD Methodology
exempliﬁed by the two softgoals presented in the previous acto r diagram. In
this case, goals may also be used instead of softgoals. For instance, a new
goal named ‘being on time’ could be included, showing that it c ontributes
positively for the PC Chair participation in paper review, wh ile providing
negative contribution to completely delegating it. In this case, the entity is
a goal, and not a softgoal because it has a clear-cut satisfaction criteria. In
other words, if the paper is reviewed before the review deadli ne has been
expired, this goal is satisﬁed. And otherwise, it is not. The prev ious two
goals (i.e. sharing workload well and being fair) are very subj ective, thus
the assessment regarding its satisfaction depends on the peculiar view of the
PC Chair. For this reason, they are softgoals.
Much controversy has surrounded the application of Tropos soft goals. In
ARKnowD, there are three possibilities for its use: a) adding a qu ality to
a goal; b) representing a goal for which a particular domain ag ent does not
have an objective criteria of assessment; or c) expressing a non-fu nctional
requirement of a system agent. The use expressed by a) refers to an a dd-on
to a goal. For instance, a ‘fairly’ softgoal could be attached t o the deciding
on paper acceptance goal of Fig. 3.19. This qualiﬁes that particular goal,
reminding us that the PC Chair has this in mind while aiming at that goal.
As an alternative, we could embed the adverb in the previously d eﬁned
goal, generating the fairly deciding on paper acceptance softgoal. These are
two ways of saying the same thing. Softgoals may also resemble a go al, not
containing any speciﬁc adjective or adverb in its description . However, as
indicated in b), if there is no objective criteria for assessing i ts satisfaction, it
should still be represented as a softgoal. Finally, as reminded i n c), softgoals
are typically used for representing non-functional requirem ents of a system,
such as ‘security’, ‘high performance’, and the like. In gener al, softgoals are
constructs more present in the initial analysis of the scenario a nd system re-
quirements. Their natural tendency is disappearing, or at lea st being related
to goals that accomplish them. Even softgoals representing non -functional
requirements shall have objective counterparts that actual ly realize such fea-
ture in practice. For example, as soon as a security mechanism is speciﬁed
for a system, a ‘security’ softgoal may be achieved by a goal repre senting
Working Example 137
this mechanism (means-end relation).
In Tropos, there is an important semantic distinction between r esource
acquisition, goal delegation and plan delegation, each one h aving its own
particular application (analogously, this diﬀerence also ho lds for goal, plan
and resource dependency). A resource acquisition characteriz es a situation
in which an agent A needs a speciﬁc resource owned or controlled by an
agent B in order to accomplish a goal or execute a plan. This is i llustrated
by the acquisition link depicted in Fig. 3.19 between the PC Chair and
thePC Member , representing that the former needed to obtain the ﬁlled in
review form from the latter. As indicated in the diagram, this resource is
speciﬁcally needed to enable the PC Chair to execute the comparing reviews
and making ﬁnal decision plan. Besides this resource acquisition link, this
diagram exempliﬁes the use of goal delegations. This type of de legation
refer to cases in which the accomplishment of one of the goals of agent A
is conditioned to the accomplishment of a goal of agent B. In th is case,
agent A does not care about how such goal of agent B is achieved, leaving
this decision to agent B. Conversely, the situation in which age nt A wants
agent B to follow a speciﬁc procedure characterizes a plan del egation. In
other words, in plan delegation, agent A (the depender) speciﬁ es how agent
B (the dependee) should act. As mentioned in section 3.5, goal an d plan
delegations refer to what (Castelfranchi and Falcone, 1998) respectively calls
openandclose delegation.
The previous goal diagram also includes a reminder that each o f the plans
can then be speciﬁed in more details using an AOR Interaction Se quence Di-
agram (ISD) (the other two types of AOR interaction diagrams may also be
used to clarify some speciﬁc issues, as exempliﬁed later in this cha pter). The
choice for which of the plans to detail and when is the responsib ility of the
analyst/designer. In any case, there is an important observatio n to be made
here. In Tropos, plans could be indeﬁnitely reﬁned. For instan ce, the having
paper reviewed by two PC Members plan could be reﬁned into three sub-plans,
such as: choosing the two best PC Members to review the paper ,submitting the
paper to the PC Members ,reinforcing the review deadline . However, in AR-
KnowD, we advise the analyst to keep the granularity of the plan s in a level
138 The ARknowD Methodology
where it can be then speciﬁed using AORML. This guideline is mot ivated
by our realization that the AOR interaction diagrams are mor e appropriate
than the Tropos goal diagram for modeling interactions. For i nstance, the
ISD models agent’s actions and communications events, beside s also includ-
ing non-action (or environment’s) events, and commitments be tween agents.
As an illustration, Figure 3.20 depicts an ISD that serve both to thehaving
paper reviewed by two PC Members andhaving paper reviewed by three PC
Members plans.
Lia: PCC
deadline
Submission
selectReviewers
paperNo=21
ListPCM=[John, Beth, Rose, Ben…]
assignPaper
paperFile=smithetal.pdf
reviewFormFile=review.txt
ReviewPaper
paperFile=smithetal.pdf
reviewFormFile=review.txt
sendReviewPaper
reviewFormFile=review21.txtReviewPaperackPaperReceived
sendReviewPaper
reviewFormFileC
DBeth: PCM
Figure 3.20: AOR Interaction Sequence Diagram
In the diagram of Fig. 3.20, the agent’s interactions are tri ggered by a
non-action event (i.e. part of the environment, independen t of the agents).
More speciﬁcally, the deadline for paper submission has come ( dealineSub-
mission event). When Lia, the PC Chair (PCC) senses this, she starts dis-
tributing the papers to the PC Members. For reasons of space and si mplicity,
only one PC Member is depicted in this diagram. However, the in teraction
with other PC Members is analogous to the one exempliﬁed here . Lia’s
ﬁrst action is selecting the right reviewers for the paper, base d on the area
Working Example 139
targeted by the paper and on what she knows about the expertise o f the
reviewers (note that the SelectingReviewers action receives two parameters,
the paper, identiﬁed by its number, and the list of available r eviewers). Hav-
ing identiﬁed that Beth is a good PC Member (PCM) to review the paper
number ‘21’, Lia submits the paper ﬁle, along with the review f orm to Beth
(assignPaper message with paperFile andreviewFormFile parameters). Next,
Beth acknowledges that she has received the message. At this poi nt, Beth is
committing to review the paper assigned to her ( ReviewPaper commitment).
Note the line coming from the acknowledgment message to the comm it-
ment, annotated with a “C”, indicating the commitment has be en “created”
by that message. For Beth, a commitment refers to a speciﬁc actio n to be
performed in due time, i.e. reviewing the paper. For Lia, thi s construct
actually represents a claim regarding a speciﬁc action that sho uld happen in
the future. Note that the ReviewPaper commitment has a message attached
to it (i.e. a sendReviewPaper message), indicating that this commitment is
fulﬁlled if Beth submits a message of this kind to Lia. Otherwise, this com-
mitment is broken, giving Lia the right to sanction. Fortunat ely, in this case,
Beth has fulﬁlled her responsibility, sending back the review f orm, ﬁlled in
with the paper review ( sendReviewPaper message sent by Beth to Lia). Note
the line coming from the message to the commitment, annotated w ith a “D”,
which stands for “discharge” (i.e. the message discharges the com mitment).
The commitment between Lia and Beth reﬂects the delegation b etween PC
Chair and PC Member, depicted in the actor diagram of Fig. 3.1 6. As in-
dicated in the transformation rules of table 3.2, Tropos dele gations lead to
the establishment of AOR commitments.
Although the AORML notation diﬀers from UML, it does make use of
various UML constructs. In fact, whenever AORML does not provid e ex-
tensions, UML can be normally applied. Note for example that like UML,
instances names are underlined (see the agents’ and messages’ name s) while
class names are not (e.g. PCC and PCM, respectively representin g the PC
Chair and PC Member agent classes). Note also that the name of the ag ent
instances are followed by the name of their classes (e.g. ‘Lia : PCC’). Diﬀer-
ently from UML, though, ISDs show interactions among agents. Th us, the
140 The ARknowD Methodology
semantics of the message construct is diﬀerent. In object-orien ted program-
ming (and thus, in UML), a message typically refers to a method cal l. As
previously mentioned in section 2.4, agents have control over their behav-
ior, being requested to perform actions. Consequently, agents communicate
usingspeech acts , which specify a sender, a receiver, a illocutionary act or
performative (such as ‘request’, ‘inform’ and so on), and a messag e content
(Labrou et al., 1999). For example, the assignPaper message represents a
request, in which Lia is the sender and Beth is a receiver, and th e content
is given by the parameters of the message.
The greatest innovation in this diagram is given by the possibil ity of
deﬁning and controlling commitments established between two agents. Ac-
cording to the AORML author Wagner (2003, 11), “commitments and claims
are fundamental components of social interaction processe s. Consequently,
a proper representation and handling of commitments and cla ims is vital
for automating business processes.” And indeed, other researchers on agent
organizations have acknowledged this concern, if not direc tly representing
commitments/claims, relying on the related deontic concepts of obligations,
rights and responsibilities (Dignum, 2004a) (Esteva et al., 20 02) (Hubner
et al., 2002). In the case modeled in Fig. 3.20, the commitment serves
to regulate the relationship between two human agents. However , commit-
ments established between artiﬁcial agents are also highly usef ul. They may
indicate for the information system designer an important poin t for excep-
tion handling. In addition to that, such constructs are especia lly indicated
for cases in which a commitment exists between two agents devel oped by
diﬀerent parties, as in open systems developed via Internet, fo r traditional
or virtual organizations. In this case, the services provided b y external ven-
dors can be regulated by contracts established by the commitme nts between
agents. For a case in which AORML supports the design of a KM system us-
ing agents external to the organization, please refer to (San tos et al., 2005a)
and (Santos et al., 2005b).
The delegation and acquisition links earlier depicted in Tro pos give rise
to commitments when the system is designed in further details. In general,
in the early stages of the analysis activity, only a ﬂavor of the relations exist-
Working Example 141
ing among agents is captured, leaving the deﬁnition of commi tments/claims
for later design activities. Then, the commitments/claims are completely
modeled, along with the actions that may fulﬁll them, and the applied sanc-
tions in case they are not fulﬁlled. The choice for diﬀerent le vel of details,
supported by the diversity of concepts (in analysis, delegation and acquisi-
tion; in design, commitment/claim) provides the right level of abstraction
for each activity. On one hand, in the analysis, details are ove rlooked and
the analyst may focus on the big picture. On the other hand, dur ing design,
the designer is able to capture all details that lead to system au tomation.
As it becomes apparent from Fig. 3.20, an AOR ISD models (some pa rt
of) a prototypical instance of an interaction process. An intera ction process
is a sequence of action and non-action events, performed and pe rceived by
agents. A protocol deﬁnes a particular sequence of action and n on-action
events. For example, deadlineSubmission is a non-action event, i.e. an event
generated in the environment and perceived by the agent, Lia in this case.
Both selectReviewers andassignPaper are action events, the latter being a
communicative action event. To understand better the relati ons between
agents and events events (including action and non-action e vents), one may
refer back to the ontological distinctions discussed in section 3 .5.
ISDs are generally made for several prototypical situations, t o give the
analyst/designer a clear idea of the possible outcomes of the age nt’s inter-
actions. So, an alternative diagram to the one previously shown could be
created, showing a case in which the PC Member fails to deliver t he review
of the paper, breaking the commitment established between him and the
PC Chair. The alternative diagram could hence model the conse quence of
this break of contract, both to the PC Chair and the PC Member. In that
case, the PC Chair could send a reminding message, as we will model in a
moment, using another kind of AOR diagram (Figure 3.21). And af ter all, if
the PC Member still fails to send the review, the PC Chair would t ypically
have to review the paper himself. At the same time, the PC Member could
receive a complaint message, or he could be annotated by the PC C hair as
someone not to invite for program committees of future confer ences.
The ISD speciﬁcally deals with agent’s external actions and i nteractions,
142 The ARknowD Methodology
but it does not concern how the agents behave internally. Thi s may be
important in diﬀerent points of the analysis or design activit y. AORML
provides a special diagram to model internal behavior of agen ts, typically
triggered by action or non-action events. This diagram is nam ed Interaction
Pattern Diagram (IPD), illustrated in Figure 3.21.
PC Chair
<<belief>> 
PaperPC Member
deadlineReview 
askPaperReview 
paperNo R1 
Figure 3.21: AOR Interaction Pattern Diagram
The diagram illustrates the PC Chair’s behavior when the dead line for
reviewing papers is achieved. The deadlineReview event triggers the R1rule,
representing the PC Chair’s reactive behavior. This rule reg ards the veriﬁ-
cation if the papers have been revised or not, and may be writte n as shown
in table 3.3. In case the paper has not yet been reviewed (indic ated by the
crossed line coming from the rule R1, the PC Chair submits a message to
the PC Member that missed to send the review for the given paper ( askPa-
perReview message).
As can be noted in the diagram of ﬁg. 3.21, a reaction rule is visu alized as
a circle with incoming and outgoing arrows drawn within the a gent rectan-
gle whose reaction pattern is represented (the PC Chair , in this case). Each
reaction rule has exactly one incoming arrow with a solid arro whead, speci-
fying the triggering event type. In our case, the agent’s reac tion is triggered
by the deadlineReview event. Other ordinary incoming arrows representing
state conditions (referring to corresponding instances of oth er entity types),
Automated Support 143
ON Event Perceive deadlineReview
IF Condition IsReviewed(?PaperNo) <>TRUE
THEN Action SEND askPaperReview(?PaperNo)
TO ?PC Member
Table 3.3: Textual description of the rule R1 representing the PC Chair’s
reactive behavior
as the arrow coming from the Paper belief object class. There are two kinds
of outgoing arrows: one indicating the performance of (eithe r physical or
communicative) actions and one for specifying mental eﬀects (changing be-
liefs and/or commitment) resulting from the execution of the rule. In our
example, only the former is illustrated, with the connector t o the askPa-
perReview message. The latter (an arrow with a double arrowheaded) is
exempliﬁed at (Wagner, 2005).
Besides ISDs and IPDs, AOR still oﬀers a third possibility with the In-
teraction Frame Diagrams (IFDs). An AOR IFD gives a static view o f
the possible interactions between two (types of) agents witho ut modeling
any speciﬁc process instance. It consists of various types of comm unicative
action events, non-communicative action events, commitment s/claims (cou-
pled with the corresponding types of action events), and non-a ction events
(Wagner, 2003). Figure 3.22 presents such kind of diagram, dep icting all
interaction possibilities between the PC Chair and the PC Memb er.
The diagram of Fig. 3.22 presents all messages exchanged by the P C Chair
and PC Member in the two previous diagrams, besides the commitm ent
established between them in the ISD of Fig. 3.20. This summary pr esents
an overview of their interaction and is typically interestin g between two
artiﬁcial agents, because it clearly indicates the interface between them,
facilitating coding.
3.9 Automated Support
One of the main advantages of using existing work on agent-orie nted ap-
proaches comes from proﬁting from the already available mod eling tools
144 The ARknowD Methodology
askPaperReview 
paperNo PC Member
assignPaper
paperFile 
reviewFormFile 
ReviewPaperackPaperReceived 
sendReviewPaper
reviewFormFile PC Chair
Figure 3.22: AOR Interaction Frame Diagram
developed to support such approaches. In this respect, there are several
tools available to support Tropos modeling such as:
1. GR Tool3: provides particular support to goal analysis. In this tool,
the goals of an agent are designed, and values that refer to the satis-
faction or denial of the goals are established. Given these valu es, the
tool supports both qualitative and quantitative relationshi ps between
goals, and can be used to perform two types of analysis. The ﬁrst
type (forward reasoning) answers questions of the form: Given a goal
model, and assuming that certain leaf goals are fulﬁlled, are a ll root
goals fulﬁlled as well? The second type of analysis (backward r eason-
ing) solves problems of the form: Given a goal model, ﬁnd a set of leaf
goals that together fulﬁll all root goals.
2. T-tool4: allows the analyst to check the consistency of his/her mod-
els, by applying a formal speciﬁcation language named Formal T ro-
pos. This language supports the primitive Tropos concepts, but oﬀers
in addition, a rich temporal speciﬁcation language inspired b y KAOS
3http://sesa.dit.unitn.it/goaleditor/
4http://www.dit.unitn.it/ ˜ft/fttool.html
Automated Support 145
(van Lamsweerde et al., 1991). Besides verifying model’s consi stency,
T-Tool allows checking whether it respects a number of desired prop-
erties. Moreover, a speciﬁcation can be animated in order to gi ve the
user immediate feedback on its implications.
3. TAOM4E5: targets a comprehensive agent-oriented modeling environ-
ment, supporting the analysis and design of agent-oriented syste ms.
Its development has taken MDA recommendations into account . At
the present development stage, TAOM4E mainly supports the Trop os
modeling language. However, there have been some parallel ini tiatives
of integrating AORML and AUML, allowing the analyst and designe r
to proﬁt from transformations between Tropos and one of these t wo
UML-based modeling languages. The integration of new language s is
facilitated by the choice of developing TAOM4E as an Eclipse p lug-
in. Eclipse6is an open source initiative that allows the integration of
diﬀerent tools into a single application.
At the moment, design using AORML is made possible by using a Mi-
crosoft Visio Template7. However, in the future, it is desirable to have a
tool dedicated to AORML, or one that includes it as a possible mo deling lan-
guage. To this end, we have launched an initiative to integra te AORML in
TAOM4E. In this work, we apply the MDA transformation method d escribed
in section 3.7.1. More speciﬁcally, we have developed the tran sformation be-
tween a Tropos actor diagram into an AOR Agent Diagram, follow ing the
transformation rules depicted in table 3.2.
This work has been allowed by the use of Tefkat8. Tefkat is a proto-
type transformation engine developed by the Distributed Tech nology Centre
(DSTC) of the National IT Research and Development Center in Aust ralia.
As TAOM4E, Tefkat has been developed as an Eclipse plug-in, whi ch facil-
itates its integration with this given agent-oriented mode ling environment.
Figure 3.23 illustrates this integration.
5http://sra.itc.it/tools/taom4e/
6http://eclipse.org/
7available at http://www.informatik.tu-cottbus.de/˜ gwagner/AORML/
8http://www.dstc.edu.au/Research/Projects/Pegamento/tefkat/
146 The ARknowD Methodology
ECLIPSE 
TEFKAT Tropos Model AORML ModelTransformation Engine Tropos Metamodel
AORML Metamodel
TAOM4E
Figure 3.23: Transformation engine
Fig. 3.23 shows that for executing a transformation, Tefkat re ceives as
input the metamodels of the two modeling languages (i.e. the metamodels
of the Tropos language and AORML), along with the source Tropo s model
developed with the use of TAOM4E. The mapping between the two m eta-
models is directly implemented using Tefkat’s declarative l anguage. The
result is an AORML model, as indicated in Fig. 3.23. The integr ation
of Tefkat and TAOM4E is facilitated by their both being imple mented on
top of Eclipse, thus being compatible with the Eclipse Modelin g Frame-
work (EMF). Listing 3.1 gives an idea of the declarative langu age applied in
Tefkat.
Following, we exemplify the transformation of the Tropos act or diagram
of Fig. 3.16 into the AOR agent diagram of Fig. 3.17, using the i mplemented
transformation plug-in. Figure 3.24 shows the given actor mod el, designed
with the support of TAOM4E9.
Fig. 3.24 shows that, for executing a transformation, you righ t click with
the mouse on the Tropos diagram ﬁle and select Tefkat . At this point, the
transformation is automatically executed, generating the XM I ﬁle depicted
in Figure 3.25.
9As TAOM4E does not support the diﬀerentiation between delegation, dependency
and acquisition adopted in ARKnowD, we here designed the diagram using the existing
dependency construct. However, this does not result in any problem regarding our exem-
pliﬁcation, as for the three types of relations, an association link is included in the AOR
AD.
Automated Support 147
Listing 3.1: Tefkat’s declarative language
TRANSFORMATION LinkingTropos2AORML: tropos -> aorml
IMPORT http://aorml.ecore
IMPORT http://taom4e/model/informalcore.ecore
CLASS ActorForAgent{
FActor actor;
Agent agent;
};
CLASS ResourceForObject{
FResource res;
Object obj;
};
CLASS DependencyForAssociation{
FDependency dep;
DirectedAssociation dass;
};
RULE Actor2Agent()
FORALL Actor at
MAKE Agent ag
SET ag.name = at.name
LINKING ActorForAgent WITH actor=at, agent=ag
;
By analyzing Fig. 3.25, we note that such XMI ﬁle corresponds to t he AD
of Fig. 3.17. We note that there are three agents correspondin g to the agents
of the previously modeled actor diagram. Besides, the previousl y depicted
resources have been converted into three objects, presented in this ﬁle. And
ﬁnally, all dependencies between agents in the Tropos actor diagram have
been converted into directed associations between agents, or b etween an
148 The ARknowD Methodology
Figure 3.24: Actor diagram designed in TAOM4E
Figure 3.25: Transformation output ﬁle
Related Work 149
agent and an object. The visualization of the graphical AD resul ting from
this ﬁle has not yet been developed in TAOM4E and remains futu re work.
3.10 Related Work
ARKnowD has emerged from the combination of two previous work di-
rected towards the proposal of an agent-oriented methodolog y supporting
KM, i.e. those of Perini et al. (2004) and Guizzardi et al. (200 4a). The for-
mer supports the use of agents to model organizational processes, proposing
a methodology for analyzing KM requirements based on intenti onal analy-
sis, claiming that, in order to develop eﬀective KM solutions, it is necessary
to analyze the intentional dimension of the organizational se tting, i.e. the
interests, intents, and strategic relationships among the agent s of the orga-
nization. Their methodology is based on the use of the i* framew ork (Yu,
1995), the same used as a basis for the development of the Tropos m ethod-
ology. In our approach agent-oriented modeling is proposed a s one of the
techniques supporting a more complex analysis process that lea ds to a de-
sign activity, not targeted in their initiative. Moreover, h aving adopted the
Tropos methodology allows using a more clear agent-oriented semantics of
i* elements, which enables a smooth transition to our design appr oach. In
(Guizzardi et al., 2004a), we have proposed the use of AORML for KM
analysis and design, in the context of collaborative learning . Although we
acknowledge the possibility of using AORML in domain modeling, we feel
that this language lacks the concepts and constructs to suppor t require-
ments analysis. As motivated in chapter 2, supporting KM depends on a
clear understanding of the scenario, where requirements anal ysis comes as
an essential step. In general, modeling with AORML starts with in forma-
tion modeling (like in UML class diagrams), jumping over the req uirements
analysis step. A common proposal for these initial activity is th e use of UML
Use Cases, however, we claim that our approach is more appropriat e for fo-
cusing on goals, supported by the emphasis given by Nonaka and Take uchi
(1995) on intention (i.e. goals) as the basis of any KM project.
150 The ARknowD Methodology
Dignum (2004a) describes two case studies of the application of OperA to
support KM scenarios. In this same work, the author claims that th e needs
of such scenarios has been the main motivator for OperA’s proposa l. This
stems from the recognition that, like multi-agent systems, KM en vironments
can be seen as distributed systems where diﬀerent actors, each pur suing its
own goals, need to interact in order to achieve common targets and realize
organizational objectives. Agents are considered appropriat e for being en-
dowed with social skills that comply with the needs to model the complex
interaction and negotiation processes that characterize such environments.
Moreover, agents are able to proactively change to cope with changes in this
highly unpredictable business setting. In our work, we share the se opinions,
besides the use of similar concepts, such as agents, roles and goals. However,
the modeling constructs applied are completely diverse, for i nstance, while
OperA makes uses of scene scripts and provides a sound formal foun dation
based on temporal deontic logic, our proposal is much less forma l, aiming
at the support of the speciﬁcation of KM environments through t he use of
a graphical language.
Related work may also be found in (Loucopoulos and Kavakli, 19 99),
where the authors propose a conceptual modeling approach to su pport en-
terprise KM. This work shares many similarities to ours. It also pr oposes
the analysis of the goals of the stakeholders, allowing the estab lishment of
dependencies and support relationships, which are similar to wh at Tropos
refers to as contribution. It also assigns processes as goal opera tionalization,
as in ARKnowD (starting by the deﬁnition of plans to fulﬁll goal s, and then
its description with AOR interaction diagrams). However, besid es goal, re-
source and activity dependency (this last one being analogous to Tropos plan
dependency), their approach models diﬀerent kinds of depen dency, such as
authority dependency and coordination dependency. Another divergence is
that for them, the process of acquiring and maintaining knowl edge refers to
the structure and processes underlying the targeted organizat ion. The au-
thors focus on eliciting and representing this knowledge in a sort of business
process analysis. Rather than a KM systems, the result of this analysi s is the
proposal of an information system to automate the organization ’s processes.
Conclusion 151
Finally, the CommonKADS methodology has been recently propo sed as
a solution for KM settings (Schreiber et al., 2000). This metho dology has
an agent-oriented counterpart, namely the MAS-CommonKADS, e arlier de-
scribed in section 2.4.2. The CommonKADS approach consists of a re -
quirements speciﬁcation activity, focused on the constructio n of ﬁve models:
organization, task, agent, knowledge andcommunication models , each one
analyzing diﬀerent aspects of the system-to-be. This is follow ed by a design
activity, which deﬁnes the technical system speciﬁcation in te rms of archi-
tecture, implementation platform, software modules, represe ntational con-
structs and computational mechanisms needed to implement the functions
speciﬁed in the knowledge and communication models. The main d iﬀeren-
tiation between our approach and CommonKADS is that this meth odology
has been speciﬁcally built to develop knowledge-based systems, a s the expert
systems previously described in section 2.2.2. As a result of this kn owledge
engineering orientation, this approach places great streng th on the business
process (task and communication models) and knowledge artifac ts models
(knowledge model), giving less attention to the agents execu ting such pro-
cesses and producing such artifacts. Agents are merely focused in t he agent
model, in which scripts are built indicating the knowledge, p rocesses, re-
sponsibilities and constraints of each agent.
3.11 Conclusion
This chapter has described the ARKnowD methodology, along wit h its no-
tation, activities and scenarios of applicability. For the m ain purpose of
supporting KM, ARKnowD combines two distinct agent-oriented so ftware
engineering approaches, namely Tropos and AORML. For mergin g the two
notations, we proposed a MDA-inspired transformation method, pa rtially
implemented in an agent-oriented CASE tool named TAOM4E, cur rently
under development. In this chapter, we also focused on clarify ing the se-
mantics of the applied agent-oriented concepts, formalizin g them with the
means of an ontology. This same ontology is used for evaluating and assist-
ing a consistent merge of the adopted notation. Furthermore, w e provided
152 The ARknowD Methodology
a few modeling guidelines, supported by a working example that illustrates
the application of ARKnowD.
One of the main principles of ARKnowD is the realization that t here is no
silver bullet when pursuing an agent-oriented engineering me thodology, so
the best approach is combining existing work according to the g iven domain
or situation. This tendency for comparing and combining exist ing method-
ologies has been already noted in the agent community (Dam an d Winikoﬀ,
2003) (Bernon et al., 2004) (Juan et al., 2003) (Juan et al., 2 004) (Sabas
et al., 2002), expressing that work in this area has matured in t he past few
years. Speciﬁcally for KM scenarios, we have found the combinat ion of Tro-
pos and AORML quite appropriate, for the reasons previously sta ted. The
combination of these and other approaches for the applicatio n in diﬀerent
domains is an interesting work that should shed new light in this direction.
One important claim of our work is that more focus should be giv en to the
initial phases of system development, aiming at grasping the req uirements
for an appropriate solution, both in terms of the individual p erspective of the
organizational members and the overall objectives of the or ganization. This
is especially important in the KM context, which focuses on the eﬀective
use of human intellectual capital, since much of human knowled ge is tacit
and intangible (Nonaka and Takeuchi, 1995). Moreover, issues su ch as com-
munity and community’s practices (Wenger, 1998) go much bey ond those
typically considered in the conception of traditional systems, and opens up
many more ways to leverage information technologies to augm ent human
and organizational capabilities and performances.
The methodology proposes the analysis of the goals of the system’ s stake-
holders and their inter-dependencies as the initial steps to wards understand-
ing the requirements for a KM system. The main strengths of this a pproach
can be summarized as anticipating the concerns of all partici pants of a given
scenario, focusing on the stakeholders’ aims while abstracting f rom unim-
portant issues, until the domain is well understood and the analy st is ready
to propose a solution (either by changing organizational struc ture, current
processes, or by applying technology). Nevertheless, a consistent m ethodol-
ogy should be provided, going beyond the analysis and moving to wards the
Conclusion 153
design of this solution. In this sense, ARKnowD allows agent’s cog nitive
concepts such as beliefs and commitments to be designed and lat er materi-
alized in practical elements of a system. Here, we particularly rely on a clear
model of the entities of the scenario and their relations, and t he detailed de-
scription of their interaction and behavior. The adopted not ation allows the
combination of agents and objects in a single model, which is p articularly
suitable for KM settings. In this respect, knowledge artifacts a re represented
as objects, and the stakeholders as human agents. If an informat ion system
is proposed, the system itself can also be composed of multiple agen ts, which
manipulate diﬀerent objects in order to mediate the processes of knowledge
creation, integration and sharing. In the end, objects that r epresent both
elements of the scenario and agent’s beliefs turn into inform ation entities
materialized by database tables or XML ﬁles, for example. Meanw hile, the
modeled agents are turned into the actual code of the given syst em.
More can be understood about the use of ARKnowD in the following
chapters. Chapter 4 illustrates the application of the requir ements analy-
sis methodology, culminating with the proposal of a recommend er system
named KARe. This system is further designed in chapters 5 and 6, th e for-
mer focusing on a platform independent design while the latter provides a
speciﬁcation of this design for the JADE framework.
154 The ARknowD Methodology
Chapter 4
Domain and System Analysis
“Try to put well in practice what you
already know. In so doing, you will,
in good time, discover the hidden
things you now inquire about.”
Rembrandt
This chapter presents the analysis of a ﬁctitious scenario speci ﬁcally tai-
lored based on available KM literature, to serve as a case study in this
thesis. Here, we present the analysis of the scenario’s organizati on, eliciting
the requirements for KM support, especially focusing on the dev elopment of
a supporting Information System. The main objective of this an alysis is to
show the usability of Tropos for the early stages of KM Systems dev elop-
ment, as proposed by ARKnowD.
The chapter is organized as follows: section 4.1 introduces th e chapter;
section 4.2 presents the scenario used as our case study; section 4.3 starts
the analysis, presenting the ﬁrst Tropos’s diagrams made with basi s on the
case study; from section 4.4 to section 4.8 develops the remainin g of our
analysis, presenting in each section, a model made with basis on a r elevant
aspect of our case study, taking the perspective of the diﬀerent a gents of
the scenario; section 4.9 provides some reﬂections on how the an alyzed or-
ganizational setting supports Constructivist KM; section 4.10 d iscusses the
requirements for a system to support Constructivist KM in the scena rio, and
ﬁnally, section 4.11 presents the conclusions of this chapter.
155
156 Domain and System Analysis
4.1 Introduction
Knowledge Management scenarios are highly inﬂuenced by thei r human di-
mension, involving intricate relationships among diﬀerent a gents, along with
their personal motivations and abilities, and guided by norms and behav-
iors that are part of the organizational culture. However, mo st of current
KM systems are developed following a purely techno-centric vi ew (Pumareja
et al., 2003) (Bonifacio and Bouquet, 2002), focusing on the f unctionality of
the system under development rather than on the real needs and w ishes of
the stakeholders. Such approach is bound to fail, as it does not consider the
particularities of the environment in which the system is to be used.
As a solution to the mentioned problem, we claim that more focus should
be given to the initial phases of system development, aiming at g rasping the
requirements of the system to be, by deeply understanding the str ucture of
the targeted organization. This analysis should consider both the overall
objectives of the organization and the individual perspecti ve of organiza-
tion’s members. This allows the creation of a rich conceptual framework,
allowing the analyst to make a clear connection between the fu nctional and
non-functional requirements of the system-to-be, according to relevant stake-
holders and their intentions (Giorgini et al., 2005).
Currently, a methodology for KM requirements analysis in the available
literature of both agent-oriented software engineering and organizational sci-
ence does not exist. On the agent-oriented software engineeri ng side, most
of available methodologies for system requirements analysis a re based on a
clear statement of requirements. In other words, they often app ly methods
to capture requirements, such as use cases, but do not provide a mea ns to
elicit or negotiate the requirements among the stakeholders. As argued in
section 2.6, in a complex KM scenario, it is necessary to analyze t he current
situation, trying to grasp which processes should be changed to ac commo-
date new KM practices and systems, besides eliciting the require ments of
the system itself. This is especially true in case we aim at supporti ng Con-
structivist KM, in which organizational members of diﬀerent f unctions and
hierarchical levels should be consulted about their own goals and require-
Fictitious Scenario 157
ments. On the other hand, initiatives from the area of organiz ational science
are usually based on interviews and observations of agents of th e diﬀerent
organizational units, gathering their diﬀerent points of vi ews, critics and
suggestions. However, such studies are rarely supported by a modeli ng lan-
guage to allow reasoning and communication about the problem domain.
Consequently, the analysis conclusions are highly subjective a nd based on
the researcher’s personal experience.
The methodology exempliﬁed here allows diﬀerent analysis me thods, such
as understanding trust, commitments and vulnerability in the relationships
between agents, and grasping the ’hows’ and ’whys’ of a particula r choice
(Bresciani et al., 2004). For this purpose, the methodology pr oposes the
analysis of the goals of the system’s stakeholders and their inte r-dependencies
as the initial steps towards understanding the requirements o f a KM system.
The main strengths of this approach can be summarized as antici pating the
concerns of all agents involved in a given scenario, focusing o n the stake-
holders’ aims while abstracting from unimportant issues, until t he domain
is well understood and the analyst is ready to propose a solution ( either
by changing current organization’s structure and processes, or by applying
technology). In addition to that, the adopted notation is vi sually rich and
accessible, besides being supported by existing modeling tools ( Perini and
Susi, 2004).
The models described in this chapter are the result of an iterat ive process
and have been reﬁned after several analysis cycles, as proposed i n section
3.3. Diﬀerent stages of this analysis have been ealier presente d in (Guizzardi
et al., 2003) (Guizzardi et al., 2004b) (Guizzardi and Perin i, 2005).
4.2 Knowledge Management in CoPs:
a Fictitious Scenario
In order to demonstrate our proposed methodology, we use here a ﬁ cti-
tious scenario. Although not a real case study, this scenario has b een care-
fully tailored to be realistic, taking into consideration the available literature
158 Domain and System Analysis
(Dignum and van Eeden, 2003) (Gongla and Rizzuto, 2001) (Wen ger, 1998)
(Orlikowski, 1992a) (Pumareja et al., 2003).
Luca starts working in BHI Software Company. He is a programme r with
10 years of experience. As a newcomer at BHI, he needs to adjust to the
organization’s work practices. This involves integrating to the project on
which he is going to work, and adapting to the work style of his w orking
team. Furthermore, it also includes learning about the comp any’s policies
and management directives.
Aiming at providing its workers with a rich environment for k nowledge
sharing, BHI Management fosters the development of Communi ties of Prac-
tice (CoPs) across the organization. These communities are self-organizing
groups whose members share interests and goals, or perform simi lar tasks
within the organization. They are not necessarily from the s ame working
team or division, and their members are dispersed across the 10 branches
of BHI. The CoPs play an important role in allowing newcomers t o get ac-
quainted with their new working environment, naturally lea rning about prod-
ucts, projects, speciﬁc domains, and procedures.
Luca decides to join a CoP named ‘OpenS’, which focuses on und erstand-
ing how open source software can be used to support the develo pment of BHI
products. Though the communities are self-organizing syste ms, a special sec-
tor within the company was created to support them: the Knowl edge Man-
agement Division. One of the main objectives of this divisio n is supporting
the CoP on pursuing explicit targets related to the organiza tion’s goals. This
allows the community members to feel important as a group for t he organi-
zation at the same time that the CoP’s value is more concretel y measurable
from the Management’s point of view. In addition to that, thi s division also
provides information about the active CoPs that are open for new member-
ship, in order to facilitate the integration of newcomers in the organization.
The Domain Stakeholders 159
4.3 The Domain Stakeholders
According to the Tropos methodology (Bresciani et al., 2004), domain anal-
ysis starts by identifying the main stakeholders, modeled as age nts, with
their goals. Figure 4.1 shows an initial model where the BHI comp any top
management is modeled as the agent Management , depicted as a circle. The
organization has an initial softgoal relative to having the o rganization’s team
working well1, which expresses how BHI intends to achieve more general
objectives such as pursuing high quality of the products and of the pro-
duction processes ( pursuing high quality products/processes goal), as well as
innovation ( innovating goal) by considering human resources as a main asset.
The BHI’s Knowledge Management Division and the communities w ithin
the organization play critical roles with respect to BHI strate gic goals, ac-
cording to the scenario, so they are also modeled as speciﬁc agent s, namely
theKM Division agent and the CoPagent. Luca plays the role of a newcomer
in the organization ( Newcomer agent), with his main goal of adjusting to the
working practices of the organization ( adjusting to the organization practices
goal).
In this initial model, only the main goals of the Management and the New-
comer agents are included, indicating that our analysis concentra tes on the
perspective of these two agents. Further modeling steps consist in analyzing
each agent’s goal from the point of view of the agent itself, ai ming at identi-
fying the strategic dependencies and delegations between ag ents, i.e. those
which allow for goals achievement. Figure 4.2 shows basic goal delegations
between the scenario’s agents.
The analysis of the Management ’s softgoal team working well points out
a strategic organizational goal, i.e. CoPs fostering , which is then delegated
to the Knowledge Management Division ( KM Division agent). In return,
theKM Division relies on the organization’s Management to be legitimized
1The reason for modeling team working well as a softgoal is the fact that the Manage-
mentis not monitoring and measuring explicitly the team work quality. In the process of
reﬁning the goal analysis from the point of view of the organization’s Management , the
contribution of the team working well softgoal to the other goals of this agent can become
more explicit
160 Domain and System Analysis
Legend team working 
wellpursuing high 
quality products/
processes innovating 
Management
adjusting to the 
organizational 
practices 
actor goal softgoalKM Division 
Newcomer
CoP 
Figure 4.1: Initial domain model of the scenario
team working 
well
providing 
knowledge 
getting 
knowledge having real 
target 
adjusting to 
work  fostering CoPs getting 
legitimization 
accomplishing 
CoP's goals getting 
advertisements 
on CoPs 
gaining 
incentives innovating 
pursuing high 
quality products/
processes ManagementLegend 
dependee depender
goal dependency 
NewcomerKM Division 
CoP 
Figure 4.2: Main goal delegations between the agents of the sc enario
The Domain Stakeholders 161
for playing the speciﬁc role of motivating and supporting Know ledge Man-
agement practices ( legitimization getting goal). The initial Management ’s
softgoal, leading to its main goal of supporting CoPs, generate s all other
goal delegations between the remaining agents in the scenari o.
Taking, for instance, the pair of agents Newcomer andCoP, we note that
there are goal delegations in both directions. The Newcomer delegates to the
CoPthe goals of getting knowledge ,gaining incentives , and adjusting to work .
On the other hand, the CoP aims at proﬁting from the Newcomer ’s own
knowledge and experience ( getting knowledge goal coming from the CoPto
theNewcomer ). This mutual delegation characterizes what the i* framewo rk
names “sustainable relationship”, i.e. a relationship in which two agents
delegate to each other one or more of their own goals (this also applies to
acquisition and dependency in both directions). Sustainable r elationships
indicate that there is some kind of balance between the two age nts, thus
helping them achieve individual goals. On the other hand, if t here are de-
pendencies, delegations or acquisitions only from one side, th is indicates a
vulnerability by this depender agent towards the dependee (Yu, 1995). Such
unbalance should be corrected in order to guarantee that both agents are
committed to each other. This is exactly the case between the KM Division
and the CoPagents. Note that while the KM Division delegates two goals to
theCoP(having real target andaccomplishing CoP’s goals), the CoPdoes not
seem to depend on the KM Division for achieving any goal. This can result
in a lack of motivation on the part of the CoPto target the goals delegated
by the KM Division .
This kind of analysis could be crucial in a KM scenario. In our ca se,
for instance, we realize that while demanding the CoPs involv ement with
organization’s objectives, the KM Division does not provide, as a counterpart,
any incentive to the CoP. In fact, the KM literature (Orlikowski, 1992a)
indicates that an incentive policy is essential to motivate kn owledge sharing.
As a result of this preliminary analysis, the analyst may propose to theKM
Division the adoption of a method for fostering CoPs, such as the Seduce,
Engage, Support (SES) model (Dignum and van Eeden, 2003), captured in
ﬁgure 4.3.
162 Domain and System Analysis
Adopting SES 
Method 
Seducing 
providing 
infrastructure 
providing 
incentives 
monitoring 
finding time/space 
and budget for
activities 
providing IS 
supportsupporting 
establishment of
real targets marketing 
clarifying 
purposes connecting 
members 
having real
targetAccomplishing 
CoP's goals 
gaining 
incentives 
KM Division 
linking CoP's and 
members'
requirements Engaging Supporting 
having 
guidance CoP 
AND-decomposition Legend:
actor's perspective 
Figure 4.3: Creating a sustainable relationship between KM Div ision and
CoP
The particular perspective of one or more agents can be analyz ed us-
ing the three basic goal analysis techniques provided by Tropo s:means-end
analysis ,contribution analysis andAND/OR decomposition . This allows the
reﬁnement of the domain model by identifying new agent depen dencies, del-
egations and/or acquisitions. Figure 4.3 allows the analysis o f the internal
perspective of the KM Division , which adopts the SES method ( adopting SES
method goal). This initial method has been analyzed and decomposed i n
sub-goals (AND-decomposition), providing us with an overview o f the SES
method, which comprises three phases: seducing, engagement and support
phases ( seducing, engaging andsupporting goals). During the ﬁrst phase, se-
duction , the context and aims of a CoPare identiﬁed and described ( clarifying
purposes goal), potential members are made aware of their connection s and
common interests ( connecting members goal), and a “marketing campaign”
is launched, showing the added values and beneﬁts of the CoPfor the whole
organization ( marketing goal). In the second phase, engagement , both com-
munity members as organization are involved in the process of setting up
theCoP. The aim is to design a community that is as closely related as
possible to the requirements and wishes of the members ( linking CoP’s and
Newcomer’s Perspective 163
members’ requirements goal) and whose tasks and targets are well embedded
in the strategic priorities of the organization ( supporting establishment of real
targets goal). The aim of the third phase, support , is to consolidate the CoP,
by developing CoP-speciﬁc methods and tools for the organization, manage-
ment and innovation of CoPactivities ( providing infrastructure goal), besides
verifying its progress ( monitoring goal ) and granting incentives (providing
incentives goal).
Note by the goal delegations between CoPand the KM Division that the
latter keeps its old delegations toward the former. But now, theCoPrelies on
theKM Division for getting incentives to develop its activities ( getting incen-
tivesgoal), and for having guidance throughout its lifetime ( having guidance
goal). This corrects the previous unbalance between these tw o agents, cre-
ating a sustainable relationship between CoPandKM Division .
4.4 Focusing on the Perspective of the
Newcomer
In order to adjust to his new work environment, the newcomer co unts on
his colleagues and superiors for helping him ﬁt into organiza tional practices.
Suppose that the analyst wants to understand the processes the new comer
uses for integrating into work. For that, he conducts two separ ate interviews:
one with the organization manager, and the other one with the newcomer.
Figure 4.4 models the result of these two interviews showing two perspec-
tives: the manager’s perspective (A) and the point of view of the newcomer
(B).
Analyzing part (A) of Fig. 4.4, we realize that with the goal of hav-
ing a prepared team , the Organization Manager worries that the Newcomer
gets quickly integrated into work ( having newcomer integrated into work goal
andquickly softgoal2). The Organization Manager thinks that the means
2Softgoals are commonly used to provide a quality to the goal. In this case, f or
example, “quickly”is the way the Organization Manager hopes the goal it qualiﬁes (“having
newcomer integrated into work”) is achieved.
164 Domain and System Analysis
quickly having prepared 
team 
Organization 
Managerhaving newcomer
integrated to work 
++getting 
integrated into 
work 
quickly 
integrate having newcomer
consult project
documentation (A)
seeking 
information having 
prepared team working well
+
same level
of expertise working 
well
getting along well
with colleagues +
+working 
well+high level of
expertise 
being helpfulhaving info 
about the 
project poweravoiding being 
prematurely 
judged -understanding 
problem 
consulting project
documentation ++ talking to 
colleague talking to 
project
manager
quickly 
integrating to 
work +
-helping 
newcomergetting 
integrated to 
work 
being well
evaluated (B)having newcomer
seek tutoring from 
project managerNewcomer
Organization 
Manager
Project
ManagerNewcomer
Colleague 
time 
means-end positive 
contribution negative 
contribution +Legend 
plan -
resource having expert
info about the 
project
increasing 
self-confidence 
Figure 4.4: Newcomer’s integration into work on (A) the organi zation man-
ager’s perspective and on (B) the newcomer’s point of view
Newcomer’s Perspective 165
theNewcomer has to achieve this quick integration is reading the project ’s
documentation and talking to the Project Manager (having newcomer con-
sult project documentation andhaving newcomer seek tutoring by the project
manager plans).
However, in (B), we note that instead of consulting the Project Manager ,
theNewcomer talks to a Colleague (having info about the project goal dele-
gation). We can understand the reasoning behind his choice by a nalyzing
his perspective. The Newcomer has three plans to seek information about
the project: talking to project manager, consulting project documentation and
talking to colleague . He believes it will be quicker to integrate into work if
he talks to the Project Manager (positive contribution going from quickly in-
tegrated into work softgoal to talking to project manager plan), since he is an
expert on the project ( high level of expertise resource). The Newcomer is thus
dependent on the Project Manager for knowing well about the project since
being an expert, the Project Manager is most qualiﬁed person to provide
project information ( getting expert info about the project goal dependency).
Besides expertise, the Project Manager has the power ( power resource) to
acquire any means the Newcomer might need to complete his work, such
as a software or a book. But on the other hand, these same high level of
expertise andpower resources make the Newcomer feel pressured, thinking
that he might make a mistake and the Project Manager may prematurely
judge him as being incompetent (negative contribution goin g from the being
prematurely judged softgoal to the talking to project manager plan). On the
other hand, this feeling of pressure no longer exists in the case o f talking to
aColleague (double positive contribution going from the being prematurely
judged softgoal to the talking to colleague plan), because the Newcomer per-
ceives his Colleague as having the same level of expertise than him ( same level
of expertise resource). Hence, we can say that the Newcomer depends on his
Colleague to gain self-conﬁdence ( increasing self-conﬁdence goal dependency)
before thinking of interacting to the Project Manager . Analyzing the diﬀer-
ent contributions to the Newcomer’s plans, we realize that thi s dependency
gains strength and leads the newcomer to talk to his Colleague . The assess-
ment of contributions (positive and negative) is a common ana lysis method
166 Domain and System Analysis
oﬀered by Tropos and here, it allows us to understand the reason why the
Newcomer chose one path of action instead of another.
Part B) of this diagram also illustrates the divergence betwee n the con-
structs of dependency and delegation in ARKnowD. As pointed out by
Castelfranchi et al. (1992), understanding the dependencies between diﬀer-
ent agents within the organizations may provide good means f or ﬁnding new
opportunities for collaborating and working more eﬃcientl y. In other words,
once noted, such dependencies may lead to future delegations. For example,
having observed this speciﬁc situation can lead the analyst to ma ke sugges-
tions to the organization manager. The analyst may suggest that in order to
guarantee that the newcomer has correct information, the ma nager should
not expect the newcomer to take the initiative to talk to the p roject man-
ager, but have the project manager contact the newcomer inste ad. Another
possible recommendation is that the organization and project managers as-
sure the newcomer that making mistakes is not seen as a problem in the
organization, diminishing his feelings of pressure and uneasin ess. Accept-
ing mistakes as learning opportunities rather than ﬂaws is th e right kind of
attitude toward guaranteeing a conducive environment for K nowledge Man-
agement (Lave et al., 1991).
In this diagram, we make a small extension to the semantics of the Tropos
notation. In Tropos, only concrete resources are considered in the analysis
(e.g. a tool, a document, or a piece of information). However, here we
represent intangible assets , such as personal characteristics of the project
manager and the newcomer’s colleague. The reason behind this choice is
that in a KM scenarios, it is usually very important to analyze th e social
behavior and relationships among agents, for which this kind o f intangible
assets may be very valuable.
Fig. 4.4 shows that the same situation may be modeled in diﬀerent ways,
when seen through the eyes of diﬀerent agents in the organizat ion. This
shows the importance of interacting with agents from diﬀeren t hierarchical
positions in the organization, so as to have a more reﬁned view o f the work-
ing setting. As pointed out by many KM researchers (Brown and Dug uid,
2000) (Wenger, 1998), the description of the work provided by managers
Joining a Community of Practice 167
or written in manuals often diverge from the actual practice s within the
organization. Knowledge workers usually ﬁnd several shortcut s and choose
diﬀerent paths to solve a problem more eﬃciently or in a way the y ﬁnd more
reasonable (Wenger, 1998). ARKnowD can be applied to model the se diﬀer-
ences, helping the analyst to reason and communicate about inco nsistencies
between the perspectives of two or more agents.
4.5 Joining a Community of Practice
In order to learn more about the organization, the newcomer t akes the ini-
tiative of joining the OpenS community of practice. This is m odeled in
Figure 4.5. Here, the internal goals of the Newcomer are analyzed and the
delegations towards the CoP, motivated by these goals, are identiﬁed.
not 
overworking Newcomer 
adjusting to 
work 
getting info on 
procedures and 
objectives contributing w/ 
competence working 
well
++
+knowing who 
knows what-
contributing w/ 
personal 
knowledge 
+keeping 
control of his 
assets -
getting 
personalized 
help +
++
getting 
incentives 
CoP 
getting 
knowledge 
Figure 4.5: Newcomer’s perspective when joining a CoP
TheNewcomer ’s most general goal is the working well softgoal, i.e. he
aims at doing his work eﬃciently, while also feeling good abou t himself and
about the organization as a whole. In order to accomplish this, he aims
atcontributing with his competence andcontributing with personal knowledge ,
gained in previous personal and professional experiences. Goin g deeper in
the analysis of this last goal, we see that two other goals contri bute negatively
168 Domain and System Analysis
towards it ( not overworking andkeeping control of his assets goals). These
are common problems already noted by the KM community. Issues o f trust
(keeping control of his assets goal) and motivation ( not overworking goal)
often lead to dissatisfaction towards the traditional central ized KM systems
(Pumareja et al., 2003) (Orlikowski, 1992a). These goals have profoundly
impacted some of the choices concerning the requirements of a supporting
Information System (discussed in section 4.7).
Let us now analyze the contributing with competence goal a bit further. In
order to fully and most eﬀectively contribute with his acquir ed competence,
theNewcomer needs to adjust to his work environment ( adjusting to work
goal). Three goals contribute to the Newcomer ’s adjusting to work, namely:
knowing who knows what, getting personalized help , and getting info on proce-
dures and objectives .In order to do adjust to work, the Newcomer needs new
knowledge about his work and about the organization as a whol e, which
leads to the Newcomer ’s delegation towards the CoPforgetting knowledge .
As we can note in this example, relying on Tropos, the ARKnowD met hod-
ology allows the analysis about the reasons behind certain del egations. In
other words, the goal linked to the delegation’s outgoing arr ow (here, the
adjusting to work goal) provides the ‘why’ of the delegations between two
agents (in this case, the delegation of the Newcomer towards the CoPto get
new knowledge).
4.6 Adding New Agents: Detailing the CoP
Structure
New agents can be added during the analysis in order to model spec iﬁc
roles associated to an agent, or to new particular agents neede d for goal
dependency and/or delegation. In Figure 4.6, inside the dott ed rectangle,
we analyze the structure of the CoPagent, which can provide a solution
to the goal delegations involving the newcomer, with respect to knowledge
providing/getting.
As pointed out in the ontology developed in section 3.5, ARKnowD diﬀer-
Detailing the CoP Structure 169
CoP 
Member
finding 
needed 
knowledge 
developing 
required 
capability 
gaining 
visibility 
receiving 
recognition Provider Seekerplays plays 
Legend 
role internal
structure plays 
play-role 
relationship 
Figure 4.6: The internal structure of the CoP
entiates between agent androle, inspired by the deﬁnitions of i* (Yu, 1995).
An agent has a concrete, physical manifestation, such as a human b eing, an
organization, or a software system. A role is an abstract charact erization of
the behavior of a social agent within some specialized context o r domain of
endeavor. In this sense, its characteristics can be transferabl e to other social
agents, i.e. roles are used to represent speciﬁc behaviors indep endently of
who plays it.
Note that so far, we talked about speciﬁc agents, such as the Newcomer ,
theOrganization Manager and the CoP. In the example of Figure 4.6, we gen-
eralize the behavior of persons who provide and search for know ledge within
theCoPusing two roles, namely the roles of Provider andSeeker . And in
addition to this, we say that the Member agent (representing a member of
the community) can interchangeably play these two roles (not e the assign-
ment labeled as “play” going from Member to each the two roles). Roles
could have been used to represent organizational roles, like ‘m anager’, for
example. But for our purposes, it is more convenient to have ‘ma nager’ and
other organizational roles represented as agents, assuming tha t for example,
170 Domain and System Analysis
a manager is always a manager (rigid entity). This gives us th e chance to
use roles to represent entities that are antirigid in our model , such as those
ofProvider andSeeker . In other words, a Provider at one moment can be the
Seeker in a future opportunity.
Besides making this diﬀerentiation, the diagram shows the mut ual depen-
dency between the Seeker and Provider roles. The Seeker depends on the
Provider for the goals of ﬁnding the knowledge he needs for a speciﬁc task
(ﬁnding needed knowledge goal), and of developing new capabilities ( develop-
ing required capability goal). On the other hand, the Provider depends on the
Seeker to gain visibility ( gaining visibility goal) and to help the Seeker to de-
velop new capabilities, so receiving recognition ( receiving recognition goal).
Note that members of the community of practice may play both ro les in
diﬀerent situations, generating a community of peers. Another i nteresting
point is that as soon as a Newcomer participates in the CoP, he will play the
twoMember roles.
Considering the objectives a CoPis designed for will assure the satisfac-
tion of the previously identiﬁed goal delegations between th eNewcomer and
theCoP. But could the Newcomer rely on the CoPto get personalized help
when having a problem to solve ( getting personalized help goal)? Should CoP
goals and structure be modiﬁed?
4.7 Identifying the Needs for the KARe Sys-
tem Agent
In order to fulﬁll some of the goals of the Newcomer , theCoPstructure has to
be revised and needs to accommodate new agents (roles), having the ability
to satisfy them. Figure 4.7 depicts a model showing that the CoPdelegates
some of the goals of the Newcomer to an agent named KARe.
TheCoPdelegates to KARe the goals of:
a) letting users keep control of their knowledge assets (direct ly derived
from the Newcomer ’skeeping control of his assets goal). The KARe
Identifying the Needs for a System Agent 171
CoP 
KARe letting users keep 
control of assets 
while sharing 
allowing 
members to ask 
and answer
questions 
knowing who 
knows what
providing 
members with 
personalized help 
Figure 4.7: Goal delegations from the CoP to the KARe System
system should allow each user to keep their assets in their own PCs,
while making them available to other community members;
b) allowing members to ask and answer questions through messages e x-
change. This feature is important because some of the Newcomer ’s
questions may not be answered by reading artifacts. Sometimes, i t
could be necessary to communicate with CoPmembers for building
the solution to a speciﬁc problem, as in Fig. 4.4, where the Newcomer
talks to his Colleague to gather project information. KARe should me-
diate this interaction, by ﬁnding the best person to answer to a sp eciﬁc
knowledge request;
c) informing who knows what (directly derived from the Newcomer ’s goal
ofknowing who knows what );
d) providing members with personalized help, by considering t heir per-
sonal characteristics when providing knowledge (straightly o btained
from the goal of getting personalized help by the Newcomer).
The four goals listed above become KARe’s main requirements. In this
chapter, we exemplify the elicitation of system requirements with an anal-
ysis of a simple case study involving the adjustment of a newcomer i nto
work. However, we acknowledge that, in real cases, this elicita tion may be
motivated by the analysis of much more complex scenarios.
172 Domain and System Analysis
By analyzing the four goals from the point of view of the system a gents,
we can identify more detailed requirements, and analyze alte rnative solu-
tions. For instance, we may consider satisfying KARe’s goals by deﬁning
new artifacts to be produced along the organization’s proce sses or we may
look for what KM enabling technology can be considered to desig n a better
solution. A detailed proposal of the KARe system, along with its design
model can be found on chapter 5.
4.8 Adjusting the Evaluation Method
After the Newcomer had been participating for some time in the activities of
theCoP, a subsequent analysis showed that his participation had not bee n
very high, and this could be explained by the evaluation meth od adopted
by BHI. Figure 4.8 (A) captures this problem.
being well-
evaluated participating in 
CoP activities 
+
charging hours 
charging hours to 
clients’ projects charging hours to 
CoP acctivities +contributing with 
personal 
knowledge Newcomer
being well-
evaluated Newcomer
participating in 
CoP activities 
-
charging hours to 
clients’ projects 
(B) (A)
Figure 4.8: Performance evaluation aﬀecting participatio n in CoPs
Fig. 4.8 shows that the evaluation of the Newcomer ’s performance was
based on the hours he charged on clients’ projects in which he wa s involved.
So, in order to be well-evaluated, the Newcomer needed to spent as much
time as he could on tasks related to his usual programmer’s tasks (charging
hours to clients’ projects plan), which did not give him much time to get
Constructivist KM Analysis 173
involved in CoP activities (negative contribution towards theparticipating in
CoP activities goal). This is a common problem noticed in the KM literature:
although the organization makes some eﬀort to support KM, its e valuation
methods are not accordingly adjusted to accommodate activit ies related to
knowledge creation and sharing (Orlikowski, 1992a). In order to solve this
problem, a new evaluation method is proposed, as shows Figure 4 .8 (B).
In the diagram of Fig. 4.8 (B), in order to be well evaluated, t heNewcomer
must charge his hours to clients’ projects ( charging hours to clients’ projects
plan), but also to CoP activities ( charging hours to CoP activities plan).
And besides, he should contribute with his personal knowledge ( contributing
with personal knowledge goal). These additions contribute positively to his
participation in CoP activities (positive contribution to participating in CoP
activities goal). So, by adopting this new evaluation method, the organ ization
is motivating the participation on CoP activities to grow.
Note that while the charging of hours follows an established pro cedure
(this can be understood by the semantics of the plan construct , used to
represent it), the personal knowledge contribution (represen ted as a goal)
can be achieved in diﬀerent ways, to be decided by the Newcomer . For
instance, he could provide contributions to his peers by using the KARe
system, emailing his colleagues, meeting them in person, etc.
4.9 The Conducted Analysis in Light of
Constructivist KM
Looking back at the analysis conducted in this chapter, we rea lize many
points of connection to the previous reﬂections regarding t he principles of
Constructivist KM (or building blocks, as we called them in secti on 2.5. In
fact, these building blocks may be used as a checklist to guide th e analyst
in understanding which level of support the organization curr ently provides
to Constructivist KM. Next to this, these principles may also provi de in-
sights about how to improve KM processes within the organizatio n, either
by changing organizational structures and processes, or by adop ting techno-
174 Domain and System Analysis
logical and non-technological tools.
First of all, the way the analysis has been carried out, based in t he point
of view of several actors within the organization is complian t to the auton-
omybuilding block, previously emphasized as essential to bring mot ivation
to employees regarding the organization’s KM practices. As in top-down
approaches commonly adopted in current KM initiatives, the a nalysis con-
siders the strategic intents of the organization’s top manage ment. However,
besides that, it also takes a bottom-up perspective, bringing i nto evidence
the needs and wants of the knowledge holders, i.e. individual s working in
the several points of action of the organization.
Other elements of the analysis point out that autonomy is a val ued prin-
ciple in the illustrated organizational setting. Proﬁting fr om ARKnowD’s
analysis techniques, the existence of more or less goal delegati ons compared
to plan delegations among agents leads the analyst to draw con clusions re-
garding the choices of the members of the organization regar ding autonomy.
As mentioned before, goal delegation represents situations in which the de-
cision of the strategy behind goal accomplishment is left to the delegatee.
Conversely, in cases modeled with plan delegation, the delega tor prescribes
the way the delegated goal should be achieved. As an illustratio n, in part
A) of Fig. 4.4, the top manager lets the newcomer decide how to b ecome
more familiar with the project in which he is going to work (go al delegation),
rather than prescribing to him a speciﬁc way to proceed.
The autonomy building block is also considered when the organi zation
decides to support the emergence of CoPs. These communities usua lly grant
their members with autonomy to choose ‘when’, ‘how’ and ‘with whom’ to
exchange information and expertise. In addition to that, CoP s create a
richcontext for knowledge creation and dissemination. In this context, ne w
knowledge is produced and disseminated not simply to ﬁll in an ex isting
knowledge base, but with the purpose of fulﬁlling a need of the c ommunity.
These needs are generally conditioned by the targets deﬁned a ccording to
organizational strategies.
Moreover, crossing divisions and even branches of the organiza tion, CoPs
KARe System’s Requirements 175
also motivates non-hierarchical knowledge sharing . In other words, partici-
pation in CoPs’ activities independent on organizational ro les and positions.
Although these positions exist and are important for carrying ou t speciﬁc
tasks and responsibilities within the organization, the analy sis shows that in
the case of knowledge exchange, everyone is considered equal. This uniform
treatment is reﬂected in the representation of two roles (kno wledge provider
and knowledge seeker) to be assumed by every CoP member, despite t heir
organizational roles and positions.
The adopted technological solution also supports the Construct ivist KM
building blocks. This is more speciﬁcally focused on the subseque nt section,
which discusses the requirements elicited to the KARe system as a re sult of
the conducted analysis.
4.10 Focusing Closer on the KARe System
Requirements
Section 4.7 focuses on the elicitation of the main requiremen ts of the KARe
system, based on the needs and wants of the domain stakeholders al ready
captured in previous models. The resulting set of requirements is presented
in Table 4.1.
KARe Requirements
R1: Allowing users to keep control of their knowledge as-
sets while sharing knowledge
R2: Supporting members to ask and answer question
R3: Providing information on experts regarding particular
knowledge
R4: Providing personalized help to the users
Table 4.1: The requirements elicited for the KARe system
Aiming at providing support to Constructivist KM, KARe adopts a pe er-
to-peer model. Peer-to-peer networks provide at the same tim e, a framework
forsocial interaction and for physical and meaningful artifacts access and
exchange. What makes peer-to-peer diﬀerent than the tradit ional client-
176 Domain and System Analysis
server approach is the fact that there is no central server, i.e . each node of
the network can play the role of either a client or a server (Tiw ana, 2003).
In this way, by adopting a peer-to-peer model, KARe directly su pports R1
listed above, allowing each member to keep their knowledge asse ts stored in
their computer while making them available to others in the n etwork. This
complies with the principle of autonomy characterizing Constructivist KM.
Figure 4.9 illustrates this model.
Legend 
Julia Mike 
Joey 
Tom 
Message Document Tacit Knowledge 
Figure 4.9: Peer-to-peer knowledge sharing
Fig. 4.9 shows four people, each one locally managing their ow n knowl-
edge assets. In KARe, we classify knowledge artifacts into documents and
messages . A document is considered as a “ﬁnished product” regarding a
speciﬁc subject. Documents can have various formats (text, au dio, video,
etc.) and be of diﬀerent types (manual, report, speech, etc.) . A message, on
the other hand, refers to a communication construct, used to me diate dialog
and discussion. The system motivates social interaction by supporting the
members of the organization to ask and answer questions (requir ement R2
listed above). In this way, the members of KARe’s peer-to-peer community
exchange the knowledge artifacts maintained in their person al collection. In
other words, KARe aims at imitating the social processes commonly applied
when one has a particular problem to solve during one’s daily w ork. Instead
KARe System’s Requirements 177
of consulting manuals and documentations, the worker is motiv ated to get
involved in a dialog with workmates, which may lead him/her to grasp more
than procedures, the values and tacit strategies adopted in th e organiza-
tion. Fig. 4.9 also acknowledges the presence of tacit knowled ge, which is
hoped to be explicitated throughout social interactions, espe cially with the
exchange of questions and answers (i.e. messages).
The peer-to-peer model reﬂects the non-existence of a centra l power or any
kind of authority controlling the peers interactions and ex changes. In this
way, despite of hierarchical roles or positions, all peers are se en as providers
and seekers of knowledge. In other words, this model complies w ith the
Constructivist KM building block of providing a non-hierarchical knowledge
sharing structure . The distributed nature of peer-to-peer networks reﬂect
the naturally distributed character of knowledge and expert ise within an
organization. Knowledge and expertise exists sparsely in the (i nternally un-
derstood and shared) members’ understanding of each other’s kno wledge,
and in the (hidden) behavioral and cognitive similarities am ong individual
users. In this respect, KARe aims at uncovering and making salient some
of these hidden characteristics so that users might become more a ware of
the existing organizational knowledge and its corresponding CoPs. This di-
rectly regard requirements R3andR4listed above. Both the information
about experts in particular subjects, and the personalized hel p are obtained
through the adoption of user models . In KARe, user models describe per-
sonal characteristics of a user and how he/she views the other pee rs in the
peer-to-peer network.
In an organizational setting, employees can interact as peer s of a big peer-
to-peer network and naturally group themselves in communiti es. Besides,
such network can even transcend organization boarders, allowi ng external
actors or other organizations to take part in this knowledge sharing space.
The dynamic environment created as a result of such knowledge e xchange
enables the emergence of constructive perturbations that lead people to seek
self-improvement by asking questions, and reﬂect about their kn owledge
when answering to incoming knowledge requests.
178 Domain and System Analysis
4.11 Conclusions
This chapter has started illustrating the application of the AR KnowD meth-
odology, focusing on the initial activities of the developme nt cycle, namely
the requirements elicitation and analysis activities.
We used a ﬁctitious scenario especially elaborated based on KM li terature
for the purposes of this exempliﬁcation. With this scenario, w e tried to
illustrate some of the main problems involving KM settings, such a s: lack of
trust and motivation to provide knowledge, the non existence o f an incentive
policy towards knowledge sharing, and an inadequate employe e performance
evaluation criteria for organizations supporting KM. In add ition to that, we
made sure all constructs of the Tropos notation, as well as tech niques applied
in this methodology, have been properly illustrated through out the chapter.
Table 4.2 summarizes the illustration of the Tropos’s construct s and analysis
techniques throughout the chapter.
Our analysis shows how the Tropos methodology can be eﬀectivel y used to
elicit the requirements of KM support, in terms of processes and by adopt-
ing a supporting Information System . Two examples of process changes
suggested by the analysis have been captured in the diagrams of F igs. 4.3
and 4.8. The former models the adoption of a CoPsupporting method by
theKM Division , in order to balance the delegations between the CoPand
theKM Division , in a way that both gain from their collaboration. The
latter focuses on the adjustment of the organization’s evalua tion method in
order to motivate the involvement of the organization’s mem bers with CoP
activities. Moreover, our analysis supports the elicitation o f requirements
for a KM system, named KARe (depicted in Fig. 4.7). A detailed pro posal
of the KARe system, along with its design model can be found on chapter 5,
while its implementation is discussed on chapter 6.
At the end of this analysis step, a review activity is conducted , aiming
at verifying the achievement of the main objectives of domai n analysis and
requirements elicitation. In other words, we focus on the und erstanding of
critical dependencies and delegations between domain agen ts for individ-
ual goal achievement and the identiﬁcation of needs for new o r alternative
Conclusions 179Construct / Analysis Technique Figure
4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8
agent x x x x x x x x
goal x x x x x x x x
dependency x x
delegation x x x x x
softgoal x x x x x
plan x x
resource x
role x
decomposition x x
means-end analysis x x
contribution analysis x x x
agent’s perspective analysis x x x x
agent’s internal structure analysis x
comparing diﬀerent perspectives x
Table 4.2: Summary of Tropos’s constructs and analysis techniq ues illustrated in this chapter
180 Domain and System Analysis
agents, dependencies and delegations to manage unsatisﬁed goa ls. Decisions
on what to focus on in the following steps and on which alternat ive solutions
to be reﬁned in an architectural design, are taken at this poin t.
For instance, at that point of the analysis of the case study we cho ose
to go ahead analyzing a KM solution resting on the adoption of a K M sys-
tem based on peer-to-peer technology: the KARe system, introduc ed in the
diagram of Fig. 4.7 . This choice complies with the Newcomer’s wish to
keep control of his knowledge assets, besides resting on considera tions about
the eﬀectiveness of this technological solution in favoring k nowledge shar-
ing through questions and answers. Moreover, the analysis of our scenario
pointed out the relevance of managing tacit knowledge, i.e. the knowledge
which is conﬁned in people’s mind, and to transform it from tac it to explicit
and back to tacit, completing the knowledge creating cycle a s proposed in
(Nonaka and Takeuchi, 1995). Section 4.10 presented a ﬂavor on how the
elicited requirements are explored, but a more detailed desc ription and the
design of the KARe system are the subject of the next chapter.
Chapter 5
The KARe System
“The important thing is not to stop questioning.
Curiosity has its own reason for existing.”
Albert Einstein
In this chapter, we present the proposal and design K nowledgeable A gent
for Re commendations (KARe). KARe is a socially aware recommender sys-
tem that tries to simulate the social behavior of a community of practice
(CoP) within a peer-to-peer network. It maintains the chara cteristics of
CoP members in user models and seeks for knowledge on their beha lf, ac-
cording to their needs and interests.
Besides a comprehensive description of the system, this chapter p resents
its design, applying ARKnowD. First, Tropos is used to model the a rchi-
tecture of the system and later, AORML is applied in the system’s d etailed
design. Maintaining the consistency throughout the design, we m ake a con-
version between the notations of Tropos and AORML, according to the
transformation rules presented in chapter 3.
This chapter is organized as follows: section 5.1 introduces t his chapter,
describing how KARe models the users and support them reactively and
proactively; sections 5.2 and 5.3 present KARe’s design. The for mer focuses
on the high level architectural design while the latter deals with the detailed
design of the system; section 5.4 presents an initiative to integr ate KARe
with other two related tools, providing a comprehensive toolb ox to support
181
182 The KARe System
KM; section 5.5 discusses some related work, based on an innovative layered
model that facilitates the classiﬁcation of KM systems and their comparison
to KARe; and ﬁnally, section 5.6 presents the conclusions of this chapter.
5.1 Introduction
As an organization develops, its knowledge and expertise becom es increas-
ingly distributed. While promoting the growth of specialized knowledge
communities, this process also makes discovering relevant know ledge from
these communities more diﬃcult. A KM system should support the nat u-
ral organizational processes that promote knowledge creatio n and exchange,
thus supporting the members of the organization to ﬁnd releva nt knowledge.
With this in mind, in the previous chapter, we analyzed the pr oblem of a
newcomer who wanted to join a particular community within th e organiza-
tion where he works. As a result of this analysis, we have elicited a few
requirements for a system that addresses such problem.
The elicited requirements have been presented and brieﬂy disc ussed in
section 4.10. As pointed out in that section, KARe aims at fulﬁlli ng these
requirements by following a peer-to-peer model, which dire ctly resembles the
distributed nature of knowledge and expertise within the orga nization.
Instead of requiring the user’s to seek a knowledge base through k eywords,
the system supports the user on sharing knowledge through questioning and
answering . According to Freire and Fagundez (1992) (refer to section 2.3 .4),
a question is the ﬁrst knowledge sparkle, as questioning is a mean s to ex-
plicitate one’s personal knowledge, starting with a reﬂectio n on what one
knows and what one does not know. In addition to that, question ing pro-
vides an opportunity for others to express their points of vie w, many times
tacit. Allowing peers to ask and answer questions, KARe creates a ri ch envi-
ronment for social interactions, already recognized as a driv ing force behind
knowledge creation and innovation. Throughout time, knowl edge is stored
by the community members in their local repositories, allowin g KARe to re-
trieve knowledge to the user, both reactively (at user request) or proactivelly
Introduction 183
(autonomously identifying user’s needs).
Seeking at providing personalized assistant to the users, helping them
ﬁnd the best responders to solve their doubts, KARe relies on descri bing
each user by the means of a user model , that captures cognitive and social
characteristics of the user.
The following three sub-sections provide more details about t he system’s
user modeling feature, and clarify KARe’s reactive and proact ive support.
They contribute to the clear understanding on how KARe fulﬁlls the previ-
ously elicited requirements, leading the way to consistent arch itectural and
detailed system design.
5.1.1 User Modeling in KARe
User models are composed of diﬀerent user properties that deﬁne t heir char-
acteristics and preferences, which are particular for each syst em and/or pur-
pose. For instance, in e-learning systems, user models are used to de termine
learners’ progress in a course, and their performance level reg arding spe-
ciﬁc knowledge or skill. In e-commerce, user models indicate p references
and needs of users regarding particular products. For KM, user m odels add
ﬂexibility to the system. They often support the system to ﬁnd expe rts to
answer to speciﬁc knowledge requests, and to deliver knowledge a ccording
to particularities of the users or of the situations in which th ey are involved.
Central to this discussion is the decision regarding which prope rties should
be considered in the user model. When people share their knowled ge with
others, they are not just sharing information; they are also shari ng cultural
and social references (Mantovani, 1996). Likewise, when peop le seek knowl-
edge, they are not just seeking information; they are seeking in formation
grounded in, and carrying diﬀerent meanings to diﬀerent soci al communi-
ties. By considering the available literature and carefully e xamining several
KM cases, we have elaborated KARe’s user model (also termed peer model )
based on the characteristics listed in Table 5.1.
The KM literature points out interest andexpertise on particular topics
as two of the main characteristics that diﬀerentiate organiz ational members
184 The KARe System
User Model Properties
Personal
CharacteristicsInteraction
CharacteristicsPhysical
Context
interest trustability location
expertise collaborative level time
role reliability
availability
presentation preferences
Table 5.1: Relevant user characteristics when searching for kn owledge
(Brown and Duguid, 2000) (Hansen et al., 1999) (Quinn et al., 19 96). In
KARe, both interest and expertise are inferred from the user’s kn owledge
artifacts, organized by the means of personal taxonomies. More details about
how such taxonomies support the user on organizing and sharing kn owledge
may be found in the subsequent section.
Knowing that someone is an expert on particular topic may not b e suﬃ-
cient to indicate him/her as an appropriate knowledge provi der. In addition
to that, some indication on how well he/she may respond to a query in that
topic should also be considered. This we call reliability orexpertise level .
In KARe, when receiving an answer to a given help request, the seek er is
allowed to evaluate the provider’s contribution, giving it a grade that is then
stored in his (the seeker’s) PM. An average of the available grade s is then
used to select and rank providers. Note that each seeker has its own evalua-
tion of the providers, meaning that the same person may be evalua ted with
diﬀerent reliability levels by diﬀerent people. This follo ws our approach to
imitate reality, in which people have diﬀerent and individu al views of one
another.
Along with reliability, two other factors are described in ter ms of the
peer’s interactions with one another (thus listed in column 2 of Table 5.1).
Trust, also referred as reputation or conﬁdence measure, is claimed in the
KM literature as one of the most important factors considered w hen peo-
ple share knowledge (Castelfranchi, 2004) (Esfandiari and Cha ndrasekharan,
2001). In KARe, the peers may indicate those who they trust throu gh a
Introduction 185
list of friends. The remaining interaction feature is the collaborative level ,
measured throughout the providers’ interactions in the system. If a peer
receives questions and does not reply to them, this has a negat ive impact
on his collaborative level, regarding a particular seeker. T he opposite hap-
pens if a peer promptly replies to incoming requests. By explic itly modeling
the peers’ collaborative level in KARe, we hope to avoid (or at l east di-
minish) the existence of “free riders”, i.e. peers that seek for c ontributions
but never contribute to others (Vassileva, 2002). To guarante e that absent
users will not suﬀer losses in collaborative level, KARe also consid ers user’s
availability . In other words, KARe allows the peers to indicate how much
time they can spend on answering help requests. This way, those pee rs who
have higher availability are more contacted than the others. Besides that,
peers may provide information regarding vacation or sick lea ves.
Besides the personal characteristics of expertise and interest, KARe relies
on the roleas an important characteristic to drive the choice for partic ular
knowledge artifacts, and/or users to answer to knowledge reque sts. Peers
may play diﬀerent roles within an organization and communit y. This refers
to organizational roles, such as accountant, secretary, and co nsultant. But
it can also include speciﬁc roles played in a CoP, such as CoP lead er and
CoP web-master. According to research in CoPs, the role(s) a knowl edge
provider plays within a community may help to determine whet her or not
the information received is structured at an appropriate lev el (Lave et al.,
1991). As noted in the analysis of the scenario presented in chapt er 4 (re-
fer to section 4.4), people tend to feel more comfortable when exchanging
knowledge with others with similar roles.
The physical context (Chen and Kotz, 2000) (column 3 of table 5 .1) is
also taken into account when KARe is searching for knowledge. Her e, time
and location are explored. KARe considers for instance, if a user is at home
or at school, and the time of the day to determine the choice for speciﬁc
artifacts (e.g. if it is late at night, the user might prefer a sh orter or less
complex text to read). Section 6.5.2 of next chapter describe s a mobile
KARe prototype that uses peer locations to select him/her as a re sponder
for pending questions.
186 The KARe System
5.1.2 Using KARe to Ask and Answer Questions
KARe is a multi-agent system that recommends artifacts to meet t he user
needs based on questioning and answering, simulating the natura l social
processes involved in knowledge sharing. When we have a real pro blem at
work, we often rely on asking a question to a colleague with whom we share
the oﬃce, or to someone who is considered an expert in a subject re lated
to our problem. The process of questioning and answering stimula tes the
pursuit for innovation. This can prevent the crystallization of knowledge and
procedures, impelling people to seek for new and better ways of acting and
performing. Moreover, this process forces both questioner an d responder to
ﬁnd a common interpretative schema, by putting themselves in e ach other’s
position and trying to grasp each of their individual and tacit view on the
discussed topic. In order to provide personalized assistant, helpi ng the users
to select the best respondents to solve their doubts, KARe relies on user
models as described in the previous sub-section, capturing user ’s cognitive
and social characteristics.
Asking and answering to questions is an interactive process. The qu es-
tioner ﬁnds a suitable colleague and poses his doubt. Usually, th is choice
is based on the questioner’s assumption that his colleague knows about the
targeted subject, besides feelings of trust and comfort toward s the responder
(this choice is illustrated in the analysis of the Newcomer’s sce nario, in the
Tropos diagram of Fig. 4.4, chapter 4). The responder, on his t urn, is likely
to help the questioner, provided that the trust between them is mutual. He
will then use his own language and knowledge to provide the answ er to the
questioner. Besides solving the problem at hand, having the answ er gives
the questioner the ability to share this new knowledge with oth er colleagues.
Fig 5.1 illustrates the process of asking and answering questions in three
steps. In (A), a questioner named Mike has a speciﬁc doubt concerni ng
one of his tasks. He ﬁnds a colleague who has the answer to help him a nd
poses his question, receiving the answer subsequently. In (B), Mi ke applies
the received answer in order to solve his problem. Now, keeping t he answer
to himself, Mike is able to help others in need, as shown in (C) wh ere he
Introduction 187
provides the answer to a colleague who had a similar doubt.
Q?
(B) Problem Solving (A) Seeking for Knowledge 
(C) Sharing Knowledge 
AA
A
A
AQ
Figure 5.1: Process of (A) acquiring knowledge, (B) using it for solving a
speciﬁc problem and (C) socializing it with others
In KARe, we simulate this process using a peer-to-peer infrastruc ture.
Each user (a peer) is able to organize his knowledge assets (typi cally, working
documents) according to his own domain conceptualization, u sing a taxon-
omy. A taxonomy is a concept hierarchy that describes the user’ s view of a
speciﬁc domain, also named context in (Bonifacio et al., 2004) . After deﬁn-
ing meaningful concepts and their inter-relationships the u ser distributes
the artifacts according to the “matching” concepts in the hi erarchy. Figure
5.2 shows the organization of the personal knowledge assets of th ree users,
connected by a peer-to-peer network.
KARe allows the user to pose natural language questions, searching in
other peers’ collection for answers among their stored artifac ts. The answer
can be found among documents or messages sent by other peers respo nding
previous similar questions. In case no response is found, the system i ndicates
a suitable peer (based on peer’s user models) to provide the answer to that
speciﬁc question. Having received a suitable answer from the indi cated peer,
188 The KARe System
the questioner now has this answer classiﬁed in his own taxonomy a nd stored
in his system, so that he can be consulted by others regarding the sa me
subject. These processes are illustrated in Figures 5.2 and 5.3.
QA
Health insurance 
Client Competitors 
Premium Standard 
Figure 5.2: A human peer responds to a question when no answer is f ound
by the system
Fig. 5.2 shows how KARe deals with the situation previously depic ted in
Fig. 5.1 (A), i.e. a user submits a question (now contextualized b y a concept
in his own taxonomy). The system submits the question to a peer who se
user model seems to describe a suitable responder. The user answers t o
the question submitting it through the system to the questioner. No te that
the contextualization of the question may help the responder t o understand
more about the questioner’s doubt. For instance, suppose that th is is an
insurance company and that Mike’s question is “What measures sho uld we
take when a client is late with his payment for the acquired ser vices?”. Some
information is not expressed in Mike’s question, for instance: w hat kind of
service is he talking about? However, this information is expl icitated by
the contextualization of the question, since it is classiﬁed und er “Health
insurance-Clients-Premium” in Mike’s taxonomy. Besides clar ifying the type
Introduction 189
QQA
QA
Health insurance 
Client Competitors 
Premium Standard 
Figure 5.3: The system retrieves an answer previously stored by an other
peer
of service (“health insurance”), this contextualization also indicates the type
of client Mike is reﬀering to (in this case, “premium”), which may have some
impact in the responder’s answer.
In Fig. 5.3, Mike has already received the answer to his questio n, which
was then classiﬁed under the concept he had previously indicate d. In this
way, Mike now stores the answer for his own future reference and for sharing
it with peers in need. The ﬁgure shows the case in which Joey requ ests
similar information, by posing a question similar to Mike’s. In th is case,
Mike does not need to personally answer to the question, as the syst em
has already found it in his computer, subsequently sending it to Joey. This
illustrates KARe’s handling of the situation early depicted in Fig. 5.1 (C).
On the other hand, if the questioner is not satisﬁed with the answe r,
the system provides him with a list of possible responders. Responder s
are chosen based on their user model, which comprehends the foll owing
characteristics (refer to previous sub-section): expertise, r eliability, trust,
role, collaborative level, and availability.
By storing the same question/answer pair in diﬀerent peers, we cho se to
replicate to increase the possibility that this knowledge will remain in the or-
ganization even when some members are not available anymore. Considering
190 The KARe System
that these peers will be involved in continuous interactions, the knowledge
considered “useful” to the community (i.e. information and do cuments they
need for their daily work) is likely to remain in the communit y, even if the
members that originally owned them leave. This complies to t he principle of
redundancy , presented by Nonaka and Takeuchi (1995) as one of the condi-
tions for knowledge creation and disseminatio within organiz ations (for more
on this topic, refer to section 2.2.4).
5.1.3 Proactive Knowledge Delivery
Besides this reactive type of search, KARe also searches for knowl edge ar-
tifacts in a proactive fashion, in three distinct ways: a) perio dic search; b)
solving pending requests; and c) suggesting interaction with simi lar users.
In the periodic search, KARe recurrently searches the distribut ed peers
for new knowledge artifacts of interest for his/her associated p eer. The
period of search is previously conﬁgured by the peer, and it can be also
changed throughout time. When searching for knowledge, KARe t akes into
account the following information from the user model, descri bed in the
previous section: seeker’s interest, provider’s expertise, see ker’s trust on
certain providers, and seeker’s role. In addition to that, the system is aware
of location and time, besides user’s preference, in order to pr esent the content
in the most appealing format.
In solving pending requests, the system tries to solve previous kno wledge
requests that have not yet been satisﬁed. There may be situations in which
a request results in no satisfactory response, either because no kno wledge
has been found among the other peers, or because the founded doc uments
or incoming answers have not satisfactorily solved the questione r’s doubt.
In this case, this request becomes pending, and the system keeps t rack of
new incoming knowledge artifacts that may suﬃce that particu lar knowledge
need, delivering them to the questioner in a later date.
Finally, when noticing similarity regarding interest, exper tise and the
remaining factors considered in the user model, the system may pr ovide a
peer with a list with similar users to which he/she may interact.
Architectural Design 191
5.2 Architectural Design
At this point, we would like to go back to the modeling activit ies we have
started in chapter 4. The next activity is the system’s architec tural design.
During this activity, new agents emerge as sub-agents of the K ARe system.
These new agents are the choice of the system designer to fulﬁll th e require-
ments captured in the requirements analysis activity. The de signer usually
bases her/his choice of architecture on previous experience or on available
architectural patterns, previously used for similar purposes.
According to ARKnowD, besides supporting requirements analysis, Tro-
pos is also applied for the architectural design, providing a sm ooth transition
from the problem level analysis to the system level analysis. It en ables us to
easily trace back the functionalities of the system to the goals of the domain
agents. In more details, the main advantages this approach giv es us are:
a) allowing us to analyze which of the system’s general goals ar e adopted
by each of the internal agents; and b) supporting us on capturin g the goal
delegations1between the system’s internal agents. For detailing the design
of the system (refer to section 5.3), we ﬁnally make the transform ation pro-
posed in chapter 3, proceeding the design with the use of AORML (W agner,
2003), which can support information modeling, besides captu ring agents’
behavior and interaction.
The analysis of the requirements of the KARe system leads to the id en-
tiﬁcation of a possible structure of the system agent in terms of sub -agents,
i.e. the system global architecture is identiﬁed through dele gation of main
system goals to internal sub-agents. In this way, KARe’s architec ture is
composed of three main sub-agents:
•Artifact Manager (AM): maintains the personal knowledge repository of
the peer. This means maintaining the taxonomies created by t he user,
besides allowing him to include or exclude items from the repo sitory.
1If during analysis, it is possible to capture dependencies between agents that are
uncommunicated and even unknown, in the design of system agents, dependencies are
rare. Instead, relations between agents at the level of architectural design are t ypically
captured by the use of delegations.
192 The KARe System
•Peer Assistant (PA): each peer has an associated Peer Assistant (PA)
that represents him/her in the network of peers. This agent is i n charge
of searching for knowledge on peer’s behalf, reactively and p roactively,
and in a personalized way.
•Broker : matches peers as adequate knowledge sources for speciﬁc re-
quests, and supports proactive search by matching similar peers. No te
that while the other two agents compose the peer-to-peer infr astruc-
ture, the Broker is a centralized entity.
The emerging structure is that of an agent organization (or mo re generally
of a peer-to-peer system), whose high level architecture may be modeled in
terms of goal delegations, according to Tropos, as in the examp le depicted
in Figure 5.4.
finding 
similar peers providing p2p 
knowledge 
repository 
indicating 
best peers KARe 
providing info on 
who knows what allowing peers to 
ask and answer 
questions providing peers 
with personalized 
help allowing peers to 
keep control of 
their assets 
making proactive 
recommendations providing 
question/answer 
service Peer 
AssistantArtifact 
ManagerBroker
Figure 5.4: Tropos diagram showing the high level architectu re of the KARe
system
KARe is depicted on the top of Fig. 5.4, delegating the four goa ls previ-
ously adopted by the system on behalf of the CoP (refer to chapter 4, Fig.
4.7) to the three agents described above: the AMthePA, and the Broker .
KARe delegates to the AM, the goal of allowing users to keep control
of their assets . In order to fulﬁll this goal, the AMmaintains a peer-to-
Architectural Design 193
peer knowledge repository ( providing p2p knowledge repository goal). In this
way, the users are allowed to organize their knowledge assets lo cally, while
exchanging knowledge with other peers
ThePAis responsible for the goals of: providing peers with personalized help
andallowing peers to ask and answer questions . These goals materialize, by the
use of technological solutions, two important goals delegated by the KARe
system and are further reﬁned, providing us with more details r egarding
the proposed architecture. To achieve these two main goals, the PAprovides
the user with proactive recommendations ( making proactive recommendations
goal) and supports a question and answer service ( providing question & answer
service goal).
The last goal of KARe, namely the providing info on who knows what
goal, is ﬁnally delegated to the Broker. Hence, the Broker is responsible for
indicating who are the best users to answer to a certain knowledg e request
(indicating best peers goal). Or, in case of a proactive search, the Broker
indicates who are the peers similar in regards to a speciﬁc user ( ﬁnding
similar peers goal).
The existence of a central entity, namely the Broker, indicat es that KARe
does not adopt a pure peer-to-peer model (like Gnutella, for example), but is
rather designed following the hybrid model, also adopted by Nap ster (Oram,
2001). The idea behind this choice is allowing more ﬂexible su pport to the
users of the system, facilitating the access to the user models con taining
personal and social features of the system peers. Figure 5.5 shows a possible
peer-to-peer network topology where all six network nodes co ntain an AM
and a PA, but only two nodes contain Brokers. Limitations of safe ty and
performance of the system (in case a network node containing the Broker
is down or overloaded) may be overcome by replicating the Bro ker in other
nodes of the network.
Fig. 5.4 presents a ﬁrst architectural model, which may be subseq uently
reﬁned, allowing us to understand better by which means the go als are
achieved, besides detailing the delegation relations betwe en the architec-
ture’s agents. Figure 5.6 presents such reﬁnements.
194 The KARe System
PA 
AM 
PA 
AM 
PA 
AM 
PA 
AM B
PA 
AM B
PA 
AM 
Figure 5.5: The distribution of agents within the nodes of KARe ’s peer-to-
peer network
Note that here, the agent’s internal goals have been transform ed into
plans, indicating that there is a speciﬁc strategy (or more prec isely, an al-
gorithm) to achieve these goals. At this point, such strategies a re only
stated, being completely clariﬁed only during detailed desig n. For example,
theAM’s goal of providing p2p knowledge repository has been reﬁned into
two diﬀerent plans: maintaining taxonomies andorganizing knowledge arti-
facts. In other words, this agent allows the user to create and update their
taxonomies, besides organizing their knowledge artifacts, cl assifying them
on taxonomic concepts. In addition to plans, resources have also been in-
cluded in the model. For instance, in order to maintain the tax onomies, the
AMneeds access to the taxonomies themselves, included here as a resource,
which is further indicated as a means for the execution of the maintaining
taxonomies plan.
Besides including plans and resources, the model of Fig. 5.6 show s the
delegations between the system’s agents, and between the user ( CoPMem-
ber) and the system’s agents. Three of the PA’splans require the use of
knowledge artifacts , namely the request for explanation, question response and
providing proactive recommendation plans. In order to acquire such resource,
this agent relies on the AM. In addition to that, the PA’s question response
Architectural Design 195maintaining 
peer modelsproviding p2p 
knowledge 
repository
indicating 
best peersproviding 
question/answer 
service
request for 
explanationArtifact 
Manager
Brokerquestion 
response
providing 
knowledge
getting 
knowledgeCoP 
Memberknowledge 
artifactstaxonomiesmaintaining taxonomies organizing 
knowledge 
artifacts
making proactive 
recommendationsproviding proactive
recommendations knowledge 
artifacts
knowledge 
artifacts
knowledge 
artifacts
creating and 
updating peer 
models
ranking peersfinding similar 
peers
indicating 
best peers+
+
finding similar 
peers
comparing 
peersPeer 
Assistant
accessing 
peer model
accessing 
peer model
Figure 5.6: Tropos diagram showing KARe’s high level architec ture in more
details
196 The KARe System
andproviding proactive recommendation require that the Broker fulﬁlls the
goals of respective ﬁnding similar peers andindicating best peers . On the
other hand, the Broker depends on the PAforaccessing peer models , which
contain important characteristics to enable the Broker to carry out the plans
associated to the PA’sdelegated goals.
5.3 Detailed Design
At this point, we begin detailing our system design, starting wit h an un-
derstanding of the internal structure of our system (i.e. inform ation model-
ing). At this point, we should then convert the Tropos diagram that details
the system’s architecture (Fig. 5.6) into an AORML model, foll owing AR-
KnowD’s transformation rules presented in table 3.2 on chapte r 3. This
results in a draft AOR Agent Diagram (AD), as shown in Figure 5.7
classified 
by 
CoP MemberBroker Peer Assistant
Knowledge 
Artifacts Artifact Manager
Taxonomy 
Figure 5.7: Draft Agent Diagram
The AD of Fig. 5.7 shows us the following transformations:
•Tropos agents become AOR agents ;
•Tropos resources become AOR objects ;
•Tropos delegations become AOR association relations .
The directions of the association relations between agents ar e inferred
from the direction of the delegations between agents. And in ca se of re-
Detailed Design 197
lations between agents and objects, it is assumed that the relat ion comes
from the agent to the object (reﬂecting agent’s activeness an d object’s pas-
siveness). Note that such diagram can be obtained automatically b y simply
transforming the notation elements from one language to the o ther. Having
this draft diagram at hand, the system designer is now able to reﬁ ne it,
which results in two distinct diagrams: a conceptual diagram an d a design
diagram, respectively exhibited in Figures 5.8 and 5.9.
<<communication>> 
Document*1 owns 
*classified 
by 
Message questioner 
responder 1
1
*
replies * 1trusts Peer <<human>> 
**Broker <<artificial>> 
Peer Assistant <<artificial>> 
recommends 1
1
<<institutional>> 
CoP 
CoP Member <<human>> 1
Knowledge 
Artifacts Artifact Manager <<artificial>> 
organizes 1
*
classifies 
*1 1 1
1<<communication>> *
represented 
by 
1*
Concept
Taxonomy maintains 
1* / 1 <<…...>> 
generalization/
specialization 
relation ternary 
relation cardinality stereotype 
indicating agent 
type Legend 
composition 
relation /attribute 
derived 
attribute <<communication>> 
communication 
relation 
Figure 5.8: Conceptual Agent Diagram
A conceptual AOR Agent Diagram (AD) enables the understanding o f the
conceptual relations between the agents, being them system (ar tiﬁcial) or
domain (human and institutional) agents. In this diagram, the type of agent
is depicted using UML2stereotypes. In this way, we may diﬀerentiate the
2since AORML extends UML, it allows the designer to make use of the UML elements
every time AORML does not oﬀer an alternative solution.
198 The KARe System
artiﬁcial ( ArtifactManager ,PeerAssistant andBroker ), human ( CoPMember ,
Peer) and institutional ( CoP) agents of the scenario. The Peeragent has
been added, providing more generality to the system. Now, a Peercan
be a community member or not, allowing all organizational me mbers to
participate in system’s interactions, regardless of their aﬃli ation to speciﬁc
communities. Besides Peer, theCoPinstitutional agent has been added, to
show that a CoPMember is part of a CoP3. The relations between agents
(and between agents and objects), previously inferred from th e delegations
between agents in Tropos, are now named, and cardinalities ha ve been added,
giving a more clear reading of how the agents and objects rela te. Agents are
connected through a special kind of relation: the communication relation .
As already mentioned in section 3.8, if such type of relation exi sts between
two agents, it determines that these two agents communicate to achieve their
goals. The details of their communication is made clear in the interaction
diagrams that we present in section 5.3.1.
Some objects and relations have also been added to reﬁne the dr aft AD.
For example, a specialization relation has been added to show t hatknowledge
artifact can be of one of the two types of artifacts previously described in
section 4.10: document andmessage . The relation of these artifacts to the
Peerhave been added: Peerownsdocuments whilesends orreceives messages
(ternary relation). The introduction of a concept object indicates that the
taxonomy is composed of a set of concepts, and that each concept classiﬁes
a number of knowledge artifacts.
Although the conceptual model enables a clear understanding o f the sys-
tem to be and their relations with domain agents, the designer n eeds a more
reﬁned version of the conceptual AD, focusing solely on the inter nal struc-
ture of the system, and abstracting away from details of the doma in. This
is ﬁnally achieved with the diagram of Fig. 5.9.
The design model only contains elements that compose the system, while
all domain agents are left out. Note that, in this diagram, a Peerhas been
3in AORML, as in UML, composition can be shown either by the use of the compos ition
relation (a diamond-ended relation), or by internalization. Here we chose the la tter, as
we think it is more clear.
Detailed Design 199
KARe 
Question Answer Message *1owns classified 
by 
questioner 
responder 1
*
replies * 1Broker <<artificial>> 
Peer Assistant<<artificial>> 
recommends 1Artifact Manager <<artificial>> 
classifies 1 1
<<belief>> 
Peer *
1<<communication>> 
Knowledge 
Artifact
1*
Concept
Taxonomy organizes 
*1Document
title 
type 
creator 
date-creation 
sender 
date 
subjectidArtifact
pathFile role 
/expertise 
/interest
collabLevel
reliability 
trust**
<<communication>> 
Pending 
Question <<belief>> 
Peer <<belief>> 
Peer <<artificial>> 
Figure 5.9: Design Agent Diagram
objectiﬁed . This is due to the fact that the Peeragent is not part of the
system, but the information about him/her that is relevant for the system
(i.e. the user model) should be. The Peerobject models the belief that
the artiﬁcial agents have about the Peeragents. In addition to this, we
have specialized the Message intoQuestion andAnswer , reﬁning it into the
two types of messages we may have in the system. Besides, the Question
is further reﬁned into Pending Question . This helps us model the proactive
functionality of the system to retrieve answers to questions tha t have not
been satisfactorily answered before.
5.3.1 Behavior and Interaction Modeling
Having understood how the information is structured, the design proceeds
with the elaboration of AORML interaction diagrams to model agents’ in-
ternal behavior and interaction with other agents. In other w ords, these
diagrams allow the designer to understand better the speciﬁc fu nctioning of
200 The KARe System
the agents in response to incoming messages and/or events.
Interaction modeling generally starts with the elaboration of a few AOR
Interaction Sequence Diagrams (ISDs), detailing agent’s in teractions to per-
form each of the system’s functionalities. Instead of modeling g eneral sit-
uations, ISDs depict prototypical situations, in which diﬀere nt possibilities
regarding the same functionality may be explored. This has sho wn to be
very useful in enabling a clear understanding of the system. Usuall y, the
designer reasons about how functionalities are accomplished w hile elaborat-
ing this kind of diagram. It is common to reﬁne them several tim es before a
ﬁnal version can be achieved. Moreover, they can also lead to mo diﬁcations
in the information structure, modeled with the use of ADs. After un der-
standing how the agents interact with each other, AOR Interac tion Pattern
Diagrams (IPDs) allow the designer to detail the internal beha vior of some
agents. And ﬁnally, AOR Interaction Frame Diagrams (IFDs) abstr act from
modeling speciﬁc situations, showing solely the types of messages e xchanged
between two agents. This is helpful for clarifying the interf ace between two
agents.
At this point, we turn back to our Tropos architectural model of Fig. 5.6,
which informs us which situations we should target on interact ion modeling.
These situations are given by the plans adopted by each of the syst em agents.
Plans in Tropos “represent, at an abstract level, a way of doing something”
(Bresciani et al., 2004, pag. 207). In other words, a plan is an a lgorithm or
a set of steps that lead an agent to accomplish certain goals. Here, plans
function as UML use cases. AOR ISDs are able to model the set of steps
that lead to a plan execution, showing how agents’ interact and eventually
perform actions and respond to events of the environment. Acco rding to
Fig. 5.6, we should model the following plans: maintaining tax onomies,
organizing knowledge artifacts, creating and updating peer models, request
for explanation, question response, providing proactive reco mmendations,
ranking peers and comparing peers.
Detailed Design 201
Maintaining Taxonomies
Figure 5.10 shows the Peerinteraction with the AMon the creation of part
of the taxonomy of Fig. 5.2 of section 5.1.2.
Mike's AM : 
Artifact ModelMike : Peer 
createTaxonomy 
title=”Health Insurance 
Taxonomy” 1
inclConceptTax 
taxID= 12 
parent=null
concept=”Health Insurance” 2
inclConceptTax 
taxID= 12 
parent=”Health Insurance” 
concept="Client” 3
4
5newTaxonomy 
taxID=12 
title="Health Insurance” 
newConcept
taxID=12 
parent=null
concept=”Health Insurance” 
6
newConcept
taxID=12 
parent=”Health Insurance” 
concept="Client” 
Figure 5.10: The Peer creates a personal taxonomy
The ISD of Fig. 5.10 depicts Mike creating a new taxonomy name d
“Health Insurance” ( createTaxonomy message) and including two concepts
on this new taxonomy ( inclConceptTax ): “Health Insurance” as the top con-
cept, and “Client” as its child. Similar messages may be sent in o rder to
include other concepts. On the right side of the diagram, a few a ctions of the
AMin response to the incoming messages are depicted. The AMcreates a
new taxonomy ( newTaxonomy action event), providing it with an associated
id (taxID), which identiﬁes the taxonomy in the system. Then, following ’s
Mike’s messages requesting the inclusion of concepts in the give n taxonomy,
theAMperforms newConcept actions, creating the concept.
Similar ISDs can be sketched for updating ordeleting concepts in a tax-
onomy. However, as these diagrams would be redundant with rela tion to
the already presented diagram in Fig. 5.10, we choose not to inc lude them
here. As aforementioned, the ISDs depict prototypical situat ions, instead
202 The KARe System
of generalizing the interactions4. This supports the designer on reasoning
about diﬀerent possibilities before generalizations can be m ade (usually in
the IPDs and IFDs).
Organizing Knowledge Artifacts
TheAMsupports the system user on organizing his/her knowledge assets
in his/her local knowledge repository. An example of how a new do cument
can be included in the user’s knowledge base is presented in Figu re 5.11.
Interesting in this diagram is the presence of the metadata tha t qualiﬁes the
given document. To avoid too much repetition, we refrain our selves from
providing the ISDs for updating metadata ordeleting document , as they
would be very similar to the one here presented.
Mike submits a new document to be included in his local knowled ge base
(includeDocument message). He indicates in which taxonomy ( taxID param-
eter) and under which concept ( concept parameter) the document should be
classiﬁed. Besides this, other document metadata are included a s parame-
ters:title, type, creator, anddate-of-creation . And ﬁnally, the document ﬁle
is also submitted. The AMincludes the new document in Mike’s knowledge
repository by performing the newDocument action. Besides the submitted
metadata, the AMcreates an identiﬁer for the submitted document ( idDoc
parameter).
Creating and Updating Peer Models
ThePAis responsible for building the peer model. For this, it needs th e user
to provide some personal data and to customize some system options. F igure
5.12 shows the creation of the peer model, through interactio n between the
user and his PA, when he starts using KARe.
To start using KARe, the user needs to provide a few initial data to
his/her PA. Fig. 5.12 shows that Mike ﬁrst submits his personal data ( per-
sonalData message), including name, role, room number etc. Next to this,
4underlying agent’s names and message labels signify that these are instances instea d
of classes.
Detailed Design 203Mike's AM : 
Artifact ModelMike: Peer
addDocument
1
2
newDocumenttaxID=12
concept= “Health Insurance” 
title=”New Health Insurance Programs”
type=”report”
creator=”Luc Dell”
date-of-creation=”24-05-2005"
file=new-programs.docdocID=432
taxID=12
concept= “Health Insurance” 
title=”New Health Insurance Programs”
type=”report”
creator=”Luc Dell”
date-of-creation=”24-05-2005"
file=new-programs.doc
Figure 5.11: The Peer includes a new document in his personal k nowledge
base
204 The KARe System
personalData Mike's PA: 
Peer Assistant
name = “Smith” 
first_name = “Mike” 
role = "Consultant” 
phone_ext = “6754”
room = “54”
indicTrust
lstTrust = [“Mark”,”Julia”]
period = “7”
treshold=”70”
configBrokerPermission 
expertise=”yes” 
listTrust=”yes” 
role=”yes” 
configPrefRespondent
expertise=”2"
reliability=”3"
trust=”1"
role=”4"
collabLevel=”5"Mike: Peer 
1
2
3
4
5configProactiveRec 
Figure 5.12: The Peer conﬁgures his personal information
Detailed Design 205
Mike indicates who are his trusted colleagues ( indicTrust message), in this
case: Mark and Julia. Then, Mike conﬁgures some system options, na mely:
a) the period he would like his PAto provide him with proactive recom-
mendations ( period parameter of the conﬁgProactiveRec message), given in
number of days (e.g. Mike wants to receive proactive recomme ndations ev-
ery 7 days); b) the threshold that should be used by the PAto ﬁnd similar
artifacts during the proactive periodic searches ( treshold parameter of the
conﬁgProactiveRec message), given in percentage (e.g. here, 70%); c) permis-
sion to the Broker to access his personal information ( conﬁgBrokerPermission
message). In this case, Mike allows the Broker to view all his per sonal infor-
mation, i.e. his expertise, his list of trust and his role; and d) the order of
characteristics based in which the Broker should choose peers to respond to
his requests ( conﬁgPrefRespondent message). Here, Mike indicates he wants
this choice to be based in the following order: trust, expertise , reliability,
role and collaborative level.
After its initial creation, the peer model is then constantly u pdated,
throughout Mike’s interaction with other peers. This especia lly regards some
of the interaction features (refer to Fig. 5.9). From these, only trust infor-
mation is directly gathered from the user. The information on how reliable
the user ﬁnds the other peers, and how collaborative they are in respect to
the user can only be gathered throughout peer interaction (see Fig. 5.16 for
examples of how reliability and collaborative level are upd ated in the Peer
Model).
Request for Explanation
For reasons of space and clarity, the interaction modeling reg arding this plan
has been divided in four diagrams, depicted from Figure 5.13 t o Figure 5.16.
These diagrams depict the situation previously referred to in F igure 5.2 of
section 5.1.2, i.e. Mike asks a question that is responded by an ap propriate
peer selected by the system.
The interaction starts when Mike submits a question to his associa tedPA
(requestExplanation message), properly classiﬁcating the message in a con-
206 The KARe System:PA
searchAnswer2Mike: Peer Mike's PA : 
Peer AssistantAnna's PA : 
Peer Assistant
provideDocument
 "docs:{doc34,doc66}John's PA : 
Peer Assistant
provideExplanation
 "question=”My client…" answer=”Usually,..."provideDocument
 "peer=Annadocs:{doc34,doc66}3
4
provideExplanation
 "
75requestExplanation
question="What to do in case a client...?"taxID=12class =”Health Ins.->      Client->Premium”
peer=Johnquestion=”My client…" answer=”Usually,..."
evaluateDocument
doc=doc34eval=[5,unsatisfied]
evaluateExplanation
expl=”Usually…"eval=[3,unsatisfied]6
9doc=doc66eval=[5,unsatisfied]evaluateDocument
8keyQuest=[client,payment, late,...]vectorC=[(key1,freq1),...]
peer=Annaeval=5
updReliabPeer
peer=Annaeval=5updReliabPeer
peer=Johneval=3updReliabPeer1
10
11
12
Figure 5.13: Mike submits a question to his associated PA
Detailed Design 207
cept of one of his taxonomies (note the taxID andclassparameters in the re-
questExplanation message). In response to Mike’s message, Mike’s PAbroad-
casts a message to the other PAsin the network ( searchAnswer message),
searching for a response to Mike’s question. Following, two PAsrespond to
Mike’s PAsearch request. At this point, the Peers have not been directly
contacted. Instead, only their personal repositories have bee n searched for
an appropriate answer by their associated PAs. Maria’s PAsubmits two doc-
uments that seem related to Mike’s question ( provideDocument message from
Mary’s PA), while John’s PAsends a previously question that is similar to
Mike’s doubt ( provideExplanation message from John’s PA). Having received
the incoming artifacts, Mike’s PAimediately forwards them to Mike, expect-
ing to fulﬁll his knowledge needs ( provideDocument andprovideExplanation
messages from Mike’s PA). However, Mike is not satisﬁed. He submits poor
ratings to all received artifacts, also indicating that he is u nsatisﬁed with
the response (note the evalparameter in the evaluateDocument andevaluate-
Explanation messages). These poor evaluations will trigger the interaction s
depicted in Figure 5.14. Before going forward, Mike’s PAupdates in Mike’s
peer model the reliability of the two Peers who sent knowledge artifacts ( up-
dReliabPeer action events). Unfortunatelly, in this case, their reliabili ty will
diminish due to Mike’s unsatisfaction regarding the received a rtifacts.
ThePAmust now identify a speciﬁc peer for whom to submit Mike’s
question. For that, the PArelies on the Broker , for which it submits a ﬁnd-
BestResponder message. Note that in this message, Mike’s PAprovides some
useful information to the Broker , namely the experts list already inferred
from the previous step (i.e. the experts in the question’s rela ted subject are
those whose PAssent automatic responses), authorized information from
Mike’s peer model, and the order of importance of the responde r character-
istics according to Mike (the given numbers indicates that Mi ke would like
the responder to be chosen based on the order: trust, expertise, re liability,
role and collaborative level. This information has been con ﬁgured in the
initial information exchange between Mike and his PA, as depicted in the
diagram of Fig. 5.12). The Broker acknowledges that it has received the
request from Mike’s PA.
208 The KARe System
Mike's PA : 
Peer Assistant Broker A : 
Broker 
findBestResponder 13 
14 
findBestResponder ackReqResponder 
15 
16 answerBestResponder 
listResp=[Julia, Anna, 
Ben, Mark]ListExperts=[Anna,John]
PM=altPM 
prefRespond=[2,3,1,4,5]
answerBestResponder 
listResp C
D
Figure 5.14: Mike’s PA searches for a Peer to directly respond t o Mike’s
doubt
Detailed Design 209
At this point, a commitment is established between these two age nts.
Note that such commitment can be inferred from the indicating best peers
delegation between the PAagent and the Broker agent in the Tropos archi-
tectural model of Fig. 5.6. As seen in section 3.5, delegation in ARKnowD
indicates at the same time, dependency from the delegator (th ePA) towards
the delegatee (the Broker ) and a commitment from the delegatee towards
the delegator. The counterpart of a commitment is a claim. Th us, we can
also say that the PAhas a claim towards the Broker . Commitments are im-
portant deontic construct, which establish a kind of contract b etween two
agents. As can be noted in Fig. 5.14, a commitment has one or more argu-
ments as possible outcomes of a given commitment. In this case, t heBroker
is forced to submit an answerBestResponder message, containing a list of ap-
propriate peers to answer to Mike’s request. Any other response (o r lack of
response) would mean that the commitment was not fulﬁlled, whi ch should
lead to some sanction regarding the committed agent. For the de signer, this
indicates an important trigger for exception handling in th e system. An al-
ternative for the non-fulﬁllment of the commitment should be then provided
in the system’s code. However, in the case at hand, the Broker fulﬁlls the
given commitment, by sending the list of best peers to Mike’s PA.
The diagram in Fig. 5.14 accomplishes one of the Broker’s plan, namelly
theranking peers plan. The relation between the PA’s request explanation
plan and this plan is also clear in the Tropos diagram of Fig. 5. 6. First,
the delegation coming from the request explanation plan to the Broker agent
generates the indicating best peers goal, which is then reﬁned to the ranking
peersplan internally to the Broker . In comparison with UML use cases, the
relation between these two plans ( request explanation andranking peers ) is
similar to the relation between two use cases A and B, use case A ‘usin g’
use case B.
Figure 5.15 proceeds with a sequence of interactions in which Mike’s PA
tries to ﬁnd a response to Mike’s doubt by contacting one of the p eers in
the best peer lists submitted by the Broker .
First, Mike’s PAshows him the list of peers sorted by the Broker, so that
Mike can choose one or more to send his question ( possibleResponders mes-
210 The KARe SystemMike: Peer Mike's PA: 
Peer AssistantJulia’s PA: 
Peer AssistantJulia: Peer
possibleResponders
listResp=[Julia, Anna, 
Ben, Mark]17
reqExplanationPeers
listResp=[Julia]18
provideAnswer
ContentprovideHelp
notAvailable xackReqExplanationrequestDirectExplanation19
Question="What to do...?"Class =”Health Ins.->…"
20
21
22
Question="What to do...?"Class =”Health Ins.->…"requestExplanation
23
24
provideAnswer
Peer=”Julia”Content="In this case, you should..." 30provideAnswer
Peer=”Julia”Content="In this case, you should..." provideAnswer
Peer=”Julia”Content="In this case, you should..." C
D
Figure 5.15: A Peer responds to Mike’s question
Detailed Design 211
sage). Mike selects ‘Julia’ from the list ( requestExplanationPeers message).
Then, Mike’s PAsubmits the question to Julia’s PA, so that Julia can be
directly contacted for the answer ( requestDirectExplanation message). At the
moment an acknowledgement is sent from Julia’s PAto Mike’s PA, a com-
mitment from the former towards the latter is created. This c ommitment
is important to guarantee a positive outcome from their inter action despite
its asynchrony. Julia’s PAsubmits the question to Julia ( requestExplanation
message). However, as stated in this commitment, even if Julia do es not
respond to the question, Mike’s PAreceives a message (in this case, the
notAvailable message). Nevertheless, in the case at hand, Julia did submit
an answer ( provideAnswer message from Julia), which is then forwarded by
Julia’s PAto Mike’s PA. Finally, Mike receives the expected answer from his
associated PA. Figure 5.16 presents the ﬁnal message exchange to end this
plan’s execution.
Mike : Peer Mike's PA : 
Peer Assistant
expl="In his case, ..." 
eval=[“9”,satisfied]evaluateExplanation 25 Mike's AM : 
Artifact Manager 
storeArtifact 
concept=”Health Ins.->…"
question=”What to do...”
answer="In this case, ..." 
eval= “9”26 
peer=”Julia” 
eval= “9”27 
updReliabPeer 
peer=”Julia” 28 
incCollabLevelPeer 
Figure 5.16: The question and answer are stored in Mike’s knowle dge repos-
itory
Having received an answer to his question, Mike analysis if it is sa tis-
factory and provides his PAwith an evaluation ( evaluateExplanation mes-
212 The KARe System
sage). By verifying that Mike is satisﬁed with the provided expl anation,
Mike’s PAsubmits it to Mike’s AM(storeArtifact message), so that question
and answer can be stored in Mike’s personal repository, being fro m now on
available for consultation by other peers with similar doubts. Note by the
concept parameter in the storeArtifact message that the question and answer
pair will be stored in the concept Mike selected to submit his que stion in
the ﬁrst place. Besides, the PAadjusts the Julia’s reliability ( updReliabPeer
message), and increases her collaborative level ( incCollabLevelPeer message)
concerning Mike.
The reliability of a peer pjaccording to the opinion of a peer piis cal-
culated as the means of all evaluations provided by piabout documents or
messages submitted by pj. Let nbe the number of times pihas evaluated
an artifact from pj, andgkthe grade given by pito an artifact received from
pj. Then, pj’s reliability is given by a simple means calculation, as shown in
Formula 5.1.
reliability (pj/pi) =/summationtextn
k=1gk
n(5.1)
The collaborative level is the measure of how many direct respo nses a
peer has given to another. Being nthe number of times pjresponds to a
direct contact from pi, the formula for increasing the collaborative level of
pjin respect to piis given by Equation 5.2. Being mthe number of times pj
does not respond to a direct contact from pi, the formula for decreasing the
collaborative level of pjin respect to piis given by Equation 5.3. In other
words, the initial collaborative level of all peers is 0 (zero ). Throughout
time, this number is updated, becoming positive or negative, according to
the peer’s respose. Thus if the collaborative level of pjis increased regarding
pi(due to an incoming response from pjtopi), this means that 1 is added to
the previous collaborative level of pjinpi’s peer model. Contrarily, if when
directly contacted, pjdoes not provide any answer to pi,pj’s collaborative
level is decreased in pi’s peer model, meaning that 1 is subtracted from pj’s
previous collaborative level.
Detailed Design 213
incCollabLevel (pj/pi) =n/summationdisplay
k=11 (5.2)
decCollabLevel (pj/pi) =m/summationdisplay
k=1−1 (5.3)
Figure 5.17 exhibits the situation in which a second user (Joey) submits
to his PA, a question similar to Mike’s. This case has been illustrated in
Fig. 5.3 of section 5.1.2. No detailed description should be nece ssary for the
Understanding the diagram of Fig. 5.17 as it follows the same log ics of the
previous diagrams described for this plan.
Question Response
In order to illustrate the question response plan, we choose to use an AOR
Interaction Pattern Diagram (IPD), as the ISD for this situat ion is too simple
and the IPD provides us with more information to support the syst em design.
The IPD presents, besides the agent interaction, the internal b ehavior of
one of the agents. Note that this diagram is built for the genera l case,
not presenting particularities of singular situations as the I SD, but instead
covering all possible outcomes of the given interaction. Figu re 5.18 presents
the IPD for the question response plan.
The diagram of Fig. 5.18 depicts the PAsubmitting a question to the
AM(searchAnswer message)5. The AM’s reactive response to the incoming
message is represented by the R1rule, detailed in Table 5.2.
When receiving the message, the AMlooks among the user’s Artifact
Models for a response that satisﬁes the incoming question. If the artifac t
is found, the AMforwards it to the PA(in case it is a previous question,
the question and answer pair is forwarded in a provideExplanation message;
contrarily, documents are submitted in provideDocument messages). In case
no artifact is found, a noAvailableArtifact message is issued.
5the parameters of this message, namely keyQuest andvectorC refer to the approach
used by KARe for artifact retrieval. More details on this approach are giv en in chapter 6
214 The KARe System:PA
checkIfExistingQuestion2Joey: Peer Joey’s PA: Peer Assistant Mike's PA: Peer Assistant
provideExplanation
 "question=”What to do…" answer=”In this case,..."
provideExplanation
 "4
53requestExplanation1
question=”I have a doubt..."class =”Policies->Payment->Health Insurance”
peer=Mike,Juliaquestion=”What to…" answer=”In this,..."Joye's AM: Artifact Manager
evaluateExplanation
expl=”In this…"eval=[7.5,satisfied]storeArtifact
concept=”Policies->…"question=”I have a...”answer="In this case, ..." eval= “7.5”6keyQuest=[doubt,client,...]vect=[(key1,freq1)]
peer=Mikeeval=7.5 updReliabPeer
Figure 5.17: Joey’s question ﬁnds a quick answer
Detailed Design 215
searchAnswer Peer Assistant Artifact Manager 
KeyQuestion,VectConc R1
<<belief>> 
Artifact ModelprovideDocument
Docs  
provideExplanation 
Question, Answer 
noAvailableArtifact
Figure 5.18: The AM’s internal behavior when the answer to a que stion is
requested by the PA
ON Event RECEIVE searchAnswer (?keyQuest,
?vectorC) FROM ?PeerAssistant
IF Condition SimilarArtifact(?keyQuest,?vectorC,
ArtifactModel(?Document))
THEN Action SEND provideDocu-
ment(?Document) TO ?PeerAs-
sistant
ELSE IF Condition Similar(?keyQuest,?vectorC, Arti-
factModel(?Question))
THEN Action SEND provideExplana-
tion(?Question?Answer) TO
?PeerAssistant
ELSE Action SEND noAvailableArtifact TO
?PeerAssistant
Table 5.2: Textual description of the rule R1 of the AM
216 The KARe System
Providing Proactive Recommendations
The Providing Proactive Recommendations Plan can actually be reﬁned
into three sub-plans, each covering one of the proactive knowl edge delivery
functionalities described in section 5.1.3, i.e. a) periodic search; b) solving
pending requests; and c) suggesting interaction with similar user s. In this
section, we present one AOR Activity Diagram for each of these fun ctional-
ities. This type of diagram combines the AOR IPD and the UML acti vity
diagram, and was ﬁrst introduced in (Taveter and Wagner, 2005 ).
The internal behavior of the PA when handling a periodic searc h is de-
picted in Figure 5.19.
Peer 
Assistant
PeriodicSearch() 
searchNewArtifacts :Peer 
Assistant
vocTax, threshold, date 
provideNewArtifacts 
lstArtifacts ProactPerExpired 
SelectTaxonomy() 
R1 
FindSimilarTax 
(tax: Taxonomy) 
R2 
WaitForResponse() 
R3 <<belief>> 
Taxonomy 
RankTrustRolePref
(lstArtifacts: list of Artifacts) 
R4 <<belief>> 
Peer {threshold,date} 
{lstArtifacts} 
Figure 5.19: The PA periodically asks other PAs for new artifac ts of interests
for its peer
ThePA’saction is triggered by an environmental event, i.e. the peri od
Detailed Design 217
for proactive recommendations set by the user (refer to the dia gram of Fig.
5.12) has expired. The task of the PAthen consists in ﬁnding new artifacts
of interest for its associated peer. As mentioned in section 5.1.1 , the user’s
interest is perceived by the taxonomies he/she maintains. Hence , for each
of the user’s taxonomies, the PAbroadcasts to the other PAsa request for
the artifacts recently created or updated, classiﬁed under sim ilar taxonomies
maintained by the remaining peers in the network (see the searchNewArti-
factsmessage). The taxonomy is represented by a general set of keyword s
referred to as vocabulary (see the vocTax in the searchNewArtifacts message).
The similarity between two taxonomies can be then calculated by comparing
their vocabularies. The keywords composing a taxonomy’s voca bulary are
chosen with basis on the concepts of the taxonomy and on the arti facts (doc-
uments and messages) classiﬁed under them. Both the vocabulary cr eation
and the similarity measure become more clear in chapter 6, wher e KARe’s
recommendation mechanism is fully described.
For controlling a satisfactory level of similarity between the taxonomies,
thePAuses a percentage threshold previously conﬁgured by the peer (refer to
the diagram of Fig. 5.12). This means that only taxonomies wh ose similarity
measure is equal or superior to the selected threshold should be co nsidered.
Besides this, the PAsreceiving the request only return artifacts that have
been created and updated after a speciﬁed date. This dateis maintained
by the PA, indicating when was the last time it has conducted a periodic
search. As indicated in the diagram, both dateandthreshold are stored in
the user model (represented by the Peerbelief).
After receiving the list of artifacts, the PAranks this list according to
the trust of its associated peer in other users, similar roles and pr eferences
regarding speciﬁc artifact type or format. In other words, ite ms coming from
trusted users, users with the same role of the peer, and complying w ith the
peer’s presentation preferences score higher and are thus pla ced on the top
of the list. The list is delivered to the peer (although not repr esented here
for simplicity) and is available for him/her until the next pe riodic search.
Figure 5.20 depicts the PAinternal behavior when solving a pending re-
quest on behalf of the peer it represents.
218 The KARe System
Peer 
Assistant 
FindAnswerPendingQuestion() 
searchAnswer :Peer 
Assistant 
KeyQuestion,VectConc 
provideDocument 
Doc ProactPer 
Expired 
SelectPendQuestions() 
R1 
FindAnswer 
(q: Message) 
R2 
WaitForResponse() 
R3 
Question, Doc pendQuestionResponse <<belief>> 
Pending 
Question 
<<belief>> 
Document Peer 
Figure 5.20: The PA looks for the answer for a pending question o n behalf
of its peer
Again, the PA’sinitiates his action after perceiving that the proactive re c-
ommendation period has expired. First, the PAlooks for pending questions
in the Message repository. For each pending message, the PAbroadcasts a
message to other PAs, searching for an appropriate answer. When receiving
the message, the other PAslook for answers among the artifacts of their peers
(following the logics of the diagram of Fig. 5.18), and submit the answers
they ﬁnd to the requesting PA. When the PAreceives the incoming docu-
ments, it checks if they have already been delivered to the pee r. Verifying
that this is not the case (note the crossed arrow coming from the Document
belief object), the PAdelivers the received knowledge artifact to the Peer.
Here, we just treat the case where the PAreceives documents as answers,
but this is a simpliﬁcation, as pairs of questions/answers could also be sent.
When receiving questions and answers as responses, the PA’streatment of
these artifacts is analogous to the documents’ treatment. Thu s, we decided
to supress this possibility for clarity purposes.
For suggesting similar peers to interact with its associated peer , thePA
Detailed Design 219
relies on the Broker . In this case, it is more interesting to design the internal
behavior of the latter than the former, as shown in Figure 5.21 .
Broker 
FindSimilarPeers() searchSimilarPeers Peer 
Assistant
vocTax, threshold,
prefRespond 
provideLstSimPeers 
lstSimPeers SelectSimilarTaxonomy() 
R1 
RankPrefResponder 
(lstPeers: list of Peers) 
R2 <<belief>> 
Peer ProactPerExpired 
{vocTax’} 
Figure 5.21: The PA searches for similar users on behalf of its asso ciated
peer
The expiration of the proactive recommendation period ( ProactPerExpired
event) once more triggers the PAto seek for proactive assistance on behalf
of its associated peer. Then, the PAsubmits to the Broker a request for a
recommendation regarding similar peers (see searchSimilarPeers message). As
in the periodic search case, the PAdoes this for each taxonomy maintained by
the peer. In other words, peers similarity is mainly given by th e comparison
of their taxonomies (representing both their interest and exp ertise). Later,
the other user model factors are used for ranking purposes.
When receiving the PA’srequest, the Broker ﬁrst compares the incoming
taxonomy vocabulary (refer to vocTax parameter of the searchSimilarPeers
message) with the vocabulary of other peers’ taxonomies, whose in formation
theBroker has been collecting in the system’s idle periods (note vocTax’
coming from the Peerbelief, which represents the user model maintained by
220 The KARe System
theBroker ). Again, the threshold earlier set by the peer is taken into acco unt
to guarantee that an adequate level of similarity is achieved . After building
a list of similar peers, the Broker ranks this list according to the cognitive
and social aspects present in the user model, i.e. expertise (still given by
the similarity of the taxonomies), reliability, trust, role an d collaborative
level. The ranking is done according to the order of preferen ces previously
established by the peer (refer to the diagram of Fig. 5.12). Thi s is the same
order used by the Broker to select responders to speciﬁc knowledg e requests,
exempliﬁed in the diagram of Fig. 5.14. The ranked list of peer s is ﬁnally
sent to the PA, which presents it to its associated peer. Furthermore, the
list is kept for user’s consultation until the next search for simi lar peers.
5.4 Integration with Other Systems
An initiative has been launched to integrate KARe to other comp lementary
tools, as part of the SCALE (Supporting Community Awareness, Lear ning,
and Evolvement) research project. The main aim of SCALE is to pr omote
the learning, development, and growth of communities of pra ctice across
small and medium enterprises through the development and inte gration of
intelligent adaptive technology. In particular, SCALE prop oses to develop a
toolbox of solutions, integrating an existing system (KEEx) and t wo other
tools under development: IVisTo and KARe. This toolbox enables media-
tion of knowledge exchange between organizational members by a) helping
users become aware of each other and their communities, b) prom oting in-
teraction, knowledge sharing, and organizational learning , and c) facilitating
the evolution of community practices.
KEEx (Bonifacio et al., 2004) allows users to share knowledge i n a peer-to-
peer fashion. Similarly to KARe, the users of KEEx contextualiz e their doc-
uments using taxonomies called contexts. Then, they are allow ed to search
for other documents by keyword or by context similarity. Whil e proﬁting
from this already available functionalities, KARe can comple ment KEEx by
granting users with the possibility of asking and answering questi ons, imi-
Integration with Other Systems 221
tating the natural processes community members use to share know ledge.
Moreover, KARe adds proactivity to the system, by suggesting know ledge
items to users, besides identifying similar peers with whom the u ser may be
interested in interacting with (refer to sections 5.1.2 and 5. 1.3 for a detailed
description of these functionalities).
IVisTo comes to enhance the visualization methods provided bot h by
KEEx and KARe. Both in KEEx and in KARe, the result set is presented
as an ordered set of knowledge artifacts, ranked by similarity c oncerning
the user query. IVisTo provides more a sophisticated way of visuali zing this
result, by raising users’ awareness of the types of knowledge comm unities
that exist in the distributed network. More speciﬁcally, this t ool allows
the visualization of KARe’s user model features (see section 5.1. 1), such as
trustability, organizational role, reliability, collabor ative level and availabil-
ity are visualized in dynamic social networks. The user is able to manipulate
such networks, choosing how to view and access knowledge artifac ts. Figure
5.22 illustrates how KARe, KEEx and IVisTo may be integrated, show ing a
snapshot of the recommendation screen.
Figure 5.22: SCALE toolbox
The left side of Figure 5.22 shows a prototype of the IVisTo tool. T he
tool takes into consideration both the social community-orie nted informa-
222 The KARe System
tion, and the more traditional and accessible lexical and seman tic similarity
information provided by KEEx. IVisTo displays a weighted combi nation of
social networks, where each social network addresses a diﬀerent u ser model
variable, and the weights are given by the user’s preferences. The bottom
half of IVisTo window contains a set of slider bars representing th e social
variables in KARe’s user model and the lexical and semantic attr ibutes given
by the lexical and context matching algorithms of the KEEx kn owledge man-
agement platform. Using these slider bars, the user can indicate th e impor-
tance, or weight, of each variable. Behind the scenes, the system generates a
social network for each of the user model variables, and then com putes one
single network by calculating a weighted sum of the individual networks.
For example, Sally’s visualizations show her in the center of t he screen, and
the peers that returned knowledge artifacts as the result of a query in the
periphery. Finally, the length of the links between her and h er peers suggest
the degree of similarity between her and her peers according t o each user
model variable. In the case of “Role”, the length of the links su ggests the
degree to which Sally holds a similar role as each of her peers. I n this way,
IVisTo can provide each user access to a personalized view of the kn owl-
edge society, weighted according to his knowledge and intere sts. A KARe
window is shown on the right side of Fig. 5.22, illustrating how K ARe may
proactively recommend a user to contact another peer with whi ch to share
knowledge.
Figure 5.23 presents the SCALE integration model, which deﬁne s the in-
teractions between the SCALE Visualization Tool, the KARe multi -agent
component and the KEEx knowledge management environment. A new
component named the User Model Engine is added to facilitate this in-
tegration. This design decision is based on the fact that all thr ee tools
may work separately, although beneﬁts are achieved by using th em as one
integrated system.
Although KEEx has its own interface, the SCALE system provides a n ew
and intelligent interface, given by IVisTo. Fig. 5.23 shows tha t the recom-
mendations provided by KARe are also available through this in terface ( User
Recommendation arrow). KEEx output (lexical and semantic information)
Related Work 223
IVisTo 
KARe ParserUM 
Storage User State 
User Values Recommendations User Update User Update 
User Values 
UM 
Engine UM 
Update KEEx 
XML 
SCALE Integration ModelUser Input
Figure 5.23: SCALE integration model
are presented in the form of an XML ﬁle, which is parsed to the User Mo del
Engine (XML and UM update arrows). The UM Engine plays a central ro le
in the integration model. It is responsible for guaranteeing t he consistency
of the user model information both to VisTo and to KARe, which upda tes
the user model based on the ongoing interactions among the othe r peers.
5.5 Related Work
In order to analyze the work related to KARe, we elaborated a mo del that
summarizes the main elements of KM systems. A KM system must provide
knowledge to the right person at the right time. Although each sy stem
presents diﬀerent architecture and functionalities, an abstr act structure can
be created to enable the analysis of their common elements. In g eneral,
KM systems integrate knowledge artifacts, disseminating them th rough the
knowledge community. In order to accomplish that, they must: a ) have
access to the semantic of the content of the available knowledg e artifacts;
and b) identify the user’s needs and preferences. The four laye rs illustrated
in Figure 5.24 provide an abstraction for reasoning about these two general
requirements.
224 The KARe System
Semantic ModelAdaptation ModelPresentation Model
Personalization 
Conc. Generalization Rep. Formalization 
Knowledge Assets Layer 1Layer 2Layer 3Layer 4
Figure 5.24: A layered view of KARe
The layers in Fig. 5.24 should be understood as diﬀerent set of ser vices
that need to be provided by a KM system. These services are disposed i n
layers to indicate that the superior layers rely on functiona lities provided
by the inferior ones. Layer 1 represents the knowledge assets exc hanged by
the knowledge community. As earlier described in section 4.10, knowledge
artifacts may be classiﬁed into documents andmessages . The diﬀerence
between documents and messages is important because they have d iﬀerent
purposes within the community. While a document is used by the c ommu-
nity members to learn about a particular procedure or topic, messages are
typically used for communication purposes (for instance, to in form some-
thing, to clarify doubts and to debate particular issues). Messag es can be
regarded as important resources for the disambiguation of tac it knowledge.
As already pointed out, much of one’s knowledge is not register ed in any
kind of physical artifact, but rather conﬁned in one’s mind. Ne vertheless,
Nonaka and Takeuchi (1995) have informed us that intuitions, f eelings and
tacit ideas can be socialized between community members, thro ugh direct
communication (refer to chapter 2 for a discussion on socializat ion).
The Semantic Model of layer 2 is responsible for the reasoning of the sys-
tem about the content of knowledge artifacts, addressing the pr oblem early
mentioned in a). Thus, the Semantic Model is responsible for the two tasks
described by Fischer and Ostwald (2001) as related to knowledge integration
in KMSs: representational formalization , i.e. putting information in an ap-
propriate computational syntax so that the system can access and i nterpret
Related Work 225
it; and conceptual generalization , i.e. providing domain speciﬁc semantics to
each knowledge artifact.
The problem early presented in b) is addressed by Layers 3 and 4: t he
Adaptation Model and the Presentation Model, respectively. Th e Adapta-
tion Model is speciﬁcally concerned with ‘what’ is going to be presented to
the users, while the Presentation Model determines ‘how’ such kn owledge
will be presented. Both layers deal with Personalization, i.e . consider user’s
needs and preferences, through their user models to support kno wledge de-
livery.
5.5.1 Materializing the Semantic Model
Representation Formalization can be generally achieved by p roviding some
metadata about the stored knowledge artifacts. Metadata (such as title,
owner, author, date, etc.) enable a systematic organization o f knowledge
artifacts in a way that important information about them may be easily
captured by the system. Important here is how to decide which me tadata
should be considered. There are several ongoing initiatives re lated to the
deﬁnition of metadata speciﬁc for certain knowledge ﬁelds. On e of these
initiatives is the EDUTELLA project Nejdl et al. (2002), which aims at
providing a peer-to-peer networking infrastructure to suppo rt the exchange
of educational material. In order to accomplish this, peers ca n make their
documents available in the network, specifying metadata inf ormation as a
set of RDF statements.
Several researches adopt the Dublin Core Initiative6as the initial or
complete set of metadata. However, as mentioned in (Davies et a l., 2003a),
some metadata might be speciﬁc for a given community. This way, it is ad-
visable to keep this option customizable, allowing the commun ity members
to negotiate and create new relevant metadata for their part icular purposes.
A common way to organize this information is the use of a databa se to
centralize and eﬃciently recover metadata about knowledge artifacts. Al-
ternatively, metadata languages may be applied, such as XML or RDF, the
6http://dublincore.org/
226 The KARe System
latter presenting more reasoning power the the former (Davies et al., 2003b).
In order to accomplish concept generalization, artifacts ma y be classiﬁed
according to a domain conceptualization. Although taxonomi es and ontolo-
gies have been used in the past, the Semantic Web has recently in creased
the interest on using such conceptual models to explicitate the semantics re-
garding knowledge artifacts (Davies et al., 2003b). A taxon omy is somewhat
more restrict than an ontology as it mainly focuses on hierarch ical relations
between concepts, usually depicted in a tree structure. Figure 5.25 illustrates
the diﬀerence between ontologies and taxonomies. Regarding concepts these
two methods of conceptualization are equivalent. However, a s shown in the
ﬁgure, ontologies admit more complex types of relations tha n taxonomies.
Several applications in the Semantic Web rely on ontologies to support
KM. Reimer et al. (2003) for example, builds an ontology of ski lls to support
the development of a catalog of workers. This catalog can suppo rt users on
ﬁnding experts on speciﬁc subjects, tasks and skills. Another system i s On-
toShare (Davies et al., 2003a), which creates a content mana gement system
used by organization’s members to classify and share knowledge a rtifacts
based on a shared ontology. OntoShare users annotate documents using
RDF and classify them according to an ontology. Besides deliver ing knowl-
edge reactively, by matching the incoming documents with th e user model,
the system is able to proactively retrieve knowledge to the user . Diﬀerently
than KARe, however, this system adopts a client-server approach , and pre-
supposes the existence of a shared conceptualization (ontology ) among the
members of the community.
KEEx (Bonifacio et al., 2004), on the other hand, apply taxon omies (re-
ferred to as contexts) as conceptual frameworks to mediate th e exchange
of knowledge between peers. Another adept of taxonomies is Hype rwave7,
which classiﬁes the resources according to taxonomies that can be then con-
sulted by the system users. KARe shares similar vision with KEEx, since i t
is also based on the Distributed Knowledge Management approach (DKM)
(Bonifacio and Bouquet, 2002). KEEx allows each individual or community
7Knowledge Management with the Hyperwave eKnowledge Infrastructure, whitepaper
available at http://www.hyperwave.com/
Related Work 227
Real Estate 
Estate-to-live-in Business Estate 
House Apartment Office Building Hotel 
Real Estate 
Estate-to-live-in Business Estate 
House Apartment Office Hotel 
Floor 
Room is-a Is-a
part-of part-of 
part-of Address located-in Person 
owned-by 
is-a is-a is-a is-aA) Taxonomy 
B) Ontology 
Figure 5.25: Exerpts of a real estate A) taxonomy and B) ontolog y
228 The KARe System
of users to build their own knowledge space within a network of a utonomous
peers. Each peer can make documents locally available, along with their
context. When searching documents from other peers, a set of pro tocols
of meaning negotiation (Bouquet et al., 2003) are used to achi eve semantic
coordination between the diﬀerent representations (contex ts) of each peer.
KEEx is speciﬁcally concerned with the exchange of documents and does not
address peer collaboration through the exchange of messages, wh ich is one of
the targets of KARe. In this sense, as described in section 5.4, KARe adds
functionality over KEEx, supporting the natural social proce sses of asking
and answering questions. As a result, KARe adjusts better into curre nt orga-
nizational practices, providing the opportunity for organi zational members
to solve problems and doubts in collaboration with their work mates.
The choice of using taxonomies instead of ontologies is motiva ted by the
DKM philosophy, which defends that rather than sharing an uniq ue concep-
tualization, each organizational member has his own view of his/her work
domain. Thus, both in KEEx and in KARe, each user builds his own co n-
ceptual model. As ontologies are generally considered too com plex and time
consuming to be built, we consider taxonomies as a more realisti c model
for the common user to create. In a sense, many workers already cr eate
directory classiﬁcations of this kind, both for physical or dig ital ﬁle systems.
SWAP (Fensel et al., 2003) also adopts the DKM strategy, relying i n what
they term “lightweight” ontologies. The authors have not so fa r clariﬁed,
however, the nature of these lightweight ontologies, and how t hey relate both
to the more general concept of ontology and to taxonomies.
We do acknowledge that several organizations are today invest ing on the
construction of ontologies to describe their activities and d omains of exper-
tise (Reimer et al., 2003) (Gangemi et al., 2003) (Gruninger e t al., 2000).
Seeking to proﬁt from these eﬀorts, an organization ontology c an be used as
an initial conceptual model for KARe’s users. The users may them c hoose
parts of this bigger conceptualization to classify their arti facts, based on
their own interests and targeted areas.
Related Work 229
5.5.2 Supporting the Adaptation and Presentation
Layers
The Adaptation and Presentation Models are responsible for prov iding the
system with the means to retrieve knowledge according to the use r’s par-
ticular needs, interests and preferences. In order to accompli sh that, these
layers are commonly built around a user model, as the one descri bed in sec-
tion 5.1.1. In this section, we describe how other systems model t heir users
in comparison with KARe8.
TheAdaptation Model is concerned with ‘what’ piece of knowledge is
needed in particular situations. Diﬀerent characteristics ma y be explored
to combine knowledge artifact’s content and user’s need. For example, two
of the most common features used to classify diﬀerent users is interest and
expertise . Interest is commonly used as a basis for the system to provide
new knowledge artifacts to the user, while expertise is the mai n source for
referrals to speciﬁc users as knowledge providers. Similarly t o KARe, IVisTo
(Soller et al., 2004) and Ontoshare (Davies et al., 2003a) cla ssify the user’s
interest and expertise based on the concepts they choose to classif y their
belonging artifacts. In MARS (Yu and Singh, 2002), such informa tion comes
as a vector of keywords, created and updated with basis on questi ons and
answers exchanged by the users.
I-Help (Bull et al., 2001) gathers information of interest and expertise
from topics provided by the users, but also using data mining in re cords
gathered throughout user’s interaction with system tools. I-Hel p has recently
evolved towards the peer-to-peer model (Vassileva, 2002).A st udent needing
help can request it through his/her agent, which ﬁnds other stud ents who
are currently online and have expertise in the area related to the question.
As in KARe, there is a centralized matchmaker service, which mai ntains
models of the users competences and matches them to the help-r equests.
On the other hand, this system does not support management and sha ring
8besides systems speciﬁcally tailored for KM, we also considered three e-learning sys -
tems (AdELE, Elena, and I-Help) in our classiﬁcation. This is justiﬁed by the fact t hat
they are representative of systems aimed at ﬂexibly delivering knowledge to the user s
(learners, in these cases), possessing elements of all the layers of our model
230 The KARe System
of documents, restricting itself to messages exchange.
Regarding reliability , i.e. the level of expertise of a provider regarding a
particular topic, MARS adopts a similar approach in comparison to KARe.
This system also locally updates the reliability of the provide rs (i.e. on the
seeker’s user model), based on the seeker’s feedback regarding t he incoming
response to a particular query.
Concerning trust, three other tools support an approach similar to the
one adopted in KARe, i.e. through a “list of friends”: IVisTo and I- Help.
Besides positive trust indication, I-Help provides the additio nal possibility
of indication of a non-trust list.
Once more, IVisTo shares with KARe the collaborative level approach,
calculating it based on direct feedback given by a knowledge p rovider to a
knowledge seeker. In MARS, this feature, referred to as sociabi lity, is calcu-
lated by the ability of an agent to refer to others with valuab le information.
MARS calculates and updates this value based on user feedback.
FRODO (van Elst et al., 2001) and IVisTo (Soller et al., 2004) also con-
siderrolesas one of the main determinants of a speciﬁc knowledge need. As
in KARe, in these two other systems, the user’s roles are indicated b y the
users themselves.
The physical context of the user may also be an important subsidy fo r
the Adaptation Model. For example, speciﬁc knowledge artifac ts may be of
help when users are executing a given task. Both KnowMore (Abeck er et al.,
2000) and FRODO (van Elst et al., 2001) monitor the user’s current task , by
integrating an workﬂow management system as part of their KM sol ution.
FRODO provides an interesting approach of classifying tasks acc ording to a
task ontology, and then indicating the information needs req uired by speciﬁc
tasks. In this way, the system is able to retrieve supporting knowl edge
artifacts from the available ones in the organizational mem ory. AdELE
(Garcia-Barrios et al., 2004) monitors the user’s reading ta sk, tracking his or
her eye-movement to produce ﬁne-grained data about user read ing behavior.
The collected information is used to adjust the user model regar ding interest
and expertise of the user on particular topics, thus supporting t he system
Related Work 231
on suggesting new content.
Besides the Adaptation Model, the Presentation Model is also sup-
ported by the user model. Rather than focusing on ‘what’ knowle dge to
present, this model is concerned with the way knowledge should be pre-
sented. Hence, the Presentation Model is focused on format rathe r than
on content. As described in section 5.1.1, KARe provides knowled ge to the
users, based on their presentation preferences and on their physical context
(time and location). Similarly, AdELE (Garcia-Barrios et al ., 2004) also
bases its choice on presentation format using contextual infor mation gath-
ered with eye tracking technology (e.g. delivering more ima ges/tables for a
user that has problems with large and complicated texts).
5.5.3 Using the Layered Model to Classify KM Sys-
tems
The discussion regarding KARe’s related work is summarized in Tab le 5.3.
This table illustrates how to use the provided layered model to classify dif-
ferent KM systems. This allows us to discuss their diﬀerent functi onalities
and solutions in light of the semantic, adaptation and presenta tion models
described before. We can note from the comparison presented in t he table,
which systems provide more or less support for each layer of the mo del.
For instance, Hyperwave, KRAFT and Ontoshare provide no support t o
the adaptation and presentation layers, concentrating only o n the semantic
model. MARS, on the other hand, places greater strength on the a dapta-
tion model, presenting limited support to the semantic layer, a nd no support
to the presentation layer. Understanding these diﬀerentiation s may assist
the determination of which supporting system to use in a particul ar case.
The table shows that KARe covers well all three models, thus prov iding a
comprehensive range of functionality for its users.
232 The KARe System
5.6 Conclusions
This chapter has proposed and designed the KARe system. KARe aims
at supporting Constructivist KM, by ﬂexibly imitating the socia l processes
that lead to knowledge sharing through question and answering. The sys-
tem fulﬁlls the requirements elicited in chapter 4, providi ng an appropriate
means for newcomers and old-timers of Communities of Practi ce to share
knowledge. For that, KARe adopts a peer-to-peer infrastructu re, granting
users with more control over their knowledge items, providing information
about experts in speciﬁc topics, and creating a dynamic enviro nment for col-
laboration and knowledge exchange. In addition to that, the system reﬂects
a layered model, which considers both the need for the syntacti c and seman-
tic representation of knowledge artifacts, and the beneﬁts of adapting these
artifacts to user’s personal and cognitive characteristic, an d presentation
preferences.
For the design of KARe, we applied ARKnowD, successfully verifying the
usefulness of our methodology to support this development acti vity. AR-
KnowD supports the analyst and designer to go all the way from dom ain
analysis to system architectural and detailed design. The design er starts
with a Tropos model of the system’s architecture and slowly move s towards
the detailed design, where AORML has been applied. The transfo rmation
method previously deﬁned in section 3.7.3 was applied in this c hapter, con-
verting from Tropos to AORML notation. This transformation f acilitates
the understanding of the system model, and help the designer to tr ace back
the system’s functionalities to the requirements elicited du ring the previ-
ous analysis activity. For instance, the AM’s organizing knowledge artifacts
andmaintaining taxonomies plans, respectively modeled by the AOR ISDs of
Figs. 5.11 and 5.10 accomplish the AM’s providing p2p knowledge repository
goal. This goal has been generated by the allowing peers to keep control of
their assets , delegated by KARe to the AM. And ﬁnally, tracing it back to
the domain analysis presented in chapter 4, this goal has been p reviously
delegated by the CoPto the KARe system (refer to the diagram on Fig.
4.7).
Conclusions 233Systems Layer 1: KA Layer 2: SM Layer 3: AM Layer 4: PM
Doc Msg Metadt Ont/Tax Inter. Expert. Reliab. Trust Role Col.Lev. Context Pref Context
AdELE x x x x x x x
Elena x x x x x x
FRODO x x x x x x x x
Hyperwave x x x x
I-Help x x x x x x x x x
IVisTo x x x x x x x
KARe x x x x x x x x x x x x x
KEEx x x x
KnowMore x x x x
KRAFT x x x
MARS x x x x x
OntoShare x x x
Table 5.3: Classifying KM systems classiﬁed according to the layer ed model
234 The KARe System
Throughout KARe’s design, we exempliﬁed all major constructs a nd mod-
eling techniques of the AOR external model (Wagner, 2003). F rom Figs. 5.7
to 5.9 exemplify AOR’s information modeling diagram, namel y the Agent
Diagram (AD). These ﬁgures show all AD’s constructs, such as the diﬀe rent
types of AOR agents (human, institutional and artiﬁcial), an d several types
of relations (e.g. specialization, composition, association, ternary relation
and communication), most of them borrowed from UML. These diagr ams
have shown diﬀerent views from the system: while Fig. 5.8 focus o n a con-
ceptual view of the system, Fig. 5.9 presents a design view, depic ting only
the elements of the actual system and abstracting away from enti ties of the
domain. AOR interaction modeling diagrams are illustrated f rom Fig. 5.10
to Fig. 5.20. All diagrams present message passing between agents, a nd
some (as for example, Fig. 5.10 and Fig. 5.13) also illustrate ag ent’s non-
communicative actions. The use of commitment (and claim) is ex empliﬁed
in Figs. 5.14 and 5.15, showing the strength of this construct to e nable ex-
ception handling, and especially the control of asynchronous communication
between agents when humans are involved (5.15). Finally, Fi gs. 5.18 to 5.21
show how AORML deals with behavior modeling, with the use of rea ction
rules.
The design of KARe at this point is still platform-independent, thus con-
sisting in the MDA PIM described in section 3.7.1. The next chapte r adjusts
this PIM for a speciﬁc platform, namely the Java Agent Developm ent Frame-
work (JADE). Other platforms could be chosen, for example the sy stem
could have been implemented in pure Java, or using the Jxta fra mework9,
speciﬁcally targeting the development of peer-to-peer system s. In this thesis,
however, we opted for keeping the agent-oriented nature of t he system from
analysis to implementation. For implementation of agent-or iented systems,
JADE oﬀers a good solution, in which agents adopt particular be haviors,
communicate through message exchange, and are supported by a co mmon
communication ontology.
9http://www.jxta.org/
Chapter 6
Recommendation Algorithm
and Implementations
“Nothing becomes real until
it is experienced.”
John Keats
In this chapter, we present the core algorithm underlying KARe , i.e. the
algorithm that handles the questioning-answering process. Suc h algorithm is
based on an Information Retrieval technique that models know ledge artifacts
using their most important keywords. Besides, such algorithm consi ders
information from the taxonomic structures used to classify these artifacts
to ﬁnd a suitable answer to an incoming knowledge request. Secti on 6.2
presents an introductory overview on Information Retrieval research, de-
scribing some techniques that are useful for contextualizing o ur work. Fol-
lowing, section 6.3 describes KARe’s recommendation algorith m in detail,
including its evaluation.
A second objective of this chapter is to present the remaining o f the de-
tailed design of KARe, enabling its implementation with the JAD E frame-
work. By doing this, we hope to demonstrate that the ARKnowD meth od-
ology enables the analyst and designer to consistently go from th e domain
analysis (described in chapter 4) to system design, initiated in c hapter 5 and
completed here. This ﬁnal design stage (presented in section 6.4 ) leads us
235
236 Recommendation Algorithm and Implementations
through KARe’s implementation using the JADE framework.
Further in this chapter, section 6.5 describes the developed K ARe pro-
totypes, providing their general idea and implementation de tails. Finally,
related work can be found in section 6.6, and section 6.7 conclu des this
chapter.
6.1 Introduction
The principle underlying KARe is to support KM by imitating the natural
processes of social interaction, allowing organizational mem bers to ask and
answer questions. As a consequence of this conceptual choice, the core of the
system consists in mediating the question and answering process. An im por-
tant part of handling this process comprises the automatic rec ommendation
of existing answers to users’ questions. This answer may be present in the
form of documents or responses to previously similar questions, bo th clas-
siﬁed under the taxonomies maintained by each system peer. This chapter
describes an algorithm developed to support KARe’s recommenda tions.
The presently described algorithm is based on Information Retrieval (IR)
techniques. Information Retrieval is an established but consta ntly evolving
area of research that deals with all processes related to accessin g relevant in-
formation in large collections of documents (Baeza-Yates a nd Ribeiro-Neto,
1999) (Salton and McGill, 1983). Thus, research in this ﬁeld ta rgets some of
the most pressing challenges of the information society, aiding people to ef-
fectively handle information overload. The relevance of in formation retrieval
for KM support becomes obvious, since KM systems are highly based on the
storage of explicit knowledge to be later retrieved accordin g to the situation
at hand.
According to Baeza-Yates and Ribeiro-Neto (1999, pg. 3), “the eﬀective
retrieval of relevant information is directly aﬀected both b y the user task and
by the logical view of the documents adopted by the retrieval system” . Logical
view of the documents refers to how information items are rep resented by the
system. A popular technique is representing documents as a set of keywords
Introduction 237
automatically extracted from it, or assigned to it by a speciali st. KARe’s
peer-to-peer nature conditions the retrieval algorithm bo th regarding the
user task and the information item’s logical view. The knowled ge items
stored by a peer are not viewed as a ﬂat collection of documents. Instead,
the set of documents are structured by a taxonomy which classiﬁes each of
these items under a concept of the tree.
As described in chapter 5, KARe users’ begin by classifying knowledg e
artifacts (such as work documents and the like) using their own taxonomies,
much in line with the use of a structured ﬁle system. In other words, each
artifact is classiﬁed in a node of the taxonomy, analogous to sto ring ﬁles in
folders of structured ﬁle system. The choice of using taxonomies to classify
knowledge artifacts provide the system peers with a contextua lized view of
knowledge artifacts, as already described in section 5.1.2. How ever, this is
just part of the reason why this choice has been made. Another stro ng claim
we make is that such information may be helpful in aiding our re commender
agent to automatically ﬁnd knowledge on behalf of the system use rs.
In a traditional IR system, items are equally distributed in the document
collection, which should be completely searched when a retrie val request
is issued by the user. In KARe, however, taxonomies are used to classi fy
documents. Consequently, the system is able to search for the answe r only
considering particular nodes of the taxonomy where the answer is probably
located. Besides diminishing computational complexity, thi s approach allows
the system to proﬁt from user knowledge, previously encoded in pe rsonal
taxonomies, to retrieve knowledge more precisely.
The search process is triggered when a user asks a question, which h e/she
ﬁrst assigns to a concept (node) in his/her taxonomy. Hence, a quest ion
(or knowledge request) is logically represented not only by th e keywords
it contains but also by the keywords representing the concept w hich clas-
siﬁes it. For ﬁnding an appropriate answer, KARe must ﬁrst match tw o
distinguishing taxonomies, analogously to (Avesani et al., 2005) and (Bou-
quet et al., 2003). More precisely, when receiving a knowledg e request from
thequestioner , the system must ﬁnd in the responders’ taxonomies which
concepts are more likely to contain artifacts that satisfy thi s request, subse-
238 Recommendation Algorithm and Implementations
quently retrieving it. The concept representation is obtain ed by considering
its position in the taxonomy, and by the documents classiﬁed und er it.
Although our assumption about the gains of applying taxonomies seems
reasonable, it can only be proved by testing our algorithm using real datasets.
Thus, besides describing the applied techniques, this chapter a lso presents
empirical data to validate them.
6.2 Information Retrieval
Information Retrieval relates to the representation, storag e, organization
and access to information items (Salton and McGill, 1983). Re search in
this area has initially been motivated by the growth of tradi tional libraries.
However, the use of information technology in such libraries, al ong with the
emergence of digital libraries have given new strength to thi s research ﬁeld.
Information is usually embedded in a document , which is deﬁned as: “a
single unit of information, typically text in digital form, b ut it can also in-
clude other media. It can be a complete logical unit, like a re search article, a
book or a manual. It can also be part of a larger text, such as a p aragraph or
a sequence of paragraphs. A document can be any physical unit, for example
a ﬁle, an email, or a web page.” (Baeza-Yates and Ribeiro-Neto, 1999, pg.
142). In this sense, document as deﬁned here comprehends both t he concept
ofdocument andmessage previously deﬁned in section 4.10. From now
on, we use the term ‘document’ having this more general meanin g.
In traditional IR systems, we can distinguish three phases that com pose
the information retrieval process:
•Analysis and Indexing : each new document is analyzed and appropri-
ately described by a set of index terms. After being suitably classiﬁ ed,
the document is incorporated in the existing information col lection.
•Querying : a request is formulated according to established proceed-
ings, aiming at satisfying the user’s information needs.
Information Retrieval 239
•Retrieving and Presentation : a retrieval mechanism is used to ﬁnd and
present the available documents that may be of interest to the u ser.
Besides these three main phases, some pre-processing operations ar e often
executed to prepare the document to be indexed and searched. T hus, IR
systems (IRSs) usually follow a general structure, illustrated in ﬁgure 6.1.
The main components of an IRS are: 1) the user interface, where the user
is allowed to enter his query; 2) the text pre-processor and 3) the indexer,
which together accomplishes the analysis and indexing phase; and ﬁnally, 4)
the searching mechanism, responsible for handling the query and performing
the last stage of retrieving and orderly presenting items. The following
sub-sections discuss three of the main components of an IRS: the t ext pre-
processor (section 6.2.1), the indexer (section 6.2.2) and the se archer (section
6.2.3). Further, we summarize the classic IR modeling approach es (section
6.2.4) and the main evaluation mechanisms for IRSs (section 6. 2.5).
INDEXING SEARCHING Text Database User 
Interface 
Text
Pre-Processor 
Query 
Operations Indexer Database 
Manager 
Searcher Index 
Ranking Ranked 
Documents Retrieved 
Documents Query User 
Feedback Logical
View User 
Need 
Logical
View TextText
Indexed 
File 
Figure 6.1: Our view on the information retrieval systems’ gene ral architec-
ture
240 Recommendation Algorithm and Implementations
6.2.1 Text Pre-processing
In order to create the vocabulary of a collection (i.e. the mo st representative
terms of the collection), we must select all the index-terms th at are relevant
to represent our collection and include them in the vocabular y index. This
implies some text operations to select the index terms. Mostly no un terms
are selected because these usually carry the semantics in a sentenc e. Text
pre-processing is thus a necessary step to improve the performanc e of any
IRS. The most common operations performed over text are the lexical anal-
ysis,elimination of stopwords andstemming .
Lexical Analysis
The objective of the lexical analysis is to treat digits, hyphe ns, punctuation
marks and the case of letters. This leads to the identiﬁcation o f individual
words in the text, so that with the words in hands, one can disrega rd the
ones that are not good index terms for searching (such as number s). This
procedure often includes the removal of punctuation and hyp henation, and
sometimes even the case of the letters.
Elimination of Stopwords
Stopwords are terms such as articles, conjunctions, adverbs an d prepositions,
which are generally too common in all documents. They are usual ly ﬁltered
out because they are useless for information retrieval purposes, since they do
not diﬀerentiate documents. In other words, these terms freque ntly appear
in all documents, independently of the document’s content. T hus, they
are not considered good index terms. An advantage of the elimina tion of
stopwords is that it reduces the size of the index, so the system can be faster
when performing the search.
Stemming
Stemming is the process of reducing a word to a common root, i.e . it reduces
word variants to a common concept. This could be achieved by r emoving
Information Retrieval 241
preﬁxes and suﬃxes to a “stem”. So, if we have only stems instead of words
(and their variants) in our index, the search can be more precise and faster.
For example, the words ’swimming’, ’swimmer’ and ’swim’ should a ll be
represented by the same stem ’swim’. There are several types of stem ming
such as table lookup, successor variety, and aﬃx removals.
6.2.2 Indexing
The indexing activity consists in attributing a set of terms tha t identify the
content of a new document to be included in the collection. Th is activity
is considered by many researcher as the most diﬃcult of all, due t o the
complexity of ﬁnding the ideal set of terms to represent each do cument
(Salton and McGill, 1983).
Indexing is redundant if the collection is small, or if it allo ws search in
the entire text of each document each time a query is made. In p ractice, this
solution was very costly, however, today, this is a common appr oach used
by Web-based search engine. However, still in our days, instead of u sing a
full text search, many IRSs use data structures representing the collection
index. This is an appropriate choice when searching in static o r semi-static
collections. Only if the IRS is used for a dynamic collection, o ne could think
of combining the two approaches, i.e. a small database for search ing the
new documents (while they have not yet been indexed) and a lar ge index
for searching the old ones.
Most IRSs use the inverted ﬁle index data structure. Figure 6.2 i llustrates
this method. The index terms consist of a set of words selected dur ing the
text pre-processing. Next to each index term, there is a list of tu ples in
the format ( Document;Occurrences ), which respectively identify a document
where a given index term appears, and how many times it occurs i n such
a document. In this way, for each word on the database, we can di rectly
retrieve the documents where it is located, knowing also how m any times it
has appeared in each document.
To select which words should be part of the index (an operation c ommonly
known as feature selection ), the most well-known approach is based on the
242 Recommendation Algorithm and Implementations
Documents/Occurrences Index Terms 
Computer 
Science 
Abstract
System 
Algorithm 
Introduction Doc1;30 
Doc2;3 
Doc3;23 
Doc1;30 
Doc3;8 
Doc4;15 Doc2;3 
Doc5;9 
Doc4;15 
Doc5;10 
Doc4;9 
Doc5;3 Doc4;15 
Doc6;7 
Doc6;10 
Doc6;3 
Doc5;15 
Doc7;1 
Figure 6.2: Illustrating the inverted documents index
frequency of the words in the text of each document. This tech nique is based
on the calculation of the frequency of all words in a document , organizing
them in descending order according to the frequency. Then, a su perior and
an inferior threshold are determined, and the words of middle frequency are
chosen as the index terms. The most frequent words are eliminate d because
they usually are stopwords, while the less frequent terms are lef t out for not
being representative of the content of that particular docum ent.
6.2.3 Searching
As can be noted in Fig. 6.1, searching occurs in three steps: 1) que rying; 2)
the search itself and 3) ranking of the results.
Querying refers to the stage when the user expresses his/her information
need, through a system request. The most common querying approac hes
are the use of keywords, sometimes combined with boolean operat ors: AND,
OR, and NOT, which respectively indicate conjunction, disjunc tion and ex-
clusion of query terms (Baeza-Yates and Ribeiro-Neto, 1999). For providing
a more intuitive interface for the common user, some search engi nes substi-
tute AND and OR operators for statements such as “including all wo rds” and
“including one or more words” respectively (see for instance, th e advanced
search of Google1and Altavista2)
1http://www.google.com/advaced search?hl=pt-BR
2http://www.altavista.com/web/adv
Information Retrieval 243
Thesearching andranking mechanisms depend on the kind of informa-
tion retrieval model the system was built upon. For example, th e algorithms
that apply boolean search do not use any ranking mechanism, since this type
of search may only indicate if the document satisﬁes or not a give n query.
Besides the boolean model, another common IR model is the vect or model.
In this model, both the indexing terms and the query terms rec eive weights.
These weights are then used to compute the similarity between th e docu-
ments and the user query. In this way, the system also considers doc uments
that partially satisfy a query, providing them a lower grade th an to those
that completely satisfy the query. Section 6.2.4 describes IR m odeling in
detail.
It is important to note that the retrieval may result in an empt y result
set. This is due to the diﬃculty in generating a perfect combin ation between
index and query terms, since the choice for both is uncertain. T he indexers
usually apply a rule of speciﬁcity to choose index terms, while qu ery users
tend to use more general terms. This is one of the biggest limitat ions of
IRSs, minimized by the adoption of one of proposed query reﬁnem ent tech-
niques (Chen and Dhar, 1989). In general, these techniques str ongly rely on
interaction with the user, who reﬁnes the query based on his exp erience and
on the ranking mechanism.
A way of reducing the eﬀort of the user on manipulating the resul t set, also
helping him on formulating new queries, is to contextualize t he documents
of the result set according to the user query. A popular techniqu e is the use
ofmetadata beside the title of the retrieved documents (e.g. date, source ,
ﬁle size and abstract), providing extra information for the use r concerning
the retrieved documents. Other techniques include highlighting in the text
of the retrieved documents the query terms, or providing a KWIC (keyword-
in-context) , which is a summary of the document, extracting from it a few
sentences in which the query terms occur.
244 Recommendation Algorithm and Implementations
6.2.4 Modeling
As mentioned in chapter 3, a model is an abstract representation of a portion
of the real world. With such representation one is able to simula te problems
and solve them by analysis. Thus, regarding IR Models, we understan d that
on one hand, there is information representation and on the ot her hand,
there are the diﬀerent retrieving mechanism.
More speciﬁcally, “information representation” refers to th e logical view
of a collection of documents and the queries that form the inp ut of a system.
The approach to retrieve the information would be a framewor k that models
the documents and queries into its logical forms, and a rankin g function
that orders the document set according to queries. Thus, as Baez a-Yates
and Ribeiro-Neto (1999) mention, the IR models may be represen ted as a
quadruple D, Q, F, R( qi,dj) where:
•D is the document set. The documents are represented as the elem ents
of the set. D : d1,d2, . . . , dn;
•Q is the user query;
•F is the framework to model documents and queries into a logic al form;
•R(qi,dj) is a function to rank documents according to a particular
query.
There are diﬀerent ways to approach the modeling “framework ” and the
“ranking function”. This results in diﬀerent IR models, such as: the boolean
model, the probabilistic model and the vector model. In this w ork, we apply
the vector model, thus describing it in detail. The other two a pproaches are
only brieﬂy described.
Boolean Model
The boolean model is the most intuitive one among the three. Th e queries
are represented by boolean expressions (composed of keywords th at are com-
bined by the boolean operators: AND, OR, and NOT). Documents are t hen
Information Retrieval 245
classiﬁed as being relevant or not, based on this query. Thus, thi s approach
does not consider documents that only partially match a query , since boolean
expressions are not ﬂexible. In systems that apply this kind of mo del, the
creation of queries is usually simple, but generally leads to l arge response
document sets with lots of irrelevant documents. In order to ﬁn d more rel-
evant documents, the user must know more about the information t o be
extracted. In this sense, the user ﬁrst makes a broader query and t hen,
reﬁnes this query by examining the result set. This is usually an iterative
process and its success depends on the user’s experience on the to pic.
Probabilistic Model
This model attempts to capture the IR problem within a probab ilistic frame-
work. It assumes that an “ideal answer set” exists for a given query , contain-
ing exactly all relevant documents to answer this query. The p roblem then
consists in determining which properties (characterized by i ndex terms) de-
scribe this ideal answer set. As these properties are initially un known, the
functioning of this model directly depends on user interacti on. A proba-
bilistic system ﬁrst generates guesses on the probability of the do cuments’
relevance given a particular query. Then, the user is requeste d to evaluate
the retrieved document set, informing the system about his/her e valuation
regarding the relevance of each document. The system subsequent ly uses
this information to reﬁne the query. By repeating this proce ss several times,
it is expected that the initial description will evolve to a cl oser description
of the ideal answer set, thus providing better results.
Vector Model
In the IR vector model, documents and queries are treated as r eal algebraic
vectors where the dimension of the vectors is determined by th e dimension
of the vocabulary (i.e. the vectors size is given by the size of t he vocabulary
index) (Baeza-Yates and Ribeiro-Neto, 1999). Therefore, on ce the vocab-
ulary has been determined (i.e. the text is pre-processed, det ermining the
index-terms), all documents are represented by vectors. Each d imension of
246 Recommendation Algorithm and Implementations
the vectors is calculated based on the frequency of each index term in each
document itself. Having this vectorial representation, it is p ossible to cal-
culate the similarity between couples of documents or betwee n a document
and a query.
In ﬁgure 6.3, the depicted vectors are the abstraction of a que ry (Q) and
any particular document ( dfrom a set of documents D), and the angle θindi-
cates how close these vectors are, thus indicating the similari ty between the
document and the query. There are several measures for vectors similarity,
and one of the most well-known of them is the cosine of the angle θformed
by the vectors. Due to the popularity of this approach, in this work, the
cosine measure is also applied. As a consequence of being a cosine, t he result
of the similarity function varies from 0 to 1 in an ascending ord er of vectors
similarity. Equation 6.1 describes a cosine similarity between vectors.
dj
QΘ
Figure 6.3: The cosine function is used to compute the similarit y between a
query Q and a document dj
similarity (→
dj,→
Q) =/summationtextt
i=1wi,j·wi,Q/radicalBig/summationtextt
i=1w2
i,j·/radicalBig/summationtextt
i=1w2
i,Q(6.1)
Here, wi,jis the weight of the index terms of document→
djandwi,Qis the
weight of the index terms of the query→
Q.
Each dimension value of the vectors is computed based on the fre quency
of the index term in question on the document collection. Ther e are several
ways to compute the dimension’s weight and this process is call ed index term
weighting. For this work, we chose the TF∗IDF method (see Equation
6.2). This method computes the weight in two steps. First, we cal culate the
Information Retrieval 247
term frequency (TF, represented by fk) of a particular index term in each
document. Secondly, we calculate the amount of documents th at contain the
termwk, i.e. inverse document frequency (IDF, represented by logN
nk). In
this equation, Nrepresents the total amount of documents in the collection,
while nkcharacterizes the number of documents containing index ter mwk.
The aim of using both TF and IDF in the weight calculation is on o ne hand,
to increase the weight if a term is very popular in a document an d on the
other hand, to penalize the weight (i.e. to decrease its value ) if the term is
present amongst many documents.
wk=fk∗logN
nk(6.2)
6.2.5 Evaluation
There is no absolute measure that evaluates how good an IR system o r
algorithm is. Usually, algorithms are measured according to the irprecision
andrecall and compared with each other. To ﬁnd a unique number to be
compared, the F1 measure is often used. This measure is an averag e of the
precision and recall results. It is important to remember that t o compare
two systems, one must use the same set of documents and queries.
Precision
Precision is the relevance measure to the searcher of the items t hat are
retrieved, i.e. if a search returns ten documents of which nin e are very
relevant, that search has high precision. This measure is more i mportant
when the users of the system prefer an approach that retrieves a sp eciﬁc
document very fast.
precision =NumberRetrievedRelevantDocuments
NumberRetrievedDocuments(6.3)
The precision, as can be noted by equation 6.3, measures the abi lity of
the system to refuse the non-relevant documents. In other words, i t is a
measure of the correctness of the system’s retrieval approach.
248 Recommendation Algorithm and Implementations
Recall
Recall is the proportion of relevant information that is ret rieved by the
search, i.e. if a search only retrieves one hundred relevant do cuments out of
three thousand that are available (and relevant), that search has low recall.
On the other hand, if it retrieves all the available document s on the topic
of the search, it has high recall. This measure is, thus, dependen t on the
documents of the collection. This measure is more important w hen the
users of the system prefer an approach that retrieves the highest number
of documents around a speciﬁc topic, but are not concerned on ﬁ nding one
speciﬁc document quickly.
recall =NumberRetrievedRelevantDocuments
TotalNumberRelevantDocuments(6.4)
As we can see on equation 6.4, the recall measures the ability of t he system
to retrieve relevant documents. Thus, recall refers to the completeness of the
result set according to all relevant documents contained in th e collection.
F1 measure
There are several measures that try to combine the value of prec ision and
recall, referred as the “F measures”, as they are known as F1, F2 , and so on.
The most well known of them is F1, which is calculated based on eq uation
6.5
F1 =2∗precision ∗recall
precision +recall(6.5)
6.3 Recommendation Algorithm
In this section, we present KARe’s recommendation algorithm. As explained
in section 5.1.2, a user contextualizes his question according to his/her tax-
onomy, while the answer is searched in the taxonomies of the rem aining peers
in the network. Section 6.3.1 describes how the algorithm acc omplishes this,
Recommendation Algorithm 249
and section 6.3.2 presents the result of an experiment carried o ut in order
to evaluate the algorithm’s performance.
6.3.1 Description
For ﬁnding relevant documents in a collection, the standard I R vector model
approach computes the similarity between the user query and al l the docu-
ments in the given collection, selecting the most similar vecto rs as the winner
documents (Baeza-Yates and Ribeiro-Neto, 1999). However, th is approach
disregards any knowledge that users may have about the structur e and con-
cepts of the artifacts being searched. This can lead to increa sed noise on
the search results. For instance, trying to search for the word “ag ents” in
Google3results in documents about several diﬀerent kinds of agents (e .g.
chemical agents, software agents, real state agents and travel a gents).
In KARe, the user classiﬁes his/her documents according to a person al
taxonomy. In this way, similar documents are grouped by the use r under the
same concept in the taxonomy tree. In addition to that, before submitting
the question, the user contextualizes the query, assigning it to a speciﬁc con-
cept in the taxonomy. By doing this, the user gives to the system an extra
hint on the query’s content. Aiming at reducing the noise of the search, our
algorithm exploits the taxonomic information supplied by th e user to deter-
mine the region of the search space where the required informat ion is more
likely to be found. Besides providing more accurate results, th is approach
also reduces the computational complexity of the algorithm i n comparison
with the standard approach. This happens due to the fact that t he stan-
dard approach needs to search the whole documents collection (complete
search space) for an answer. Conversely, following our algorith m, KARe
only searchers particular regions of the search space.
To illustrate our approach, we go back to the example earlier p resented in
section 5.1.2. Consider two users Mike and Joey, whose taxonomie s are de-
picted in Figure 6.4. The taxonomies classify the user’s persona l documents
and also serve to contextualize the user’s question. Suppose now t hat Joey
3http://www.google.com
250 Recommendation Algorithm and Implementations
makes the following question: “How should we deal with clients’ l ate pay-
ment?”, contextualizing it in the ‘Policy’ concept of his ta xonomy. Referring
back to the example presented in section 5.1.2, we know that Mik e had a
similar doubt in the past (i.e. he previously asked “What measures should
we take when a client is late with his payment for the acquired services?”)
whose answer is now classiﬁed under the concept ‘Premium’. But ho w can
KARe know about that?
Insurance 
Life Health My Work 
Policies Joey 
Q
Mike 
Health insurance 
Client Competitors 
Premium Standard 
?
Figure 6.4: Taxonomies of Mike and Joey contextualizing doc uments and
questions
Our algorithm should be able to identify which concept in Mike ’s taxon-
omy is more similar to the ‘Policy’ concept, where Joey’s quest ion is contex-
tualized. Then, the answer can be searched within this concept . Essentially,
each of the concepts of the user taxonomy has a vectorial repre sentation.
Each concept’s vector is a mirror of the peer’s collection in dex vector (also
referred as vocabulary), containing the weight of the keywo rds that appear
in the documents classiﬁed under the concept. Figure 6.5 illust rates a short
vocabulary index and a vector representing a given concept C, which con-
tains the index terms ‘client’, ‘insurance’ ‘pay’, and ‘heal th’, but does not
contain the terms ‘life’ and ‘customer’. In this ﬁgure, the use d weights are
boolean (i.e. ‘1’ indicates the presence of an index term, whi le ‘0’ indicates
absence). Conversely, in our approach, the weights are given b y a frac-
tion that measures the suitability of the index term to represen t a certain
Recommendation Algorithm 251
concept. For ﬁnding the most similar concept to a given concept C, the
algorithm calculates the similarity between the vector repr esenting C and
the vector of each of the concepts in the responder taxonomy.
clientinsurance pay health life costumerVocabulary index 
1 1 1 1 0 0Vector of Concept C 
Figure 6.5: A short vocabulary index and a vector representing a given
concept C in the user taxonomy
The vector of a concept is calculated with basis on the vectors represent-
ing the documents classiﬁed under that concept. Besides the doc uments’
keywords, the concept label is also considered in the vector cal culation. In
fact, not only the label of the concept itself, but in addition also the labels
of the ancestors of the given concept are taken into account, a s has been
earlier proposed in (Adami et al., 2003). More precisely, this i s achieved
by including the labels of all concepts of the taxonomy in the collection’s
vocabulary. Consequently, the label of the concept along wit h the label of
the concept’s ancestors are considered in the concept’s vecto r calculation.
The determination of the concept reference vectors follows the equation 6.6.
w(term i,concept j) =/summationtextn
k=1wi,k
n(6.6)
Here, w(term i,concept j) stands for the weight of the term “i” on the
concept “j”. Such an approach was based on the TF∗IDFmeasure already
described in section 6.2.4. Equation 6.6 is basically an averag e formula,
which calculates concept vector C based on an average of the we ight of
the keywords pertaining to all documents classiﬁed under conc ept C (thus,
variable wi,krepresents the weight of the term “i” on the document “k”).
We call the process of ﬁnding the best matching concept in the re sponder’s
taxonomy query scope reduction . This is the main novelty of our approach.
In summary, the query scope reduction can be seen as a reduction i n the
search space before we retrieve information from it, based on the fact that
252 Recommendation Algorithm and Implementations
the required information is more likely to be found in a speciﬁ c region of
this space (in the example above, within Mike’s ‘Premium’ con cept that is
more similar to the ‘Policy’ concept selected by Joey to contex tualize his
query). Adding this process prior to the execution of the query , the quality
of our search increases, resulting in a less noisy result set, thus rec ommending
mostly pertinent documents to the users. In addition to that, it considerably
reduces the computational complexity of the algorithm since it diminishes
the set of documents to be searched.
It is important to note that each user has a diﬀerent vocabular y index,
i.e. the vectors of the concepts in each taxonomy are created based on
diﬀerent sets of keywords (index terms). Consequently, the ﬁrst step on
the query scope reduction is to project the concept vector com ing from the
questioner in the new space of the responder. This is made by calc ulating
the intersection between the index vector of the questioner an d the index
vector of the responder. In this way, the concept vector comin g from the
questioner may be projected into the vocabulary of the respond er. This
projection is another novelty of our algorithm, speciﬁcally targeted at the
problem of coping with diﬀerent semantic representations of a domain.
After the query scope reduction step, the answer to the user’s quest ion is
searched within the documents classiﬁed under the best matching concept.
For that, all keywords of the user’s query are taken into accou nt to select
the artifacts of the given concept. In addition to the query’ s keywords, the
labels of the concept classifying the query and its ancestors ar e attached to
the query (as extra keywords), this way embedding the query wi th enriched
contextualized information. The documents are then ranked in a descending
order according to the similarity with the query, and the resul t set is ﬁnally
sent to the questioner. Our recommendation algorithm is summar ized in the
pseudo-code shown in Listing 6.1. The similarity function is lef t general to
emphasize that although the algorithm now applies the cosine t o determine
vectors’ similarity, this function can be substituted for other measures in the
future.
Recommendation Algorithm 253
Listing 6.1: An excerpt of KARe’s recommendation algorithm
procedure answer(concVectA, peerQuest, questioner)
{
//step 1: search the best matching concept for
//the scope reduction
projConceptVectorA := intersect(concVectA,
indexB)
for each (concept on the user B context) {
s := similarity(currentConceptVectorB,
projConceptVectorA)
if (s > maxSimilarity) {
bestConcept := currentConceptB
maxSimilarity := s
}
}
//step 2: search among the documents in the
//bestConcept
queryVector := createQueryVector(peerQuest,
indexB)
for each (document in bestConcept)
documentList.add(document,
similarity(queryVector,documentVector))
documentList.sortBySimilarity()
//step 3: send the answer back to
//the questioner
sendAnswer(documentList, questioner)
}
254 Recommendation Algorithm and Implementations
6.3.2 Evaluation
The theory behind our algorithm seems to be consistent, however in order
to prove that it actually brings any gains in the eﬃciency and accuracy of
our search, it is advisable to evaluate it through an experimen t using real
data.
The ideal situation would be to experiment our algorithm agai nst two
taxonomies classifying real questions and answers. However such da taset is
not available at the moment. Thus, we decided to simulate this d ataset using
two taxonomies that classify scientiﬁc papers. The question is sim ulated by
the title of the paper and the answer is given by the paper’s bod y. This
seems reasonable because a question is usually short, providing us with a
few keywords for the search. The answer, on the other hand, tend s to be
a longer piece of text. For performing the experiment, we hav e used two
existing taxonomies: the questioner’s taxonomy has been creat ed by a PhD
student to collect papers of her interest, while the one of the r esponder is
taken from the ACM Computing Classiﬁcation System4. Table 6.1 presents
some statistics regarding these two taxonomies.
Questioner’s Taxonomy Responder’s Taxonomy
Number of Documents 250 315
Number of Concepts 28 15
Average Docs/Concepts 9 21
Table 6.1: Some statistics regarding the experiment taxonomi es
The experiment may be divided into two main phases: 1) preparat ion of
the taxonomies; and 2) execution of the evaluation experimen t. In the ﬁrst
phase, the following activities were performed:
•the papers that were to be used as queries were selected. These pa pers
should be classiﬁed by both taxonomies so that we know which is the
contextualizing concept in the questioner’s taxonomy and th e concept
the algorithm should ﬁnd in the responder’s taxonomy;
4http://www.acm.org/class/
Recommendation Algorithm 255
•the selected papers were subtracted from the questioner’s taxo nomy
to avoid bias (i.e. the keywords of the selected papers should n ot be
used to compute the concept vectors in the questioner’s taxono my);
•the titles of all papers were subtracted from the papers classiﬁ ed by
both taxonomies to avoid bias (i.e. the title keywords should not
be used to compute the concept and document vectors in both tax -
onomies), as they were to be used as queries.
Figure 6.6 illustrates the process carried out to execute the e valuation
experiment. The ﬁrst step is to manually contextualize the que ry, by as-
signing it to a concept in the questioner’s taxonomy. In fact, t he informa-
tion regarding which concept should contextualize the query was already
known, since the queries were extracted from papers classiﬁed u nder both
taxonomies (refer to items 1 and 2 above). Next, the query (i.e . a pa-
per title) is preprocessed and submitted to the algorithm (the k eywords of
the title, along with the contextualizing concept’s vector are sent to the
responder’s taxonomy). The algorithm then searches for a conc ept in the
responder’s taxonomy (query scope reduction). After the targe ted concept
is found, the answer to the query is retrieved from the documen ts within
this concept. Finally, we compare the result set with the query , verifying if
the algorithm is able to: 1) ﬁnd in the responder’s taxonomy, t heconcept
that classiﬁes the paper whose title is the query; and 2) retrieve from the
responder’s taxonomy, the speciﬁc paper corresponding to the title used
as query.
We have compared the results of our algorithm with the standard ap-
proach based on the vector model (i.e. without the query scope r eduction
step). Concerning our approach, we have considered two option s: a) to
have on the result set only the best matching concept with the que stioning
concept; and b) to have a small subset of concepts that best matche d the
questioning concept. We evaluated these three approaches in t erms of recall
(i.e. the fraction of relevant documents retrieved) and precision (i.e. the
fraction of retrieved documents that are relevant), calcul ated using equa-
tions 6.4 and 6.3 respectively. Then, the harmonic mean “F1” o f recall and
256 Recommendation Algorithm and Implementations
Questioner's Taxonomy Responder's Taxonomy 
Query = Title Query 
+
Contextual
Info 
Query Scope 
Reduction 
Result Set
Compare: Is the paper 
corresponding to Title in the 
Resultset? 12
3
4
5
Figure 6.6: The evaluation experiment
precision was calculated based on equation 6.5 and used to compa re our
results.
We performed 75 queries over our taxonomies, and the results ar e shown
on table 6.2. The ﬁrst column of the table shows the results of the stan-
dard approach. The second, third and fourth columns show the re sults of
our approach when returning documents from one, two and thre e concepts
respectively.
Standard
Approach1 concept 2 concepts 3 concepts
Number of Queries 75
Documents Found (DF) 69 25 37 43
F1 (DF) 0.920 0.333 0.493 0.573
F1 (RDF) 0.175 0.243 0.238 0.206
Comp. Complexity 158K 21K 33K 43K
Table 6.2: Experiment results
As previously illustrated in Fig. 6.6, our evaluation considers two im-
portant results. Hence, F1 was correspondingly calculated based on two
measures: 1) the number of times the algorithm ﬁnds the speciﬁc d ocument
whose title is being searched (which we call DF) and 2) the retri eved num-
ber of related documents to the one being searched, given by th e number
Recommendation Algorithm 257
Recall Variation 
0.00000 0.20000 0.40000 0.60000 0.80000 1.00000 1.20000 
1 5 9 13 17 21 25 29 33 37 41 45 49 53 57 61 65 69 73 
Query Number Recall
Standard 1 concept
(A)
Recall Variation 
0.00000 0.20000 0.40000 0.60000 0.80000 1.00000 1.20000 
1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 
Query Number Recall 
Standard 2 concepts 
(B)
Recall Variation 
0.00000 0.20000 0.40000 0.60000 0.80000 1.00000 1.20000 
1 6 11 16 21 26 31 36 41 46 51 56 61 66 71 
Query Number Recall 
Standard 3 concepts 
(C)
Figure 6.7: Comparison of recall measure taking the standard approa ch and our
proposed approach using (A) 1 concept, (B) 2 concepts and (C) 3 co ncepts
258 Recommendation Algorithm and Implementations
of documents that are classiﬁed under the concept being searche d (which
we call RDF). For the F1(DF) value, the standard technique has a better
measure. However, this approach has performed poorly for the F 1(RDF)
value, besides having high computational complexity (refer to the measure
of 158K, which corresponds to the number of comparisons perfor med by
the algorithm). Conversely, in general our approach returne d more related
documents than the standard approach, thus having better F1( RDF). In
addition to that, our approach considerably reduces the numb er of compar-
isons needed to reach a result (see that for 1 concept, it needs 21 K; for 2
concepts, 33K; and for 3 concepts, 43K comparisons).
Our ﬁrst attempt considering only one responding concept result ed in
a low F1(DF) value compared to the standard approach. This led us to
consider adding ﬂexibility to our algorithm, allowing it to se lect a small
set of concepts in the responder’s taxonomy. Taking this appro ach, we in-
creased the number of speciﬁc documents found. Besides, this enh anced
approach has two advantages over the standard one, as it retri eves more re-
lated documents (better F1(RDF) value), while having a low c omputational
complexity. In general, when we increase the number or searche d concepts,
we increase the chance of ﬁnding the speciﬁc paper we look for, b ut we also
end up having a result set with more noise. This can be explained b y the
fact that when ﬁnding the right concept, the approach searchi ng only one
concept returns only relevant documents (i.e. documents pe rtaining to the
same concept as the speciﬁc paper being search). However, such app roach
has the disadvantage of not ﬁnding the right concept many time s. This be-
comes apparent by the comparison of the graphics exhibited in Figure 6.7.
These graphics exhibit comparisons between the standard appro ach and each
variation of our algorithm.
In summary, the results show that the best solution requires achie ving the
right balance between the probability of ﬁnding very speciﬁc information and
the ability of retrieving related information (i.e. less noi sy result sets). It
is also important to note that increasing the probability of ﬁn ding speciﬁc
information also increases the number of comparisons the algor ithm should
perform, thus turning the algorithm more computational com plex. The
Concluding KARe’s Detailed Design 259
results also appoint in which direction our work should proceed , which is
enhancing the ability of the algorithm of ﬁnding the right co ncept. Once
this is done, it will not be necessary to increase the number of sea rched
concepts anymore. This solution will then combine both ﬁndin g speciﬁc and
related information at once, while also keeping the computat ional complexity
very low.
6.4 Concluding KARe’s Detailed Design
In this section, we detail the design of the KARe system, started in c hapter 5.
We begin by reﬁning the AOR Agent Diagram (AD) presented in sectio n 5.3,
which results in the AD depicted in Figure 6.8. This diagram is sp eciﬁcally
tailored for implementation in JADE, corresponding in MDA ter ms to the
Platform Speciﬁc Model (PSM) (a brief discussion on MDA is avail able in
section 3.7).
In Fig. 6.8, we ﬁnd most of the agent and classes previously depict ed
in the design AD presented in Fig. 5.9 (refer to section 5.3). These are
thePeer Assistant , the Artifact Manager ,Concept ,Taxonomy , and Knowl-
edge Artifact , further specialized into Document andMessage . These are the
agents and objects relevant for the implementation of the pa rt of the system
corresponding to the recommendation algorithm.
Besides these already known classes, seven other object classes have been
added in the diagram. Six of these objects are related to the re commenda-
tion algorithm described in section 6.3. Each knowledge artif act is parsed
by aText Pre-Processor . During this stage, a number of operations are per-
formed on the artifact, such as stemming and stopwords removal ( see section
6.2.1). After the pre-processing step, the content of the knowle dge artifact
is represented as a set of Index Terms . In other words, an Index Term is
a keyword from a document or a message after being pre-processed. The
whole set of Index Terms consists the peers collection Vocabulary , and this is
the basis for the creation of the Inverted File Index (refer to section 6.2.2).
TheVector class concerns the vectors that represent each concept and eac h
260 Recommendation Algorithm and ImplementationsnamemyLocationamLocationuserInterfaceknowledgeBaseontologyPeer Assistant<<artificial>>
namemyLocationpaLocationtaxonomyknowledgeBaseontologyArtifact Manager<<artificial>>
Text Pre-Processor
stopwordList: String[*] String performStemming(word: String)
KnowledgeArtifact
date: DateTimeconcept: ConceptfileName: FileDocument
author: Stringtitle: Stringtype: String
Message
originator: Stringdestination: Stringsubject: String
Taxonomy
concepts: Concept[*] Concept getConceptRoot()Vocabulary
indexTerms: IndexTerm[*]Indexer
token: Stringdocuments: List
Searcher
token: Stringdocuments: ListConcept
artifacts: KnowledgeArtifact[*]parent: ConceptconceptName: StringIndexTerm
token: Stringartifacts: List
* 1
1111
11
*
**
* *
*String ASKS_PEERASSISTANT;String ASKS_QUESTION;String ASKS;String ANSWERS_ANSWER;String ANSWERS_PEERASSISTANT;String ANSWERS;String PEERQUESTION_EXTENDEDMODEL;String PEERQUESTION_TERM;String PEERQUESTION_QUERY;String PEERQUESTION_WEIGHT;String PEERQUESTION;String PEERANSWER_ARTIFACTTITLE;String PEERANSWER_CONCEPT;String PEERANSWER_SIMILARITY;String PEERANSWER;KareOntology
Vector
size: intvalues: double[*]1
1
1
11*1
*
*1
Figure 6.8: Reﬁned AOR Agent Diagram
Concluding KARe’s Detailed Design 261
knowledge artifact, enabling KARe to provide a recommendati on. The In-
dexer class is responsible for maintaining the Inverted File Index, i .e. for
adding and removing artifacts to and from the index. Finally , theSearcher
class is responsible for consulting the index ﬁle when a particul ar query is
submitted.
The remaining class ( KAReOntology ) concerns the use of the JADE frame-
work for the system implementation. To communicate in the JADE a gent
platform, agents need to agree on the semantics of the messages e xchanged
by them. For that, the agents share an ontology that deﬁnes the concep-
tualization of the agents’ messages for a particular domain. In our case,
we developed the KareOntology as indicated by the respective class. The
attributes of this class reﬂect the structure of the communica tion ontology
as described in section 6.4.1.
The AD of Fig. 6.8 shows the attributes of all agent and object cl asses.
Concerning the agent classes, besides the domain-speciﬁc attrib utes (e.g.
name, taxonomy, knowledgeBase, etc.) we included the platfo rm speciﬁc
attributes (e.g. myLocation, ontology). These last ones are e ssential for the
agent’s interaction in the system.
6.4.1 Agent Communication Ontology
As seen in section 3.5, an ontology is composed of a set of concepts a nd
relations, aiming at creating a shared understanding of a parti cular domain.
In this way, ontologies can be used as an agreed-upon vocabula ry for ex-
changing information. This approach is adopted in JADE, whic h prescribes
that agents should communicate using a shared ontology. Figure 6.9 shows
the communication ontology used in KARe.
Fig. 6.9 shows ﬁve diﬀerent entities speciﬁc to KARe, and the rel ations
among them. The ArtifactManager andPeerAssistant entities represent the
two KARe agents implemented in JADE. Agents play the central rol e on any
ontology deﬁned to the JADE platform since most events and other entities
should be related to them.
There are three entities that are central to the communicati on process:
262 Recommendation Algorithm and Implementations
-name : string 
-addresses : string 
-resolvers : AgentAgent
Agent::ArtifactManager Agent::PeerAssistantis-a is-a 
-term : string 
-weight : float
-query : string 
-mode : string PeerQuestion 
-artifactTitle : string 
-similarity : float
-concept : string PeerAnswer 
-title : string 
-concept : string Artifactowned-by collaborates-with 
asked-by answered-by 
is-a 
is-a 
Figure 6.9: KARe’s communication ontology
theArtifact , aPeer Question and a Peer Answer . An Artifact is owned by
theArtifact Manager . Note that in our conceptual AD diagram (Fig. 5.8),
thePeerowns the Knowledge Artifacts . We diﬀer this here because the im-
plementation does not consider human agents. Since the Artifact Manager
controls the access to the artifacts through the recommendat ion algorithm,
we modeled it as the owner of the artifacts in the eyes of the syst em. Most
importantly there are the Peer Question andPeer Answer entities, which
respectively represent the questions and answers exchanged in t he system.
Both entities are Knowledge Artifacts asked and answered by Peer Assistants .
6.4.2 Interaction Modeling
Most of the interactions among KARe agents were previously mode led in sec-
tion 5.3.1. Here, we present only an AOR Interaction Frame Diag ram (IFD)
that is especially suitable to explicitate the interface betw een two artiﬁcial
agents. In this way, Figure 6.10 depicts all interaction possib ilities between
Concluding KARe’s Detailed Design 263
thePeer Assistant and the Artifact Manager , the two agents targeted so far in
KARe’s implementation. These interactions may be directly in ferred from
the previously created AOR interaction diagrams (refer to ch apter 5).
searchAnswer Peer Assistant Artifact Manager 
keyQuestion,vectConc 
provideDocument
docs 
provideExplanation 
question, answer 
noAvailableArtifact
storeArtifact
concept,question,answer,
eval
Figure 6.10: AOR Interaction Frame Diagram explicitating i nterface be-
tween PA and AM
Aiming at illustrating how such interaction is materialized in to code, list-
ing 6.2 illustrates how the SearchAnswer message from the PAto the AM
is implemented in JADE. Such interaction is achieved through speech act,
according to the FIPA ACL5format adopted in JADE. Following this stan-
dard, the message has a content, a sender, a receiver, is written in a speciﬁc
content language (in this case, FIPA SL), and uses the vocabula ry speci-
ﬁed in a particular ontology (here, the communication ontol ogy previously
described in section 6.4.1)
In the remaining of this section, we model the interactions be tween the
system objects instead of agents using UML Sequence Diagrams. Note t hat
in such a diagram, messages between objects are actually method calls,
which directly access the object’s code. This contrasts with A OR ISDs,
5http://www.ﬁpa.org
264 Recommendation Algorithm and Implementations
where messages between agents are speech acts, which should be tre ated by
each agent, before perfoming an action in response.
Listing 6.2: Coding agent communication through speech act
//create the question, identifying
//communication performative
ACLMessage msg = new ACLMessage
(ACLMessage.QUERY_IF);
// set receiver’s agent identifier
msg.addReceiver(new AID(artifactManagerName,
AID.ISLOCALNAME));
// set sender’s agent identifier
msg.setSender(this.myAgent.getAID());
// set the language used to write the msg
msg.setLanguage(codec.getName());
// set the communication ontology
msg.setOntology(ontology.getName());
// add the content of the message, i.e. the
// SearchAnswer message parameters
// keyQuestion, vecConc
manager.fillContent(msg, keyQuest_vecConc);
// send message
this.myAgent.send(msg);
Indexing
We start by analysing the indexing process, depicted in Figure 6. 11. The
indexing process is triggered by the Artifact Manager (AM) . TheIndexer is the
class that receives the method call createIndex from the AMand is responsible
Concluding KARe’s Detailed Design 265
for handling the process of index creation. For that, the Indexer receives two
parameters: 1) a list of documents to be indexed and 2) the taxon omy that
classiﬁes these documents. The ﬁrst step towards the creation of th e index
is to parse each Concept of the Taxonomy . The parseConcept method triggers
theparseArtifact method, to parse each Knowledge Artifact contained in each
given Concept . This step is necessary to create the vocabulary and index
terms of the system. At this point, the TextPreProcessor is called to perform
stemming and stopwords removal ( parseToken method) in each artifact.
i: Indexer p: TextPreProcessor 
createIndex(List: documents; Taxonomy: tax) 
parseConcept(Concept: c; List: docs) 
parseArtifact(File: artifact) 
parseToken(String: token) 
createIndexElement(String: token; int: count; Knowl edgeArtifact: artifact) 
performFeatureSelection(int: vocabularySize) v: Vocabulary it: IndexTerm 
create(String: token; int: count; KnowledgeArtifact : artifact) v: Vector 
createVector(int: vocabularySize) 
calculateWeights() getTerm()  
AM: ArtifactManager 
Figure 6.11: UML Sequence Diagram modeling the indexing proc ess
Next, each keyword is then inserted in the vocabulary ( createIndexEle-
ment andcreate methods). For that, we create an IndexTerm instance to
represent the processed keyword. Following this, the Indexer should per-
form a feature selection operation (see section 6.2.2) to reduce the index
ﬁle to an appropriate size ( performFeatureSelection method). Once the ﬁnal
266 Recommendation Algorithm and Implementations
index is determined, the Indexer can create the Vectors for the concepts and
knowledge artifacts. On this step, the weight for each term in e ach artifact
and in each concept is calculated and stored on the Vectors (getTerm and
calculateWeights methods).
Searching
Figure 6.12 depicts the object’s interaction for performin g a search in the sys-
tem. The searching process describes how the system ﬁnds suitable k nowl-
edge artifacts to respond to a question submitted by the AM. This process
corresponds to the SimilarArtifacts function presented in the textual de-
scription of R1 rule of Fig. 5.18, implementing the reaction t aken by the
AMwhen receiving an incoming knowledge request.
s: Searcher p: TextPreProcessor
query(String: question; Vocabulary: v; Vector: conc eptVector)
parseQuery(String: question)
normalizeConceptVector(Vector: conceptVector): Vector
getVector(Concept: c)
storeSimilarity(Vector: conceptVector; Vector v)
getBestConcepts(int: x_bestConcepts)c: Concept
getArtifacts()getConcept()
createQueryVector(String: question)
storeSimilarity(Vector: vQuestion; Vector: artifact )
returnDocumentList() 
AM: ArtifactManager
projectConceptVector(Vector: conceptVector)
Figure 6.12: UML Sequence Diagram modeling the searching proc ess
The main component here is the Searcher , which centralizes the query
handling process and interacts with the user. When a question is made, the
Prototypes 267
ﬁrst step is to pre-process it ( parseQuery method). In this way, the question
has the same format as an artifact, i.e. it has the stopwords rem oved and
stemming performed. After parsing the question, it is important to project
the questioner’s vector into the responder’s vocabulary ( projectConceptVector
method). In other words, the concept vector should be translate d to the
responder’s vocabulary.
At this point, the actual search begins by ﬁnding a suitable con cept on the
responders taxonomy, similar to the questioning concept. In ot her words,
the query scope reduction is executed. In this step, the getVector ,storeS-
imilarity andgetBestConcepts methods are executed. First, the questioning
concept vector should be compared to each concept vector on th e destination
taxonomy. For that, each responder’s concept vector should be retrieved and
checked against the questioning concept vector. On the end of t his process,
we will be able to retrieve the best matching concepts with the question-
ing concept. To calculate the similarity, we apply equation 6 .1, already
described in section 6.2.4.
Once the algorithm ﬁnds the right concept, the artifacts cla ssiﬁed under
this concept are retrieved ( getConcept andgetArtifacts methods), enabling
their comparison with the question itself. Next, the Searcher creates a vector
containing the question keywords. This vector is compared wit h the vectors
of the retrieved knowledge artifacts ( storeSimilarity method). The similar-
ity between each artifact and the incoming question is used as a ranking
function. The ranked artifacts are ﬁnally returned to the use r, presenting
them in descending order according to the artifacts similarit y measure when
compared to the query.
6.5 Prototypes
Two prototypes of the KARe system were implemented: a desktop com puter
version and one for access in a handheld device. These two protot ypes are
described in the sequence.
268 Recommendation Algorithm and Implementations
6.5.1 Desktop Prototype
The main purpose of having KARe as a desktop system is to allow orga-
nizational members to exchange knowledge while organizing their personal
knowledge items locally (Ludermir et al., 2005). The system ag ents should
mediate knowledge exchange in the peer-to-peer network, pr oviding recom-
mendations according to the algorithm presented in section 6. 3.
Figure 6.13 shows a screenshot of the desktop prototype. On the le ft
part of the window, the ﬁgure depicts a user taxonomy, showing i n a tree
of concepts, how the user structured his/her knowledge. On the to p, there
is a text box where the user enters his question, followed by a “S earch”
button. Having inserted the question, the user may press this butt on to
trigger the searching mechanism. The “Results” of the search are sh own
in the right side of the screen, classiﬁed by peer (the peer from wh ich the
artifact was retrieved), and ordered by the similarity of the artifact regarding
the question submitted by the user.
Figure 6.13: A screenshot of the desktop prototype
The desktop prototype was developed as two integrated compon ents, as
shown in Figure 6.5.1. Such component scheme aims at providing a plug-
gable architecture with replaceable parts. The components c ommunicate
with each other via well deﬁned interfaces facilitating the adaptability of
new components into the architecture. For instance, the info rmation re-
trieval component could be replaced by any other “searching” mechanism
Prototypes 269
if more appropriate techniques are developed in the future. Moreover, we
could use any agent platform that conforms to the FIPA speciﬁca tions to
compose the recommender agents component.
Recommender Agents 
Information Retrieval 
Figure 6.14: Two components composing the desktop prototype
The prototype was completely implemented in Java. The Recommender
Agents component was implemented using the JADE framework6. JADE
works as a middleware for the agents communication. The agen ts are imple-
mented via Java classes that communicate with each other via Ja va RMI.
To enable their communication, an ontology was developed, a s presented in
section 6.4.1. This ontology has been designed using the Prot´ e g´ e Ontology
Editor7, and implemented in Java classes using the Beangenerator Prot´ eg´ e
plug-in8.
The implementation of the Information Retrieval component is based
on the use of the Lucene library9. Lucene is a search engine library that
contains implementations of well-known algorithms and com ponents used in
our system, such as: the inverted ﬁle index, a stopword remover com ponent
and the stemming algorithm. Persistence of the relevant metada ta regarding
knowledge artifacts was achieved with the use of XML10ﬁles. The taxonomy
is also represented in an XML ﬁle, structured as prescribed in a par ticularly
developed XML schema.
6http://jade.tilab.com/
7http://protege.stanford.edu/
8http://acklin.nl/page.php?id=34
9http://lucene.apache.org/
10http://www.w3c.org
270 Recommendation Algorithm and Implementations
6.5.2 Handheld Prototype
The KARe handheld prototype (Ludermir, 2005) is based on the assu mption
that suitable responders to a speciﬁc question can be selected base d on their
geographical proximity to the questioner. This assumption com es from the
realization that people usually share spaces with individuals with whom they
share interests, e.g. workmates within an organization, resear chers in a con-
ference, and classmates in an educational institution. This ve rsion of KARe
ﬁts into the category of the so-called nomadic services , which comprehends
network services that are accessible by mobile computing indep endently of
the user’s geographical location (Ludermir, 2005).
By changing user’s location, the recommendation is likely to change as
well. In contrast, if you try to get a recommendation from the d esktop
system, the result is the same until the document index is updated . This
happens because, as seen in the design of KARe’s desktop system (see fo r
example, Fig. 5.13), the system searches for knowledge artifac ts by broad-
casting the knowledge request to all peers connected to the net work. Thus,
such design is slightly modiﬁed to accommodate the new search mod e. Af-
ter receiving a request from the user, a search is triggered when the system
senses the presence of another peer in the vicinity. The request i s then sub-
mitted solely to this peer. In this way, the handheld prototyp e also avoids
the problems of scaling the system to a great number of peers, whic h still
remains to be targeted in the desktop version.
The development of the handheld prototype adds an extra comp onent
on top of the ones previously described in section 6.5.1, as shown in Figure
6.15. The interface between the new Peer Discovery component and the
Recommender Agent component is achieved by wrapping up outputs of the
former into Agent Communication Language (ACL) messages that a re then
sent to the latter.
Figure 6.16 shows the distribution of the components of KARe. Th e
elements are physically distributed in three locations: handh eld computers,
desktop computers and a server. The server can be federated by ma ny
stations, but is here shown as a single entity for simplicity. The d ashed
Prototypes 271
Recommender Agents 
Information Retrieval Peer Discovery 
Figure 6.15: Extra component for the development of the hand held proto-
type
arrows show the dependency between components, and the number s within
the circles show execution ordering.
User's PC User A 
WiFiUser B 
Agent’ ServerUser
Knowledge 
Base 
Internet
Directory FacilitatorPeer AssistantUser's PC 
Artifact Manager
User
Knowledge 
Base IR Algorithm Peer Assistant
Peers 
Registry 14 3
6
4
5710 
11 
12 13 16 
iPAQ KARe 
Scanner
iPAQ KARe 
Scanner
15 1
Artifact Manager
IR Algorithm User
Questions User
Questions 89Bluetooth 2
Figure 6.16: Distribution of the ﬁxed and handheld component s
As can be noted, each user has access to one handheld and one deskto p
computer which are connected via a wireless connection (802. 11x). Each
handheld is responsible for sensing the presence of other devices in the vicin-
ity and to advertise its presence to its neighbors. The device di scovery is
performed using a bluetooth link . When another handheld is detected, the
272 Recommendation Algorithm and Implementations
information about the new device is sent to the user’s desktop co mputer.
Such information is forwarded to the server to verify whether the found
device is part of KARe peer-to-peer network or not.
When presence of another KARe peer is sensed, the Peer Assistant Agent
contacts the “respondent” Peer Assistant to trigger the recommendation
process. If the “respondent” peer recommends any artifact, the user is con-
tacted on his handheld. Bellow we describe each step shown in Fig . 6.16 in
detail.
•Device Discovery (1): In each handheld there is a module named
“KARe scanner”. This module collects information about the de vices
found in the vicinity via bluetooth and triggers the device v eriﬁcation
process.
•Device Veriﬁcation (2, 3, 4, 5, 6): Once the handheld is detected
and collected identiﬁcation information about another dev ice, it sends
this information to the user’s computer (step 2). The user’s Peer
Assistant receives the information and veriﬁes whether it corresponds
to another peer or not. For that, it forwards this informatio n to the
Directory Facilitator agent (step 3) that consults the peers services
database to check for the peer’s existence (steps 4 and 5). When
it knows about the discovered device status, the Directory Facilitator
sends its ﬁndings back to the questioner Peer Assistant (step 6). If the
discovered device is a peer in the KARe network the recommendat ion
process is triggered, and otherwise it is aborted. Figure 6.17 (A) shows
the resulting screen in the handheld after identifying the dev ices that
run KARe.
•Recommendation process preparation (7, 8): Before actually starting
the recommendation process, the Peer Assistant agent consults the
User Questions database. If there are any questions, the Peer As-
sistant wraps each question with the appropriate format for sending
them over the network.
•Recommendation process (9, 14): This process is the core of the sys-
Prototypes 273
tem. It is the actual simulation of the question-answering proc ess.
The ﬁrst peer sends a question (step 9) which the second peer tries t o
answer (step 14) by recommending a selection of artifacts (e.g. docu-
ments and messages).
•Artifact search (10, 11, 12, 13): These steps are the mechanism that
enable the recommendation amongst peers. When the Peer Assistant
receives a question, it forwards it to the Artifact Manager agent (step
10), since the latter knows how to match the question against the
User Knowledge Base . This matching is performed by the already
described Information Retrieval algorithm (steps 11 and 12). Fi-
nally the retrieved artifacts are sent back to the Peer Assistant (step
13).
•User notiﬁcation (15, 16): After receiving the answer for its question,
thePeer Assistant sends a notiﬁcation to the user’s handheld to warn
him/her that new artifacts were recommended. Figure 6.17 (B ) shows
the screen with the notiﬁcation of new recommendation from an other
peer.
(A) (B)
Figure 6.17: Screenshots of the handheld prototype
274 Recommendation Algorithm and Implementations
As in the desktop version, the agents are arranged in a peer-to-p eer fash-
ion composing a recommender system running on desktop computers. The
Recommender agents andInformation Retrieval components are practically
intact. However, a diﬀerent GUI has been developed to run in the iPAQ
handheld device. To overcome problems with the limited resou rces on such
devices, the recommendation service was kept in the desktop. Th is appli-
cation communicates with the iPAQ through a wireless link to r eceive the
user’s inputs and send back recommendations. The GUI was impleme nted
using the Personal Proﬁle API11implementation of the Java 2 Micro Edition
version (J2ME). Finally, the Peer Discovery component was implemented
using the Interconnect architecture (Uiterkamp, 2005), deve loped to enable
HTTP communication between service hosts and nomadic service co mpo-
nents.
6.6 Related Work
The most distinguishing feature of KARe is given by the considerat ion of tax-
onomic information to recommend knowledge artifacts. We hav e no knowl-
edge of other initiatives that apply taxonomies to aid the pr ocess of ques-
tioning and answering, adding to the user’s query the contextu al information
provided by the concept to which this query is assigned. Other t han this,
KARe’s distinction is materialized in the query scope reductio n stage of the
recommendation algorithm, in which a concept of the question er’s taxon-
omy is matched with concepts from the responder’s taxonomy. M atching
taxonomies has been targeted before, having gained consider able strength
in the last few years, especially boomed by developments in the S emantic
Web. In this section, we just cite two initiatives more closely r elated to ours.
There are mainly two ways of conciliating two diﬀerent taxon omies A and
B. One focuses on mapping labels associated with a concept of tax onomy A
into concept labels of taxonomy B. Among the works that adopt su ch tech-
nique, some use only syntactical information of the labels, simpl y matching
11http://jcp.org/aboutJava/communityprocess/ﬁnal/jsr062/index.html
Conclusions and Future Work 275
keywords, while others go beyond this, considering in addition to syntax,
semantic information about the labels, usually supported by a di ctionary
or thesaurus. This is the case of the CtxMatch algorithm (Bouque t et al.,
2003), a linguistic-based approach which adopts WordNet lexic al reference
system12to disambiguate and stem labels. This algorithm indicates the r e-
lationship between two matched labels, i.e. it informs if the l abel found in
taxonomy B is equal, less speciﬁc or more speciﬁc than the selecte d label
in taxonomy A. The problem with this kind of technique is that i t usually
results in low recall. Although the used dictionaries or thesaur us provide
valuable additional information about the labels, this if ha rdly enough and
a match in the responding taxonomy is rarely obtained (Avesani e t al., 2005).
Our algorithm adopts a diﬀerent approach of matching taxono mies, by
considering not only the labels representing the concepts of t he taxonomy
but also the keywords of all documents classiﬁed under the conce pt. This
adds a great deal of information to the concept representatio n, usually im-
proving the algorithm’s performance at least in terms of reca ll. A similar
approach to ours is adopted by (Avesani et al., 2005). However, t his work
tries to identify the semantic relationship between the two co rresponding
nodes, while our approach limits itself to ﬁnding one or a few mo st similar
nodes in the responder’s taxonomy. In addition to that, anoth er diﬀerence
may be highlighted. For functioning properly, the approach of Avesani et al.
(2005) requires the two taxonomies to share documents, as the si milarity
between them is calculated on the basis of this redundancy. Ou r algorithm
does not require such duplication, working well even if there is no redundant
information.
6.7 Conclusions and Future Work
The main focus of this chapter was the information retrieval algorithm im-
plemented to generate recommendations in the KARe system. Besid es, we
presented the remaining of the system’s detailed design and deta ils on pro-
12http://wordnet.princeton.edu/w3wn.html
276 Recommendation Algorithm and Implementations
totype implementations. In this respect, the reader is able to see how the
previously high-level design is transformed into concrete ele ments of a system
(such as XML ﬁles and Java code) and then implemented in two diﬀe rent
prototypes.
The results of the algorithm evaluation experiment showed con siderable
gains in the recommendation quality are achieved by using the proposed
approach. In the future, we aim at conﬁrming this conclusion b y experi-
menting the algorithm against diﬀerent and larger datasets. How ever, we
already envision some possibilities of enhancing the query scope reduction
performance. Our research agenda for the future includes the experimenta-
tion with the smoothing technique presented in (Sona et al., 2004) to improve
the representation of the taxonomic concepts. This technique uses informa-
tion from other concepts in the taxonomy (e.g. parent and sibl ings) in the
vector calculation for a given concept C. Concept vectors of neighboring con-
cepts are propagated to the vector representing C, although w ith reduced
weight, according to the distance between these concepts and c oncept C.
This technique attained gains in classifying documents into p articular tax-
onomy nodes (Sona et al., 2004), a diﬀerent but related appli cation to ours.
Smoothing is a technique targeted at situations in which ther e are many
nodes classifying only a few knowledge artifacts. Thus, such tech nique is
suitable for initial stages of system use, when KARe peers are starti ng to
collect their documents and exchange questions and answers.
Something else that remains unanswered here regards the possibi lity to
scale the system to a larger set of peers. The developed algorithm c onsumes a
great deal of resources, so scaling it up should pose a big challenge , especially
in the case of the desktop version of the system. We foresee two possibi lities
to be investigated to enhance system performance. The ﬁrst one re gards the
beforehand calculation of the nearest neighbor peer to answer to requests
on speciﬁc subjects. Nearest neighbor calculation is a common pra ctice in
the context of recommender systems and may follow existing algo rithms
(Montaner et al., 2003). The other idea we could explore alte rnatively or in
addition to this one is to set up a similarity threshold, limitin g the number
of documents exchanged between Peer Assistants to reduce networ k traﬃc.
Conclusions and Future Work 277
Other future research direction include the implementation of the Broker
agent and KARe’s proactive functionalities, not targeted her e. The question
and answering functionality was selected for ﬁrst implementat ion for being
in the core of the system’s proposal, but also for oﬀering more cha llenging
problems from a technical point of view than the other system fe atures.
278 Recommendation Algorithm and Implementations
Chapter 7
Conclusion
“And this way, arriving and leaving
are only two sides of the same journey.
The train that arrives is the same train
that leaves.” Milton Nascimento
This chapter presents a summary of the main conclusions and cont ribu-
tions of this work and outlines a number of directions for fur ther research.
The chapter is organized as follows: section 7.1 presents a gene ral over-
view of the main results of this. After this brief summary, section 7.2 ex-
amines these outcomes more closely, inspecting how each of the r esearch
questions were targeted and how they advance related state of t he art. Fol-
lowing, section 7.3 sets our future research agenda.
7.1 Results Overview
In the struggle to survive and compete in face of constant techno logical
changes and unstable business environments, organizations rec ognize knowl-
edge as its most valuable asset. Consequently, they often invest o n KM,
seeking to enhance their internal processes and available tech nologies to sus-
tain and disseminate knowledge throughout their environment . This thesis
advances the state-of-the-art in this area in two distinct way s:
279
280 Conclusion
1. by providing ARKnowD , a methodology to guide the development
of KM information systems andpractices ﬁtting the particular needs
and requirements of an organizational setting;
2. by presenting KARe , a socially aware recommender system that sup-
ports knowledge creation and sharing by simulating the natura l social
process one gets engaged in to fulﬁll a knowledge request.
The work on the ARKnowD methodology was triggered by the reali za-
tion that although claiming to bring synergy and innovation t o organizations,
KM solutions are often reported not to fulﬁll their promises, be ing conse-
quently abandoned or misused. In this thesis, we examined some of t he main
challenges of KM settings, concluding that before a solution is developed or
adopted, the organizational environment needs to undergo t horough analy-
sis. Such analysis is aimed at identifying from the environment ’s character-
istics, those that may hamper eﬀective KM (and should thus be over hauled)
and those that may contribute to it (and should thus be reinforc ed).
The observation of these challenges also showed that most of them a re
closely related to the fact that current solutions fail to comp ly with the
organization’s social dimension. In particular, we realized that besides fo-
cusing on the organization’s overall objectives and strategi es, seeking for an
eﬀective KM solution requires special attention to be payed to knowledge
holders, i.e. people working in the organization’s several po ints of actions.
This realization led to the adoption of constructivism as the theoretical ba-
sis of our work. By focusing on constructivist approaches and con trasting
them with prominent KM theories, we were able to distill the essen ce of
what characterizes a conducive environment to KM. We called these result-
ing principles the Constructivist KM building blocks . Such building blocks
can be used as guidance to facilitate the aforementioned anal ysis, assist-
ing the identiﬁcation of KM inhibitors and drivers within th e organizational
environment.
Aiming at supporting the clear understanding of the organizati on’s so-
cial dimension, observing its compliance to the Constructivist KM building
blocks, ARKnowD gives special attention to the initial phases of system
Results Overview 281
development. In this way, the methodology aims at eliciting and modeling
the requirements of the system-to-be, by considering both the o rganization’s
overall objectives and the knowledge holders’ perspective. F urthermore, be-
yond analyzing the domain, ARKnowD consistently conducts to th e design
of the proposed solution, modeling the system entities, interact ion and in-
ternal behavior.
Verifying the appropriateness of the agent paradigm for mode ling hu-
man organizations, we created ARKnowD as an intrinsically agen t-oriented
methodology. However, by examining available work on agents, we realized
that a single engineering approach is not ﬁt for all domains an d cases. Con-
versely, existing agent-oriented engineering methodologie s should be com-
bined on demand, based on the right set of concepts and techniqu es to
target a speciﬁc domain or situation. Therefore, we took some eﬀ ort in un-
derstanding which are the agent-related concepts that most sui tably describe
the KM domain, especially capturing the analysis regarding Co nstructivist
KM building blocks. For that, we built an ontology of agent con cepts that we
then used to evaluate, adjust and coherently combine the notat ions adopted
in ARKnowD.
In order to evaluate ARKnowD, we provided an experimentation of the
methodology, applied to analyze a ﬁctitious scenario that il lustrates some of
the main KM challenges. As a result of this analysis, proposals for c hanges
in the organization’s structure and processes arise. Particula rly, the require-
ments for a recommender system to support such setting are elicite d. This
led us to the proposal of KARe, the second main contribution of th is work.
Still following ARKnowD, we fully designed KARe, demonstrating that AR-
KnowD is able to take the developer from a detailed domain ana lysis to a
consistent design activity.
Besides using it as a case study for ARKnowD’s methodology, this wo rk
also explored the suitability of the KARe system to support KM. KARe
enables users connected in a peer-to-peer network to locally organize their
knowledge artifacts, while sharing them through questions and answers. By
simulating the question and answering process, naturally undert aken when
people seek for knowledge, KARe aims at smoothly ﬁtting into org aniza-
282 Conclusion
tional practices. Up to now, KM systems had mostly targeted the for mal-
ization and exchange of explicit knowledge , in the form of documents or
other physical artifacts, often annotated with metadata, and classiﬁed by
taxonomies or ontologies. Investigations surrounding tacit knowledge have
been so far scarce, perhaps by the complexity of the tasks of capt uring and
integrating such kind of knowledge, since it is usually conﬁned on people’s
mind. Taking a ﬂexible approach on supporting this kind of kno wledge con-
version, KARe relies on the real potential of social interaction to support
knowledge creation and sharing. This emphasis is motivated by the assump-
tion that such a process and, especially question and answer excha nged by
community members, may eventually result in the disambiguatio n of tacit
knowledge.
The core of the KARe system regards a recommendation mechanism th at
mediates the questioning and answering process, providing users with knowl-
edge artifacts to satisfy their knowledge needs. Our work compr ised the de-
scription, implementation and evaluation of such mechanism. I n this respect,
this thesis presents an innovative information retrieval tec hnique, based on
semantic information encoded in taxonomies that structure th e artifacts col-
lection. This information is applied to reduce the search scop e, thus dimin-
ishing computational complexity when compared to standard ap proaches,
while providing result sets with less noise (i.e. more relevant d ocuments) at
the same time. The technique has been implemented in a prototy pe of the
KARe system, and evaluated in comparison to a standard approach. R esults
of this evaluation showed the gains achieved by applying our t echnique, also
leading to the identiﬁcation of points of improvement.
7.2 Research Questions Revisited
In this section, we focus more deeply at the realized work, disc ussing our
main ﬁndings. More speciﬁcally, we revisit each research questio n, presenting
in detail how each of them was addressed and what are the strength s and
weaknesses of the proposed solutions in comparison with related w ork.
Research Questions Revisited 283
7.2.1 Applying Agents to Support Constructivist
Knowledge Management
Our ﬁrst research question (RQ 1) regards the suitability of the a gent-
oriented paradigm to support Constructivist KM. In chapter 2, w e have
started targeting this question by analyzing the state of the ar t in KM, in
order to identify:
•the main challenges of such settings;
•background theoretical work that could lead us to the proposa l of more
eﬀective approaches;
By examining both practical issues and theories and by taking c onstruc-
tivist hypotheses into account, we were able to identify a few p rinciples that
may characterize the KM environment, leading to less resistanc e towards
KM systems and practices. In general, such principles refer to a l ess techno-
centric view on KM, focusing more attentively in the social aspe cts that
naturally motivate knowledge sharing and learning in practi ce. We deﬁned
these principles as the Constructivist KM building blocks, clai ming that
they should be pursued both by KM researchers and practitioners.
Next to this, we also investigated the ability of agents to model human
organizations, representing important entities inherent fr om these settings,
such as human, organizations, organizational units, and infor mation sys-
tems. Although this ability has been largely theoretically ad vocated, most
current agent-oriented approaches still address system develo pment by mod-
eling artiﬁcial agents (i.e. the ones composing a system) from t he start. By
doing so, these approaches fail to link system requirements with the real
needs and wants of the system stakeholders, as this important inf orma-
tion remains untouched and hindered. Contrarily, when proﬁ ting from the
agents’ inherently social and cognitive nature, the analyst is able to create a
domain model that helps uncover such details. Speciﬁcally, ag ents are pow-
erful abstractions for capturing human’s beliefs and percep tions, to model
their interactions, and for capturing the commitments they e stablish with
284 Conclusion
each other on the organization’s behalf. The understanding o f these elements
is paramount for the adoption and proposal of eﬀective KM info rmation sys-
tems and practices, conﬁrming the suitability of the agent par adigm for our
purposes.
Regarding the suitability of agents, we were particularly int erested in un-
derstanding to which extent agents can be used to allow capturi ng and rea-
soning about Constructivist KM building blocks. This topic was d iscussed
in chapter 2. Moreover, it is further clariﬁed in chapter 3, w hich provides a
deep understanding of the agent concepts in the ontology prese nted, and in
the practical application of our proposed approach in the rem ainder of this
thesis. In particular, chapter 4 applies it for domain and system analysis
and chapter 5, for system design.
Still in chapter 2, we analyzed diverse agent-oriented softwa re engineer-
ing methodologies and languages. We did not have the purpose of being
complete regarding the available work in this area, but rath er aimed at il-
lustrating how each of the approaches we explored targets the development
of agent-oriented systems. Moreover, we were especially intere sted in using
them as subsidies for the proposal of our own approach, speciﬁcal ly focused
on the KM domain.
7.2.2 Developing a Methodology to Support Knowl-
edge Management
In chapter 2, we concluded that each organizational environ ment is unique
and should be closely inspected before a KM solution both in terms of prac-
tices and information systems, is proposed or adopted. But how sho uld we
proceed in this analysis? This brings us to our second research qu estion (RQ
2), which regards the development of a methodology to support KM.
In particular, we intended to propose a comprehensive methodo logy that
targeted all system development activities. Here, system not only refers to
information systems, but also considers human systems. In this way, a KM
solution can be understood as a set of practices or as an informat ion sys-
Research Questions Revisited 285
tem to be adopted. In both cases, according to the ARKnowD methodology ,
proposed in chapter 3, system development is an iterative proce ss consisting
of the following activities: requirements elicitation, early and late require-
ments analysis , and architectural and detailed design . As can be noted by
our focus on requirements, great strength was given to the init ial develop-
ment activities, aiming at grasping the idiosyncrasies of each o rganizational
setting.
Given the appropriateness of the agent development paradigm , our meth-
odology was tailored to proﬁt from the agent social and cognit ive nature,
using its underlying concepts as modeling constructs. In addit ion to that,
one of our main assertions is that in the context of development methodology,
no silver bullet exists. Instead, existing work on agent-oriente d software
engineering should be combined, aiming at exploring their str engths while
minimizing their weaknesses, giving each modeling setting or sit uation.
Having experimented the combination of two speciﬁc existing ag ent-ori-
ented approaches, namely the Tropos methodology and AORML, w e are
now able to deﬁne a general set of guidelines, supporting system de velopers
on merging other methodologies and languages. To sum up, these g uidelines
are the following:
1. closely consider the characteristics of the targeted domain before se-
lecting the methodologies and languages to be applied. Char acteristics
of the domain have a direct impact on the approaches selection . For
example, if the problem being targeted is life threatening, a formal
approach is needed to prevent undesirable failures. However, i f the
targeted domain comprehends an organization in need of KM sup port,
an approach supporting extensive domain analysis as the one we p ro-
pose is advisable to enable the organizational environment to be well
understood before a solution is proposed;
2. once the methodologies and languages to be combined are ch osen,
verify if together, they are consistent and cover all importan t agent-
oriented cognitive concepts useful in the targeted case. If no t, extend
the approaches where needed, providing both a conceptualiz ation of
286 Conclusion
the missing elements and corresponding modeling constructs. Thi s as-
sessment can be done by using a reference ontology of agent concep ts,
as the one proposed in chapter 3.
3. provide a clear method to map the concepts of the adopted no tations,
in order to assist the analyst and designer that are going to apply t he
combined approach. In this work, we adopted a MDA-inspired tra ns-
formation method, involving the transformation of a source la nguage
to a target notation, having the metamodels of the two langua ges as
input for the transformation process. Other methods may be pursu ed,
including the other ones also proposed by the MDA initiative.
4. provide a set of guidelines for the use of the resulting approa ch. This
includes information on how to apply each modeling construct , and in
which modeling activities. Moreover, it should cover informa tion on
which step to realize the mapping of concepts, as established by t he
method mentioned above.
Chapter 3 describes all the topics listed above, i.e. it gives t he reasons
behind the selection of the two approaches composing ARKnowD, p resents
an evaluation of ARKnowD’s notation, describes a transformati on method
between the two adopted approaches, and grants ARKnowD’s users with
guidelines on the use of the methodology. In addition to that, chapter 4
and chapter 5 illustrate the use of ARKnowD in practice. They star t with
the analysis of a scenario that, although ﬁctitious, exempliﬁe s important
issues of KM settings, and ﬁnish with the detailed design of a recomm ender
system, whose prototyping is described in chapter 6.
Our second research question has been further reﬁned in two sub-q ues-
tions dealing with speciﬁc methodological issues. From now on, t his section
targets each of these two sub-questions.
Agent Cognitive Concepts and Development Activities
As mentioned in section 7.2.1, one of the biggest strengths of the agent
paradigm for our purposes is given by the social and cognitive n ature of
Research Questions Revisited 287
agents. Nevertheless, restating RQ 2.1, how can we connect the con cepts
underlying agents and the system development activities? If th is question
remained unanswered, it would be hard to fully proﬁt from this important
characteristic of the agent paradigm in practice.
We realized by the study of KM state of the art (reported in chapt er
2) that KM settings are complex domains, highly unstructured an d greatly
inﬂuenced by their human dimension. Thus, in one way or another , most
concepts characterizing agent’s rationale, such as intenti on, perception and
belief, are relevant here. Moreover, other concepts that gu ide the under-
standing of the social relations between agents, such as depende ncy, del-
egation and commitment are of utmost importance for the domai n to be
correctly grasped. Other essential concepts are the ones relat ing to agent’s
actions and perceptions, such as plans, and communicative acti ons, which
lead agents to collaborate and change their inhabiting envi ronment. Finally,
we emphasize the importance of considering not only active ent ities of the
environment but also modeling the passive ones, i.e. the resource s that
agents use when pursuing their goals. We discussed all these concept s in
chapter 3, where we proposed an ontology of agent concepts to e nable the
design and the evaluation of agent-oriented modeling langua ges.
However, this discussion does not clarify in which modeling acti vity each
of these concepts are to be used. This is more clear in the proposa l of
our transformation method between Tropos’s notation and AORM L. AR-
KnowD starts by the analysis of the goals of the stakeholders. Thi s choice
was adopted by several work in requirements analysis area, for the realiza-
tion that stakeholder’s goals directly connect to their real wants and needs
(Kavakli and Loucopoulos, 2005). Furthermore, a prominent w ork on KM
(Nonaka and Takeuchi, 1995) has appointed organizational in tention (which
refers to strategies and goals of the organization) as one of t he main driving
forces behind the adoption of eﬀective KM practices. In the ﬁr st develop-
ment stages of requirements analysis, details regarding proce sses are hardly
necessary. Instead, we limit ourselves in understanding the depe ndencies
between the agents of the domain, and determining their plan s (a high level
view on processes). This maintains the analysis on the right focu s, i.e. to de-
288 Conclusion
termine the requirements of the system under development, pre venting the
analyst to get lost among unnecessary details of the organizatio nal setting.
The design activity is the point where all details regarding t he system
should be completely uncovered. In this moment, all relevant information
concerning agents’ internal characteristics, beliefs, percep tions, actions and
commitments to other agents are ﬁnally designed. The use of the two no-
tations is tightly coupled, enabled by the adopted transform ation method.
This allows system functionalities to be connected back to the elicited re-
quirements.
When Agent Cognitive Concepts become Concrete
Agent-oriented underlying concepts have been extensively di scussed in lit-
erature. However, how these concepts connect to concrete part s of informa-
tion systems is still open for discussion (refer to RQ 2.2). Our work takes
the system developer all the way from requirements analysis to sy stem im-
plementation and we are able to make links from the modeling c onstructs
referring to such concepts and parts of the implemented proto type.
As mentioned before, goals give rise to system’s requirements. Th ese
requirements are iteratively reﬁned until the point that ea ch goal to be de-
signed has an assigned plan, which abstractly states how each goal should
be targeted. This only excludes those goals that were abandon ed in the way,
or solved by other means. Then, for each plan, we provide diagra mmatic de-
scriptions that detail the process followed by the agent, his/h er interactions
with other agents and their internal behavior. Alongside, age nts composing
an information system are modeled as agent classes and resources t urn into
object classes. Later, both agents and objects may be turned int o code using
an agent-oriented framework or an object-oriented program ming language.
In this thesis, we experimented the former, using the Java Agent D evelop-
ment Framework (JADE). Moreover, some of the objects realize t he system
persistence, being converted into database tables or XML ﬁles, fo r example.
Besides objects comprehended in the domain (i.e. the former r esources),
some of the agent’s beliefs are also turned into persistent objec ts, hence
Research Questions Revisited 289
constituting available information for agent’s consultatio n and update.
Agents’ interaction happens through message passing, which consist in
speech act representation, such as ‘inform’, ‘acknowledgment ’ or ‘request’
messages, containing a sender, a receiver and some content parame ters. If
an agent framework is used for implementation, these messages ar e directly
implemented into codes. Otherwise, such mechanism needs to be co ded
from scratch. Dependencies between agents early captured in the require-
ments’ analysis or architectural design are transformed into co mmitments
in detailed design. These constructs help regulate contracts b etween agents,
serving during implementation as important indications of w here exception
handling mechanism should be heavily cared for. Finally, agen t’s reactive
behavior is captured with the use of reaction rules. Such rules may be di-
rectly implemented, in case a rule-based programming languag e is applied.
Conversely, as is the case of our system, these rules typically tur n into “if-
then-else” structures coded into agent’s behavior ﬁles.
7.2.3 Using KARe to Support Constructivist KM
Research question number three (RQ 3) concerns the second contr ibution of
this work, i.e. the development of a socially-aware recommen der agent to
support Constructivist KM. The KARe system was carefully tailored to meet
the requirements elicited and analyzed in chapter 4, follow ing ARKnowD’s
application. These requirements mirrored some of the Construc tivist KM
building blocks deﬁned in chapter 2. Table 7.1 shows the relat ions between
KARe main requirements and the Constructivist KM building bloc ks.
The ﬁrst requirement refers to how the knowledge assets are orga nized and
shared. KARe allows knowledge sharing following a peer-to-pee r model. In
other words, a user connected to others in a network keeps his/he r knowledge
artifacts stored in his/her own personal computer, thus mainta ining full con-
trol over them. This gives full autonomy to the user, since he/she can share
artifacts on will, besides being able to update or take items d own. Mean-
while, while these resources are available, the other peers in the network
may access them through the recommendation mechanism. This ne twork of
290 Conclusion
RequirementsConstructivist KM
Building Blocks
allowing members to keep
control of their knowledge as-
sets while sharing knowledgeautonomy and non-
hierarchical knowledge
sharing structure
supporting members to ask
and answer questionssocial interaction and physical
meaningful artifacts
providing information on
experts regarding particular
knowledgecontext
providing personalized help to
the userscontext
Table 7.1: Relation between KARe’s requirements and the Const ructivist
KM building blocks
peers is a ﬂat structure, thus reﬂecting the non-hierarchical knowledge shar-
ingstructure we claim is necessary to guarantee eﬀective knowledg e ﬂows
within the organization. This is based on the assumption that al l organiza-
tion’s members are valuable knowledge sources despite of thei r organizational
position or level of experience.
KARe supports knowledge sharing mainly through questions and an swers
(the second requirement on table 7.1). This is related to the n eed to sup-
portsocial interaction and to provide sharing of physical meaningful ar-
tifacts . Social interaction is essential to enable tacit knowledge sha ring,
which is paramount for triggering innovation. Tacit knowle dge relates to
people’s internal mental models, and personal values and expe rience. This
is hardly captured in codiﬁed pieces of information but it is possible ex-
changed through direct interaction between people (Nonaka a nd Takeuchi,
1995). This way, KARe simulates the natural processes of seeking a nd pro-
viding knowledge within organizations, where people freque ntly try to solve
their doubts and problems by directly asking a nearby or truste d colleague.
In addition to that, as suggested by Freire and Fagundez (1992) , a question
is the “ﬁrst knowledge sparkle” and is helpful for the knowledg e seeker him-
Research Questions Revisited 291
self to reason about the knowledge he has and misses, hence contrib uting to
knowledge creation since this early stage of questioning. Besid es supporting
the disambiguation of tacit knowledge, this requirement also refers to the
need of exchanging knowledge through meaningful and concre te artifacts.
In KARe, these artifacts consist the exchanged questions and answe rs, be-
sides working documents the users maintain in their local know ledge bases.
People working together or gathered in communities of pract ice proﬁt from
sharing artifact in diverse ways. For once, they feel important and receive
recognition for sharing with others the product of their work or those ar-
tifacts they ﬁnd valuable. Besides, these artifacts are kept in the network,
allowing further use when a needing situation presents itself. An d ﬁnally,
artifacts may be replicated in several nodes of the network, g uaranteeing
that essential knowledge is maintained in the organization ev en if members
leave it. These three aspects are all in the core of KM.
Requirements number three and four refer to the need to provi de the right
context for knowledge sharing. Simply asking people to register how the y
do their work may seem forced and detached from daily practice s. Instead,
if knowledge sharing happens as part of the daily routine of th e organiza-
tion, imitating natural social processes as proposed by KARe, kno wledge is
likely to ﬂow more easily. In this sense, support to ﬁnd the right p iece of
knowledge when needed is essential to motivate people to activ ely use the
system. KARe does this by helping users locate expertise knowledg e, and
by providing them with personalized assistance. This is attaine d with the
use of user models that capture social and cognitive characteri stics of users,
such as their organizational role, their trusted colleagues, a nd their exper-
tise and interests. In particular, users’ expertise and interest is explicitated
through taxonomic structures used to classify users’ working docu ments and
to contextualize questions and answers. These tree-like structu res describe
the domains related to the knowledge artifacts maintained b y a speciﬁc user,
thus being directly related both to their interest and to thei r expertise. The
taxonomies are valuable pieces of knowledge in themselves, be sides serving
as the foundation for the developed recommendation mechani sm.
The remaining of this section speciﬁcally focuses on three sub-i ssues re-
292 Conclusion
lated to this general KARe-related research question.
Creating Recommendations Based on Organizational Members So-
cial and Cognitive Aspects
One of the main assumptions behind this work is that KM should be su p-
ported with less focus on technology and more focus on people. Conse-
quently, the peculiarities of the organizational environm ent and the personal
characteristics of its members must be taken into account (ref er to RQ 3.1).
KM systems currently in use within real organizations often giv e exag-
gerated importance to the stored knowledge assets, failing to co nnect them
to the people that create and use such artifacts. These same systems o ften
provide searching support based on the content of the available artifacts.
Most of the systems relying on user modeling, generally limit the mselves in
providing hints on user’s interest and expertise regarding cer tain content.
KARe goes beyond this when, besides user’s expertise and interest , it also
takes into consideration the following characteristics:
•organizational role;
•trustability;
•reliability;
•availability;
•collaborative level;
•presentation preferences;
•physical context: time and location.
Some of the characteristics above are initially stated by the u ser of the
system, such as organizational role, availability to ask and answ er questions,
trustability (captured in a list of trusted colleagues), and pre sentation pref-
erences. Others are calculated throughout interactions wit h other users. The
collaborative level of other peers in relation to a give user, for instance, is
Research Questions Revisited 293
calculated based on the number of responses the peers provide to the user.
Besides, the peers’ reliability, i.e. a measure of their experti se regarding
speciﬁc themes is also attributed by the user after evaluating k nowledge re-
ceived by speciﬁc peers. Time and location should support the syste m in
understanding what piece of knowledge to deliver to the user an d in which
presentation format. Although the proposal and design of these fe atures
are clear, their implementation in KARe remains future work. Chapter 5
presents a detailed discussion on each of these cognitive and socia l charac-
teristics, besides analyzing how they were targeted in other syst em proposals
coming from the KM and e-learning research areas.
KARe works both reactively (i.e. at user’s request) and proacti vely (i.e.
by anticipating user’s needs). On on hand, reactive recommend ations are
triggered by the user asking a question. On the other hand, proac tive help
is granted through the support to proactive periodic search, p ending ques-
tions (i.e. questions the users have asked and remain unanswered ), and by
recommending other peers having user’s related interests and expertise. A
comprehensive description and design of such functionalities c an be found
in chapter 5.
Agent-oriented Recommender System Architecture
Having learned that KARe supports Constructivist KM based on user’s so-
cial and cognitive characteristics and following a peer-to- peer model, a dis-
cussion on the most appropriate system architecture comes next (R Q 3.2).
This discussion is also subject of chapter 5, in which the architec tural and
detailed design of KARe are presented.
Three agents compose KARe: the Artifact Manager (AM) , thePer-
sonal Assistant (PA) and the Broker . In general, the AM and the PA
collaborate to accomplish the recommendation mechanism, all owing the user
to manage his/her personal knowledge base, handling other peer ’s knowl-
edge requests and providing recommendations to the user. Whil e these two
agents reﬂect KARe’s peer-to-peer model, the Broker provide s a kind of cen-
tralized support, by endowing the PA with knowledge about the best peers
294 Conclusion
to answer a particular direct knowledge request ( direct here refers to direct
interaction with another peer), and aiding the PA on ﬁnding si milar peers
on behalf of his/her associated user. Each peer in the network has his/her
own PA and AM (installed in his/her personal computer), while the Broker
is not associated to any particular peer and may be installed in o ne or more
computers.
Taking the paragraph above into consideration, we conclude t hat KARe
is not a pure peer-to-peer architecture, but a hybrid one inst ead. This
means that although mostly peer-to-peer, this architecture has a server el-
ement (here, the Broker) that provides supporting functiona lities, generally
related to locating a peer (Oram, 2001). In this sense, contrar ily to other
KM systems following the pure approach (such as KEEx (Bonifacio et al.,
2004) for example), KARe aims at proﬁting from the Broker’s ﬂe xibility to
provide more personalized support in comparison to these systems, t aking
into account the cognitive and social characteristics describ ed in the previous
section. One problem with the hybrid approach relates to safet y, i.e. dealing
with possible failure in the accessibility of the computer hostin g the Broker.
Nevertheless, this problem may be overcome by the replication o f the Bro-
ker in several computers to diminish the probability of non-ac cessibility. In
addition to this, the PA may have alternative ways of handling a direct
knowledge request when the Broker is unavailable.
In order to avoid intrusiveness, we elaborated a privacy policy controlling
the access to the user model. According to this policy, only the P A has
full view and access to the user model. The user is able to set himsel f the
features he/she allows the Broker to view, thus limiting the a ccess of other
peers concerning his/her personal characteristics.
Developing an Eﬀective Recommendation Technique
In the core of any recommender system is the mechanism used to prov ide
users with valuable recommendations (RQ 3.3). KARe provides t his mainly
in two ways. Primarily, it allows users to access existing knowle dge assets
(documents, and pairs of questions and answers) available in the network of
Future Work 295
peers. However, if no available knowledge asset fulﬁlls the user’ s particular
need, a peer can be directly contacted. Chapter 6 describes th e algorithm
we developed to recommend existing knowledge artifacts satisf ying user’s
knowledge requests. Besides presenting the algorithm in detail , this chapter
also describes how it was implemented and accessed.
The developed algorithm is based on information retrieval te chniques and
proﬁts from the taxonomic structures classifying the system’s kn owledge ar-
tifacts. Results of the performed evaluation experiment shows that there are
considerable gains when using our approach compared to a standa rd retriev-
ing approach. In particular, our technique is superior in ﬁnd ing artifacts that
are related to the user’s query, obtaining a result set with less n oise than the
standard approach. Less noise means that less unrelated and more focused
items compose the result set. Moreover, the proposed approach at tains im-
provements concerning computational complexity, by reduc ing the search
space of the algorithm. In other words, not all documents of the collection
are inspected, but solely those pertaining to regions where a sat isfactory
answer is likely to be stored.
7.3 Future Work
A good research work is not the one that covers all the gaps, but t he one
that present consistent results while also opening way for furthe r investiga-
tions and endeavors. We hope to have fulﬁlled both aims. Subsequ ently to
the results just reported, this section is dedicated to the prese ntation of our
future work. As this thesis presents two main contributions, i.e . the AR-
KnowD methodology and the KARe system, this section is correspond ingly
subdivided in sub-sections 7.3.1 and 7.3.2.
7.3.1 Moving Forward with the Work on ARKnowD
Further work on ARKnowD may be viewed according to theoretica l and
practical aspects. Theoretically, we hope to move forward wit h the work on
the fundaments behind our methodology, given by the ontolog y of agent-
296 Conclusion
oriented concepts, presented in chapter 3. On one hand, we hope to cover in
our ontology, the remaining concepts from the Tropos notati on that were not
addressed in this thesis, such as the concepts of softgoal andcontribution .
On the other hand, we aim at incorporating elements targeted by agent or-
ganization frameworks, especially the deontic notions of responsibility and
obligation , and the concept of norm. This may result in adding new con-
structs to ARKnowD’s language, possibly also aﬀecting the method ology’s
life cycle.
As for the practical aspects, two main directions are identiﬁed . First, AR-
KnowD must undergo experimentation in real environments. The scenario
applied in this thesis is ﬁctitious, thus resulting in a very con trolled testing
environment. Although we were careful to be realistic and to il lustrate real
situations, we are sure that when applied to a real case, some of our as-
sumptions will be conﬁrmed, but also new insights and ideas will emerge to
enhance our methodology. Still in the realm of practice, we h ope the work
on an agent-oriented software engineering environment comp rehending both
Tropos and AORML (and thus, ARKnowD) proceeds, as this initiati ve is
of great relevance to allow analysts and designers to eﬀective ly apply our
methodology in practice.
7.3.2 Future Developments on KARe
Additional implementation and experimentation work are nec essary to con-
solidate KARe as a KM supporting system. For now, the idea behind KAR e
is clear and the system was fully designed, but we have only manag ed to
implement a prototype including KARe’s core recommendation mechanism.
Hence, more work remains to be done, and the following items sum marize
KARe’s missing elements.
•the Broker agent should be implemented to enable the referral re-
garding the best peer to respond to a particular knowledge requ est,
enabling users to directly answer incoming questions from othe r peers.
This comprehends the implementation of the complete user mod el,
Future Work 297
including all user’s cognitive and social characteristics, sinc e only ex-
pertise and interest are considered in the available prototype s;
•the Peer Assistant (PA) should be complemented with further func-
tionality, including proactive periodic searches, handling pending ques-
tions (which has only been implemented in the mobile prototy pe) and
recommending similar peers to his/her associated user.
Regarding the implemented prototypes, a few gaps remain to be ﬁlled.
To begin with, our recommendation technique may be enhanced by the use
ofsmoothing techniques proposed by (Sona et al., 2004). Such an approach
embeds more information in the representation of KARe’s taxon omy con-
cepts, thus improving at least in theory, the performance of th equery scope
reduction step of our algorithm. However, to be completely sure about this
assumption, we must implement such techniques in our prototype a nd sub-
mit it to further experimentation.
In addition to this, scalability issues must be targeted before KAR e can
become a real product. At the moment, we only performed tests u sing two
peers and we can already preview that some problems may arise if more
peers are included. This issue particularly regards our deskto p prototype
and mainly results from the fact that when receiving a knowled ge request
from the user, the PA broadcasts such request to all other PAs in the net-
work. As previously reported in the conclusion of chapter 6, we f oresee
two possibilities to overcome this problem. The ﬁrst possibility regards the
beforehand calculation of the nearest neighbor peer to answer to requests
on speciﬁc subjects. Thus, the PA would know which other PAs are mor e
likely to have the answer it seeks, being able to eﬃciently forwa rd incoming
knowledge requests. The other idea we could explore alternati vely or in ad-
dition to this one is to set up a similarity threshold, limiting t he number of
documents exchanged between Peer Assistants to reduce network t raﬃc.
Further work regarding system’s experimentation also remains to be done.
We have been able so far to conduct an experiment that although highly
relevant, limits itself to validating the proposed recommend ation technique.
Nevertheless, system’s usability has yet to be assessed. In this sense, we
298 Conclusion
believe the remaining functionality of KARe must be implement ed before
a usability test can be planned. Next to this, the nature of the task s that
KARe supports (i.e. simulating real social processes related to qu estioning
and answering) suggest that instead of using a controlled environ ment, this
usability test is likely to produce better results if the system is adopted in
a real organization. After some time experimenting with KARe’s document
repository and questioning and answering functionalities, the users should
be able to attest for sure the validity of the system to enhance the ir daily
practices.
Future Work 299
300 Conclusion
Bibliography
Abecker, A., Bernardi, A., and Sintek, M. (2000). Proactive Kno wledge
Delivery for Enterprise Knowledge Management. In Ruhe, G. an d
Bomarius, F., editors, Learning Software Organizations: Methodology
and Applications , volume 1756 of LNCS . Springer-Verlag, Berlin,
Germany.
Abecker, A., Bernardi, A., and van Elst, L. (2003). Agent Technolo gy for
Distributed Organizational Memories: the Frodo Project. In Proceedings
of the International Conference on Enterprise Information Sys tems
(ICEIS’03) , pages 3–10, Angers, France.
Adami, G., Avesani, P., and Sona, D. (2003). Clustering Document s in a
Web Directory. In Proceedings of the 5th ACM International Workshop
on Web Information and Data Management (WIDM’03) , pages 66–73,
New York, USA. ACM Press.
Alavi, M. and Leidner, D. E. (1999). Knowledge Management Syst ems:
Issues, Challenges and Beneﬁts. Communication of the AIS , 1(2):1–37.
Allee, V. (1999). The Art and Practice of Being Revolutionary. Journal of
Knowledge Management , 3(2):121–131.
Allee, V. (2000). Knowledge Networks and Communities of Practi ce.OD
Practitioner: Journal of the Organization Development Netw ork, 32.
Applewhite, A. (2004). The View from the Top. IEEE Spectrum ,
November 2004:16–31.
301
302 BIBLIOGRAPHY
Audi, R. (1998). Epistemology: A Contemporary Introduction to the
Theory of Knowledge . Routledge, London, UK.
Avesani, P., Giunchiglia, F., and Yatskevich, M. (2005). A Larg e Scale
Taxonomy Mapping Evaluation. In Gil, Y. e. a., editor, International
Semantic Web Conference (ISWC) , volume 3729 of LNCS , pages 67–81.
Springer-Verlag, Berlin, Germany.
Baeza-Yates, R. and Ribeiro-Neto, B. (1999). Modern Information
Retrieval . Addison-Wesley, Boston, MA, USA.
Balabanovic, M. and Shohan, Y. (1997). Fab: Content-based, Co llaborative
Recommendation. Communications of the ACM , 40(3):66–72.
Bernon, C., Cossentino, M., Gleizes, M., Turci, P., and Zambone lli, F.
(2004). A Study of Some Multi-Agent Meta-Models. In Odell, J.,
Giorgini, P., and Muller, J., editors, Agent-oriented Software Engineering
V, AOSE 2004 , volume 3382 of LNCS , pages 62–77. Springer-Verlag,
Berlin, Heidelberg.
Boella, G., Damiano, R., and Lesmo, L. (1999). A Utility Based App roach
to Cooperation among Agents. In Proceedings of the Worskhop on
Foundations and applications of collective agent based syst ems
(ESSLLI’99) , Utrecht, The Netherlands.
Bonifacio, M. and Bouquet, P. (2002). Distributed Knowledge
Management: a Systemic Approach. In Minati, G. and Pessa, E.,
editors, Emergence in Complex, Cognitive, Social and Biological
Systems . Kluwer Academic/Plenum Publishers, New York, USA.
Bonifacio, M., Bouquet, P., Mameli, G., and Nori, M. (2004).
Peer-Mediated Distributed Knowledge Management. In van Elst , L.,
Dignum, V., and Abecker, A., editors, Agent-Mediated Knowledge
Management , volume 2926 of LNAI , pages 31–47. Springer-Verlag,
Heidelberg, Germany.
BIBLIOGRAPHY 303
Bottazzi, E. and Ferrario, R. (2005). A Path to an Ontology of
Organizations. In Proceedings of the Workshop on Vocabularies,
Ontologies and Rules for The Enterprise (VORTE’05) , Enschede, The
Netherlands. Centre for Telematics and Information Technolo gy (CTIT).
Bouquet, P., Seraﬁni, L., and Zanobini, S. (2003). Semantic Coordination:
a New Approach and an Application. In Fensel, D., Sycara, K., and
Mylopoulos, J., editors, Proceedings of the Second International
Semantic Web Conference , volume 2870 of LNCS , pages 130–145.
Springer-Verlag, Berlin, Germany.
Bratman, M. E. (1987). Intentions, Plans, and Practical Reason . Harvard
University Press, Cambridge, MA, USA.
Brazelton, J. and Gorry, G. A. (2003). Creating a Knowledge-S haring
Community: If You Build It, Will They Come? Communications of the
ACM, 46(2):23–25.
Bresciani, P., Giorgini, P., Giunchiglia, F., Mylopoulos, J. , and Perini, A.
(2004). Tropos: An Agent-Oriented Software Development Metho dology.
International Journal of Autonomous Agents and Multi Agent S ystems ,
8(3):203–236.
Brown, J. S. (1991). Research that Reinvents the Corporation . InHarvard
Business Review on Knowledge Management , pages 153–180. Harvard
Business School Press, Boston, MA, USA.
Brown, J. S. and Duguid, P. (2000). Balancing Act: How to Captur e
Knowledge Without Killing it. In Harvard Business Review on
Knowledge Management , pages 45–59. Harvard Business School Press,
Boston, MA, USA.
Bull, S., Greer, J., McCalla, G., Kettel, L., and Bowes, J. (20 01). User
Modelling in I-Help: What, Why, When and How. In Bauer, M.,
Gmytrasiewicz, P., and Vassileva, J., editors, User Modeling 2001: 8th
International Conference , volume 2109 of LNCS , pages 117–126.
Springer-Verlag, Heidelberg, Germany.
304 BIBLIOGRAPHY
Bunge, M. (1979). Ontology II: A World of Systems . D. Reidel Publishing,
New York, USA.
Caire, G., Garijo, F., Gomez, J., Pavon, J., Leal, F., Chainh o, P., Kearney,
P., Stark, J., Evans, R., and Massonet, P. (2001). Agent Oriented
Analysis using MESSAGE/UML. In Wooldridge, M., Weiss, G., and
Ciancarini, P., editors, Revised Papers and Invited Contributions from
the Second International Workshop on Agent-Oriented Softwar e
Engineering II , volume 2222 of LNCS , pages 119–135. Springer-Verlag,
Berlin, Germany.
Castelfranchi, C. (1995). Commitments: From Individual Inte ntions to
Groups and Organizations. In Proceedings of the First International
Conference on Multi-Agent Systems , Cambridge, MA, USA. AAAI-Press
and MIT Press.
Castelfranchi, C. (2004). Trust Mediation in Knowledge Manag ement and
Sharing. In Jensen, C., Poslad, S., and Dimitrakos, T., editors,
Proceedings of the Second International Conference on Trust
Management (iTrust’04) , volume 2995 of LNCS , pages 304–318.
Springer-Verlag, Berlin, Germany.
Castelfranchi, C., Cesta, A., and Miceli, M. (1992). Dependenc e Relations
among Autonomous Agents. In Demazeau, Y. and Werner, E., editors,
Decentralized AI - 3 . Elsevier, Amsterdam, The Netherlands.
Castelfranchi, C. and Falcone, R. (1998). Towards a Theory of Delegation
for Agent-Based Systems. Robotics and Autonomous Systems ,
24(24):141–157.
Chen, G. and Kotz, D. (2000). A Survey of Context-Aware Mobile
Computing Research. Technical Report TR2000-381, Dept. of C omputer
Science, Dartmouth College, USA.
Chen, H. and Dhar, V. (1989). Online Query Reﬁnement on Informa tion
Retrieval Systems: A Process Model of Searcher/System Interact ions. In
BIBLIOGRAPHY 305
Proceedings of the 13th annual international ACM SIGIR conf erence on
Research and development in information retrieval , pages 115–133, New
York, NY, USA. ACM Press.
Chen, J. Q., Lee, T. E., Zhang, R., and Zhang, Y. J. (2003). Syste ms
Requirements for Organizational Learning. Communications of the
ACM, 46(12):73–78.
Chung, L. K., Nixon, B. A., Yu, E., and Mylopoulos, J. (2000).
Non-functional Requirements in Software Engineering . Kluwer
Publishing, New York, NY, USA.
Conklin, J. (1997). Designing Organizational Memory: Preser ving
Intellectual Assets in a Knowledge Economy. Technical report,
CogNexus Institute, USA.
Dam, K. H. and Winikoﬀ, M. (2003). Comparing Agent-oriented
Methodologies. In Giorgini, P., Henderson-Sellers, B., and Win ikoﬀ, M.,
editors, Agent-Oriented Information Systems: 5th International
Bi-Conference Workshop , volume 3030 of LNAI , pages 78–93.
Springer-Verlag, Berlin, Germany.
Davenport, T. H. and Prusak, L. (1998). Working Knowledge: How
Organizations Manage What They Know . Harvard Business School
Press, Boston, MA, USA.
Davies, J., Duke, A., and Stonkus, A. (2003a). OntoShare: Evolvi ng
Ontologies in a Knowledge Sharing System. In Davies et al. (20 03b),
pages 161–177.
Davies, J., Fensel, D., and van Harmelen, F., editors (2003b). Towards the
Semantic Web: Ontology-driven Knowledge Management . Wiley, West
Sussex, UK.
de La Taille, Y. (1992). O Lugar da Interacao Social na Concepc ao de Jean
Piaget (in Portuguese) (The Role of Social Interaction in the Conception
of Jean Piaget). In de La Taille, Y., Oliveira, M. K., and Danta s, H.,
306 BIBLIOGRAPHY
editors, Piaget, Vygotsky e Wallon, Teorias Psicogenticas em Discuss o
(in Portuguese) (Piaget, Vygotsky and Wallon: A Discussion o f
Psychogenetic Theories) , pages 11–21. Summun, Sao Paulo, SP, Brazil,
13 edition.
Delaitre, S. and Moisan, S. (2000). Knowledge Management by R eusing
Experience. In 12th International Conference EKAW2000 , volume 1937
ofLNAI , pages 304–311. Springer-Verlag, Berlin, Germany.
Desouza, K. C. (2003). Barriers to Eﬀective Use of Knowledge
Management Systems in Software Engineering. Communications of the
ACM, 46(1):99–101.
Di Marzo Serugendo, G., Karageorgos, A., Rana, O. F., and Zambo nelli,
F. E. (2004). Engineering Self-Organising Systems: Nature-Inspired
Approaches to Software Engineering , volume 2977 of LNAI .
Springer-Verlag, Berlin, Germany.
Dignum, V. (2004a). A Model for Organizational Interaction: Based on
Agents, Founded in Logic . PhD thesis, Utrecht University, The
Netherlands.
Dignum, V. (2004b). An Overview of Agents in Knowledge Manageme nt.
Technical Report UU-CS-2004-017, Institute of Information an d
Computing Sciences, Utrecht University, The Netherlands.
Dignum, V., Sonenberg, L., and Dignum, F. (2004). Dynamic
Reorganization of Agent Societies. In Proceedings of the Workshop on
Coordination in Emergent Agent Societies at ECAI’04 , Valencia, Spain.
Dignum, V. and van Eeden, P. (2003). Seducing, Engaging and Su pporting
communities at Achmea. In Proceedings of the 4th European Conference
on Knowledge Management, Oxford, UK , Oxford, UK.
Doyle, M. D., Ang, C. S., Martin, D. C., and Noe, A. (1996). The visi ble
embryo project: Embedded program objects for knowledge acc ess
BIBLIOGRAPHY 307
creation and management through the world wide web. Computarized
Medical Imaging and Graphics , 20(6):423–431.
Drescher, G. L. (1991). Made-Up Minds: A Constructivist Approach to
Artiﬁcial Inteligence . MIT Press, Cambridge, MA, USA.
Ellis, C. A., Gibbs, S. J., and Rein, G. L. (1991). Groupware: Som e Issues
and Experiences. Communications of the ACM , 34(1):38–58.
Esfandiari, B. and Chandrasekharan, S. (2001). On How Agents Mak e
Friends: Mechanisms for Trust Acquisition. In Proceedings of the Fourth
Workshop on Deception, Fraud and Trust in Agent Societies , pages
27–34, Montreal, Canada.
Esteva, M., Padget, J., and Sierra, C. (2002). Formalizing a L anguage for
Institutions and Norms. In Meyer, J.-J. C. and Tambe, M., editor s,
Intelligent Agents VIII , volume 2333 of LNAI , page 348366.
Springer-Verlag, Berlin, Germany.
Farias, C. R. G. (2002). Architectural Design of Groupware Systems: a
Component-Based Approach . PhD thesis, University of Twente, The
Netherlands.
Fensel, D., Staab, S., Studer, R., van Harmelen, F., and Davies, J. (2003).
A Future Perspective: Exploiting Peer-2-Peer and the Semant ic Web for
Knowledge Management. In Davies, J., Fensel, D., and van Harmel en,
F., editors, Towards the Semantic Web: Ontology-driven Knowledge
Management , pages 245–264. Wiley, West Sussex, UK.
Ferber, J., Gutknecht, O., and Michel, F. (2004). From Agents to
Organizations: An Organizational View of Multi-agent Systems. I n
Giorgini, P., Mller, J. P., and Odell, J., editors, AOSE 2003 , volume
2935 of LNCS , page 214230. Springer-Verlag, Berlin, Germany.
Fischer, G. and Ostwald, J. (2001). Knowledge Management: Pro blems,
Promises, Realities, and Challenges. IEEE Intelligent Systems ,
16(1):60–72.
308 BIBLIOGRAPHY
Fischer, K., Muller, J. P., and Pischel, M. (1996). A Pragmatic BDI
Architecture. In Wooldridge, M., Muller, J. P., and Tambe, M. , editors,
Intelligent Agents II: Agent Theories, Architectures and L anguages ,
volume 1037 of LNAI , pages 203–218. Springer, Berlin, Germany.
Freire, P. (1970). Pedagogy of the Oppressed . Continuum Intl Pub Group,
New York, NY, USA.
Freire, P. and Fagundez, A. (1992). Learning to Question: A Pedagogy of
Liberation . Continuum Intl Pub Group, New York, NY, USA.
Gandon, F., Poggi, A., Rimassa, G., and Turci, P. (2002). Multi- Agent
Corporate Memory Management System. Journal of Applied Artiﬁcial
Intelligence , 16(9-10):699–720.
Gangemi, A., Prisco, A., Sagri, M., Steve, G., and Tiscornia, D. ( 2003).
Some Ontological Tools to Support Legal Regulatory Complia nce, with a
Case Study. In Meersman, R. and Zahir, T., editors, On the Move to
Meaningful Internet Systems 2003: OTM 2003 Workshops , volume 2889
ofLNCS , pages 607–620. Springer-Verlag, Berlin, Germany.
Garcia-Barrios, V. M., Gutl, C., Preis, A. M., Andrews, K., and Pive c, M.
(2004). AdELE: A Framework for Adaptive E-Learning through Ey e
Tracking. In Proceedings of the 4th International Conference on
Knowledge Management (I-Know’04) , pages 609–616, Graz, Austria.
Garvin, D. A. (1993). Building a Learning Organization. In Harvard
Business Review on Knowledge Management , pages 47–80. Harvard
Business School Press, Boston, MA, USA.
Giorgini, P., Mylopoulos, J., and Sebastiani, R. (2005). Goal -Oriented
Requirements Analysis and Reasoning in the Tropos Methodology .In
Engineering Applications of Artiﬁcial Intelligence , 18(2).
Goguen, J. A. and Linde, C. (1993). Techniques for Requiremen ts
Elicitation. In Proceedings of Requirements Engineering ’93 , pages
152–164, Piscataway, NJ, USA. IEEE Computer Society.
BIBLIOGRAPHY 309
Gongla, P. and Rizzuto, C. R. (2001). Evolving communities o f practice:
IBM Global Services experience. IBM Systems Journal , 40(4):842–862.
Good, N., Schafer, J. B., Konstan, J., Borchers, A., Herlocker, B. , and
Riedl, J. (1999). Combining Collaborative Filtering with P ersonal
Agents for Better Recommendations. In Proceedings of the 1999
Conference of the Americian Association of Artiﬁcial Intel ligence
(AAAI’99) , pages 439–446, Cambridge, MA, USA. MIT Press.
Gruninger, M., Ateﬁ, K., and Fox, M. (2000). Ontologies to Su pport
Process Integration in Enterprise Engineering. Computational and
Mathematical Organization Theory , 6(4):381–394.
Guizzardi, G. (2005). Ontological Foundations for Structural Conceptual
Models . PhD thesis, University of Twente, The Netherlands.
Guizzardi, G. and Wagner, G. (2005). Some Applications of a Uni ﬁed
Foundational Ontology in Business Modeling. In Rosemann, M. an d
Green, P., editors, Ontologies and Business Systems Analysis , pages
345–367. Idea Group, London, UK.
Guizzardi, R., Dignum, V., Perini, A., and Wagner, G. (2005). T owards an
Integrated Methodology to Develop KM Solutions with the Sup port of
Agents. In Proceedings of the International Conference on Integration of
Knowledge Intensive Multi-Agent Systems (KIMAS’05) , pages 221–226,
Boston, MA, USA. IEEE.
Guizzardi, R. and Perini, A. (2005). Analyzing Requirements o f Knowledge
Management Systems with the Support of Agent Organizations. Journal
of the Brazilian Computer Society (JBCS) - Special Issue on Ag ents
Organizations , 11(1):51–62.
Guizzardi, R. S. S., Aroyo, L., and Wagner, G. (2004a). Agent-o riented
Knowledge Management in Learning Environments: A Peer-to-P eer
Helpdesk Case Study. In van Elst, L., Dignum, V., and Abecker, A.,
editors, Agent-Mediated Knowledge Management , volume 2926 of LNAI ,
pages 57–72. Springer-Verlag, Heidelberg, Germany.
310 BIBLIOGRAPHY
Guizzardi, R. S. S., Perini, A., and Dignum, V. (2003). Using Inte ntional
Analysis to Model Knowledge Management Requirements in
Communities of Practice. Technical Report TR-CTIT-03-53, Centre for
Telematics and Information Technology (CTIT), The Netherla nds.
Guizzardi, R. S. S., Perini, A., and Dignum, V. (2004b). Provid ing
Knowledge Management Support to Communities of Practice th rough
Agent-oriented Analysis. In Proceedings of the 4th International
Conference on Knowledge Management, Graz, Austria (I-Know ’04),
pages 320–328, Graz, Austria.
Hahn, J. and Subramani, M. R. (2000). A Framework of Knowledge
Management Systems: Issues and Challenges for Theory and Practi ce.
InProceedings of the 21st International Conference on Informa tion
systems (ICIS ’00) , pages 302 – 312, Atlanta, GA, USA. Association for
Information Systems.
Hansen, M. T., Nohria, N., and Tierney, T. (1999). What’s Your Str ategy
for Managing Knowledge. In Harvard Business Review on Knowledge
Management , pages 61–86. Harvard Business School Press, Boston, MA,
USA.
Hassan, I. M., Rafea, A. A. E., and Rasmy, M. (2004). Conﬁguration
Irrigation Schedule Based on Expert Systems and Operations Re search.
InProceedings of the Fifth International Workshop on Artiﬁcial
Intelligence in Agriculture (AIA’04) , Oxford, UK. Elsevier.
Henderson-Sellers, B. (2005). Creating a Comprehensive Agent-O riented
Methodology: Using Method Engineering and the OPEN Metamodel . In
Henderson-Sellers, B. and Giorgini, P., editors, Agent-Oriented
Methodologies , pages 368–397. Idea Group, London, UK.
Henninger, S. (2001). Turning Development Standards into Re positories of
Experiences. Software Process: Improvement and Practice , Volume
6(3):141–155.
BIBLIOGRAPHY 311
Hubner, J. F., Sichman, J. S., and Boissier, O. (2002). A Model fo r the
Structural, Functional, and Deontic Speciﬁcation of Organ izations in
Multiagent Systems. In Bittencourt, G. and Ramalho, G. L., edi tors,
Advances in Artiﬁcial Intelligence: 16th Brazilian Symposi um on
Artiﬁcial Intelligence (SBIA’02) , volume 2507 of LNAI , pages 118–128.
Springer-Verlag, Berlin, Germany.
Iglesias, C. A., Garijo, M., and Gonzalez, J. C. (1999). A Survey of
Agent-Oriented Methodologies. In Muller, J., Singh, M., and R ao, A.,
editors, Intelligent Agents V: Agents Theories, Architectures and
Languages , volume 1555 of LNCS , pages 317–330. Springer-Verlag,
London, UK.
Iglesias, C. A., Garijo, M., Gonzalez, J. C., and Velasco, J. R. (1 998).
Analysis and Design of Multiagent Systems Using MAS-CommonKADS.
In Singh, M., Rao, A., and Wooldridge, M., editors, Intelligent Agents
IV, volume 1365 of LNAI , pages 313–326. Springer-Verlag, Berlin,
Germany.
Jennings, N. R., Sycara, K. P., and Wooldridge, M. (1998). A Roa dmap of
Agent Research and Development. Journal of Autonomous Agents and
Multi-Agent Systems , 1(1):7–36.
Juan, T., Pearce, A., and Sterling, L. (2002). ROADMAP: Extendi ng the
Gaia Methodology for Complex Open Systems. In Proceedings of the
International Conference on Autonomous Agents and Multiag ent
Systems (AAMAS’02) , pages 3–10, New York, USA. ACM Press.
Juan, T., Sterling, L., Martelli, M., and Mascardi, V. (2003). Customizing
AOSE Methodologies by Reusing AOSE Features. In Proceedings of the
2nd Iinternational Joint Conference on Autonomous Agents an d
Multiagent Systems (AAMAS’03) , pages 113–120, New York, USA.
ACM Press.
Juan, T., Sterling, L., and Winikoﬀ, M. (2004). Assembling Agent
Oriented Software Engineering Methodologies from Feature s. In
312 BIBLIOGRAPHY
Giorgini, P., Muller, J. P., and Odell, J., editors, AOSE 2003 , volume
2935 of LNCS , pages 198–209. SpringerVerlag, Berlin, Germany.
Kankanhalli, A., Tanudidjaja, F., Sutanto, J., and Tan, B. C. Y. (2003).
The Role of IT in Successful Knowledge Management Initiatives.
Communications of the ACM , 46(9):69–73.
Karlin, S. (2004). Companies ﬁnd new ways to harness their eng ineers
creativity. IEEE Spectrum , November 2004:67–68.
Kavakli, E. and Loucopoulos, P. (2005). Goal Modeling in Requ irements
Engineering: Analysis and Critique of Current Methods. In Krog stie, J.,
Halpin, T., and Siau, K., editors, Information Modeling Methods and
Methodologies , pages 102–124. Idea Group, London, UK.
Kruchten, P. (2000). The Rational Uniﬁed Process: An Introduction .
Addison-Wesley, Boston, MA, USA.
Labrou, Y., Finin, T., and Peng, Y. (1999). Agent Communication
Languages: The Current Landscape. IEEE Intelligent Systems ,
14(2):45–52.
Lave, J., Wenger, E., Pea, R., Brown, J. S., and Heath, C. (1991 ).Situated
Learning: Legitimate Peripheral Participation. Learning i n Doing:
Social, Cognitive & Computational Perspectives . Cambridge University
Press, Cambridge, MA, USA.
Lehner, F., Maier, R., and Klosa, O. (1998). Organisational Me mory
Systems: Application of Advanced Database & Network Technologies in
Organisations. In Proceedings of the 2nd International Conference on
Practical Aspects of Knowledge Management (PAKM’98) , pages
14/1–14/12, Basel, Switzerland. CEUR-Ws.org.
Loucopoulos, P. and Kavakli, E. V. (1999). Enterprise Knowledg e
Management and Conceptual Modelling. In Selected Papers from the
Symposium on Conceptual Modeling, Current Issues and Future
Directions , volume 1565 of LNCS , pages 123–143. Springer-Verlag.
BIBLIOGRAPHY 313
Ludermir, P. G. (2005). Supporting Knowledge Management usi ng a
Nomadic Service for Artifact Recommendation. Master’s thesis,
University of Twente, The Netherlands.
Ludermir, P. G., Guizzardi, R. S. S., and Sona, D. (2005). Fin ding the
Right Answer: An Information Retrieval Approach Supporting
Knowledge Sharing. In Proceedings of the Workshop on Agent Mediated
Knowledge Management (AMKM’05) .
Luger, G. F. (2005). Artiﬁcial Intelligence: Structures and Strategies for
Complex Problem Solving . Addison-Wesley, Boston, MA, USA, 5th
edition.
Mahoney, M. (2004). What is constructivism and why is it growin g?
Contemporary Psychology , 49:360–363.
Mantovani, G. (1996). Social Context in HCI: A New Framework fo r
Mental Models, Cooperation, and Communication. Cognitive Science ,
20:237–269.
Montaner, M., Lopez, B., and de la Rosa, J. L. (2003). A Taxonom y of
Recommender Agents on the Internet. Artiﬁcial Intelligence Review ,
19:285–330.
Nejdl, W., Wolf, B., Qu, C., Decker, S., Sintek, M., Naeve, A., Nil sson, M.,
Palmer, M., and Risch, T. (2002). EDUTELLA: P2P Networking
Infrastructure Based on RDF. In Proceedings of 11th World Wide Web
Conference (WWW2002) , pages 604–615, New York, USA. ACM Press.
Newell, S., Scarbrough, H., Swan, J., and Hislop, D. (1999). Intr anets and
Knowledge Management: Complex Processes and Ironic Outcomes. In
Proceedings of the 32nd Hawaii International Conference on S ystem
Sciences , Piscataway, NJ, USA. IEEE Press.
Nonaka, I. and Takeuchi, H. (1995). The Knowledge Creating Company:
How Japanese Companies Create the Dynamics of Innovation . Oxford
University Press, New York, USA.
314 BIBLIOGRAPHY
Nuseibeh, B. and Easterbrook, S. (2000). Requirements Enginee ring: A
Roadmap. In Proceedings of International Conference on Software
Engineering (ICSE-2000) , New York, USA. ACM Press.
Odell, J., Parunak, H. V. D., and Bauer, B. (2000). Extending UML for
Agents. In Proceedings of the Agent-Oriented Information Systems
Workshop at the 17th National conference on Artiﬁcial Intel ligence ,
pages 3–17, Austin, TX, USA.
O’Leary, D. E. (1998). Enterprise Knowledge Management. IEEE
Computer , 31(3):54–61.
Oram, A., editor (2001). Peer-to-Peer: Harnessing the Power of Disruptive
Technologies . O’Reilly, Sebastopol, CA, USA.
Orlikowski, W. J. (1992a). Learning from Notes: Organizationa l Issues in
Groupware Implementation. In Proceedings of The International
Conference on Computer Supported Cooperative Work (CSCW92) , pages
362–369, New York, NY, USA. ACM Press.
Orlikowski, W. J. (1992b). The Duality of Technology: Rethin king the
Concept of Technology in Organizations. Organizational Science ,
3(3):398–427.
Orlikowski, W. J. and Gash, D. C. (1994). Technological Frames: Making
Sense of Information Technology in Organizations. ACM Transactions
on Information Systems , 12(2):174–207.
Orlikowski, W. J., Walsham, G., Jones, M., and DeGross, J. I., edit ors
(1995). Information Technology and Changes in Organizational Work,
Proceedings of the IFIP WG8.2 Working Conference. Chapman and
Hall, London, UK.
Padgham, L. and Winikoﬀ, M. (2002). Prometheus: A Pragmatic
Methodology for Engineering Intelligent Agents. In Proceedings of the
workshop on Agent-oriented methodologies at OOPSLA’02 , Seattle, USA.
BIBLIOGRAPHY 315
Papert, S. (1993). The Children’s Machine: Rethinking School in the Age
of the Computer . BasicBooks, New York, NY, USA.
Parunak, H. V. D. (2000). Agents in Overalls: Experiences and Issue s in
the Development and Deployment of Industrial Agent-Based Syste ms.
International Journal of Cooperative Information Systems , 9(3):209–228.
Pedersen, K. V. (2004). Context Based Support for Clinical Reaso ning. In
Proceedings of the 4th International Conference of Knowledg e
Management (I-Know’04) , pages 397–404, Graz, Austria.
Perini, A., Bresciani, P., Yu, E., and Molani, A. (2004). Intent ional
Analysis for Distributed Knowledge Management. In van Elst, L.,
Dignum, V., and Abecker, A., editors, Agent-Mediated Knowledge
Management , volume 2926 of LNAI , pages 351–367. Springer-Verlag,
Heidelberg, Germany.
Perini, A. and Susi, A. (2004). Developing Tools for Agent-Orien ted Visual
Modeling. In Lindemann, G., Denzinger, J., Timm, I., and Unla nd, R.,
editors, Multiagent System Technologies, MATES 2004 , volume 3187 of
LNCS , pages 169–182. Springer-Verlag.
Piaget, J. and Inhelder, B. (1969). The Psychology of the Child . Basic
Books, New York, USA.
Preece, A., Hui, K., Gray, A., Marti, P., Bench-Capon, T., Cui, Z ., and
Jones, D. (2001). KRAFT: An Agent Architecture for Knowledge
Fusion. International Journal on Cooperative Information Systems , 10(1
and 2):171–195.
Pumareja, D., Bondarouk, T., and Sikkel, K. (2003). Support ing
Knowledge Sharing Isn’t Easy - Lessons Learnt from a Case Study. In
Proceedings of the Information Resource Management Associa tion
International Conference (IRMA’03), Philadelphia, USA , pages 531–534,
Philadelphia PA, USA.
316 BIBLIOGRAPHY
Pynadath, D. V., Tambe, M., Chauvat, N., and Cavedon, L. (1999) .
Toward Team-Oriented Programming. In Jennings, N. R. and Lespr ance,
Y., editors, Intelligent Agents VI: Agent Theories, Architectures, and
Languages , volume 1757 of LNCS , pages 233–247. Springer-Verlag,
Berlin, Germany.
Quinn, J. B., Anderson, P., and Finkelstein, S. (1996). Managin g
Professional Intellect: Making the Most of the Best. In Harvard
Business Review on Knowledge Management , pages 181–205. Harvard
Business School Press, Boston, MA, USA.
Rao, A. S. and Georgeﬀ, M. P. (1991). Modeling Rational Agents w ithin a
BDI-Architecture. In Proceedings of the Second International Conference
on Principles of Knowledge Representation and Reasoning (K R’91),
pages 473–484, Cambridge, MA, USA. Morgan Kaufmann Publishers.
Reimer, U., Brockhausen, P., Lau, T., and Reich, J. R. (2003).
Ontology-based Knowledge Management at Work: The Swiss Life C ase
Studies. In Davies, J., Fensel, D., and van Harmelen, F., editors,
Towards the Semantic Web: Ontology-Driven Knowledge Manage ment,
pages 197–218. Wiley, West Sussex, England.
Robertson, M., Sorensen, C., and Swan, J. (2000). Facilitatin g Knowledge
Creation with Groupware: A Case Study of a Knowledge Intensive Firm.
InProceedings of the 33rd Hawaii International Conference on S ystem
Sciences , Piscataway, NJ, USA. IEEE Press.
Sabas, A., Delisle, S., and Badri, M. (2002). A Comparative Analy sis of
Multiagent System Development Methodologies: Towards a Uniﬁe d
Approach. In Proceedings of the 16th European Meeting on Cybernetics
and Systems Research , pages 599–604, Vienna, Austria.
Salton, G. and McGill, M. J. (1983). Introduction to Modern Information
Retrieval . McGraw-Hill Book Company, New York, NY, USA.
Santos, L. O. B. S., Guizzardi, R. S. S., and van Sinderen, M. (2 005a).
Agent-Oriented Approach to Develop Context-Aware Application s: A
BIBLIOGRAPHY 317
Case Study on Communities of Practice. Technical Report
TR-CTIT-05-20, Centre for Telematics and Information Tech nology
(CTIT), The Netherlands.
Santos, L. O. B. S., Guizzardi, R. S. S., and van Sinderen, M. (2 005b).
Agent-Oriented Context-Aware Platforms Supporting Communi ties of
Practice in Health Care. In Proceedings of the Fourth International
Conference on Autonomous Agents and Multi-agent Systems (AA MAS’
05), pages 1287–1288, New York, USA. ACM Press.
Schreiber, G., Akkermans, H., Anjewierden, A., de Hoog, R., Shadbo lt, N.,
Van de Velde, W., and Wielinga, B. (2000). Knowledge Engineering and
Management: The CommonKADS Methodology . MIT Press, Cambridge,
MA, USA.
Sen, S. and Weiss, G. (1999). Learning in Multiagent Systems. In W eiss,
G., editor, Multiagent Systems: A Modern Approach to Distributed
Artiﬁcial Intelligence , pages 259–298. MIT Press, Cambridge, MA, USA.
Shoham, Y. (1993). Agent-oriented Programming. Artiﬁcial Intelligence ,
60:5192.
Sichman, J. S., Dignum, V., and Castelfranchi, C. (2005). Agent s’
Organizations: A Cocise Overview. Journal of the Brazilian Computer
Society (JBCS) - Special Issue on Agents Organizations , 11(1):3–8.
Soller, A., Guizzardi, R. S. S., Molani, A., and Perini, A. (2004 ). SCALE:
Supporting Community Awareness, Learning and Evolvement in an
Organizational Learning Environment. In Proceedings of the 6th
International Conference of the Learning Sciences , pages 489–496, Santa
Monica, CA, USA.
Sona, D., Veeramachaneni, S., Avesani, P., and Polettini, N. (2 004).
Clustering with Propagation for Hierarchical Document Classiﬁ cation.
Technical Report T04-04-05, ITC-IRST, Italy.
318 BIBLIOGRAPHY
Sumner, M. (1999). Knowledge Management: Theory and Practi ce. In
Proceedings of the Special Interest Group on Computer Perso nnel
Research Annual Conference (SIGCPR’99) , pages 1–3, New York, NY,
USA. ACM Press.
Taveter, K. and Wagner, G. (2005). Towards Radical Agent-Ori ented
Software Engineering Processes Based on AOR Modelling. In
Henderson-Sellers, B. and Giorgini, P., editors, Agent-Oriented
Methodologies , pages 277–316. Idea Group, London, UK.
Tiwana, A. (2003). Aﬃnity to Inﬁnity in Peer-to-Peer Knowledg e
Platforms. Communications of the ACM , 46(5):76–80.
Uiterkamp, E. S. (2005). Nomadic Positioning Services for a Mob ile Service
Platform. Master’s thesis, University of Twente, The Netherlands.
van Elst, L., Abecker, A., and Maus, H. (2001). Exploiting User and
Process Context for Knowledge Management Systems. In Proceedings of
the Workshop on User Modeling for Context-Aware Applicatio ns,
Sonthofen, Germany.
van Elst, L., Dignum, V., and Abecker, A. (2004). Towards
Agent-Mediated Knowledge Management. In van Elst, L., Dignum , V.,
and Abecker, A., editors, Agent-Mediated Knowledge Management ,
volume 2926 of LNAI , pages 1–30. Springer-Verlag, Heidelberg, Germany.
van Lamsweerde, A., Dardenne, A., Delcourt, B., and Dubisy, F. (1 991).
The KAOS Project: Knowledge Acquisition in Automated Speciﬁca tion
of Software. In Proceedings of the AAAI Spring Symposium Series , pages
59–62, Cambridge, MA, USA. MIT Press.
Vassileva, J. (2002). Supporting Peer-to-Peer User Communitie s. In
Meersman, R. and Tari, Z., editors, CoopIS/DOA/ODBASE 2002 ,
volume 2519 of LNCS , pages 230–247. Springer-Verlag, Berlin, Germany.
Vygotsky, L. (1978). Mind in Society . Harvard University Press,
Cambridge, MA, USA.
BIBLIOGRAPHY 319
Wagner, G. (2003). The Agent-Object-Relationship Meta-Mode l: Towards
a Uniﬁed View of State and Behavior. Information Systems ,
28(5):475–504.
Wagner, G. (2005). AOR Modelling and Simulation: Towards a G eneral
Architecture for Agent-Based Discrete Event Simulation. In Bre sciani,
P., Giorgini, P., Henderson-Sellers, B., Low, G., and Winikoﬀ, M.,
editors, Agent-Oriented Information Systems: 5th International
Bi-Conference Workshop, AOIS 2003 , volume 3030 of LNAI , pages
174–188. Springer-Verlag, Berlin, Germany.
Weiser, M. (1994). The World is not a Desktop. ACM Interactions ,
1(1):7–8.
Weiss, G., editor (1999). Multiagent Systems: A Modern Approach to
Distributed Artiﬁcial Intelligence . MIT Press, Cambridge, MA, USA.
Wenger, E. (1998). Communities of Practice: Learning, Meaning and
Identity . Cambridge University Press, New York, USA.
Wiig, K. M. (1994). Knowledge Management: The Central Management
Focus for Intelligent-Acting Organizations . Schema Press, Arlington,
TX, USA.
Winograd, T. (1995). From Programming Environments to Envi ronments
for Design. Communications of the ACM , 38(6):65–74.
Wooldridge, M. (2002). Methodologies. In An Introduction to Multiagent
Systems , pages 225–244. Wiley & Sons, Chichester, England.
Wooldridge, M., Jennings, N. R., and Kinny, D. (2000). The Gaia
Methodology for Agent-Oriented Analysis and Design. Journal of
Autonomous Agents and Multi-Agent Systems , 3(3):285–312.
Wooldridge, M. J. (1999). Intelligent Agents. In Weiss, G., edit or,
Multiagent Systems: A Modern Approach to Distributed Artiﬁcia l
Intelligence , pages 27–77. MIT Press, Cambridge, MA, USA.
320 BIBLIOGRAPHY
Wooldridge, M. J. and Ciancarini, P. G. (2001). Agent-Orient ed Software
Engineering: The state of the art. In Ciancarini, P. G. and Woo ldridge,
M. J., editors, AOSE 2000 , volume 1957 of LNCS , pages 1–25.
Springer-Verlag, Berlin, Germany.
Wooldridge, M. J. and Jennings, N. (1995). Intelligent Agents: T heory and
Practice. Knowledge Engineering Review , 10(2):115–152.
Yen, J., Yin, J., Ioerger, T. R., Miller, M. S., Xu, D., and Volz, R. A.
(2001). CAST: Collaborative Agents for Simulating Teamwork. In
Proceedings of the Seventeenth International Joint Conferen ce on
Artiﬁcial Intelligence (IJCAI’01) , pages 1135–1144, Seattle, WA, USA.
Morgan Kaufmann.
Yin, J., Miller, M. S., Ioerger, T. R., Yen, J., and Volz, R. A. (2 000). A
Knowledge-based Approach for Designing Intelligent Team Trai ning
Systems. In Proceedings of Agents’00 , pages 427–434, New York, USA.
ACM Press.
Yu, B. and Singh, M. P. (2002). An Agent-based Approach to Knowled ge
Management. In Proceedings of the Eleventh International Conference
on Information and Knowledge Management (CIKM ’02) , pages
642–644, New York,USA. ACM Press.
Yu, E. (1995). Modeling Strategic Relationships for Process Reengineeri ng.
PhD thesis, University of Toronto, Canada.
