See discussions, st ats, and author pr ofiles f or this public ation at : https://www .researchgate.ne t/public ation/258049676
Open Holonic Multi-Agent Architectu re for Intelligent T utoring System
Development
Conf erence Paper  · July 2008
CITATIONS
21READS
121
2 author s:
Some o f the author s of this public ation ar e also w orking on these r elat ed pr ojects:
Model f or Identific ation of P olitic ally Exposed P ersons  View pr oject
Egons Lav endelis
Riga Technic al Univ ersity
34 PUBLICA TIONS    148 CITATIONS    
SEE PROFILE
Janis Grundspenkis
Riga Technic al Univ ersity
136 PUBLICA TIONS    867 CITATIONS    
SEE PROFILE
All c ontent f ollo wing this p age was uplo aded b y Egons Lav endelis  on 03 June 2014.
The user has r equest ed enhanc ement of the do wnlo aded file.
 OPEN HOLONIC MULTI-AGENT ARCHITECTURE FOR 
INTELLIGENT TUTORING SYSTEM DEVELOPMENT 
Egons Lavendelis 
Riga Technical University, Department of Systems Th eory and Design 
Kalku 1, LV-1658, Riga, Latvia 
egons.lavendelis@cs.rtu.lv 
 
Janis Grundspenkis 
Riga Technical University, Department of Systems Th eory and Design 
Kalku 1, LV-1658, Riga, Latvia 
janis.grundspenkis@cs.rtu.lv 
ABSTRACT 
During the last decade Intelligent Tutoring Systems  (ITS) are becoming more and more popular. One of t he research 
directions of ITS is agent and multi-agent system u sage to build ITSs. Despite very intensive research  in the agent-based 
ITS field technologies for ITS development have sev eral drawbacks. Firstly, systems are built without any structure and 
consisting from large-scale agents, making their de velopment complex. Secondly, reuse of agents is imp ossible and 
implementation of changes into the developed system s is complicated due to the need to change existing  large scale 
agents. In this paper we propose open holonic agent  architecture. The architecture eliminates the ment ioned drawbacks by 
introducing a holonic structure of relatively small  agents. Any agent and holon can be easily added to  the system, 
removed from it and replaced with other agents or h olons.  
KEYWORDS 
Multi-agent architecture, holonic multi-agent syste m, intelligent tutoring system 
1.  INTRODUCTION 
Initially Intelligent Tutoring Systems (ITS) were d eveloped as monolith systems, because it was the ea siest 
way to get the working system with needed functiona lity. Later on, to manage complexity more successfu lly 
a modular architecture was widely used (Smith, 1998 ). Unfortunately, this architecture still had large -scale 
modules, thus having complicated development. Reuse  of any parts of the system is impossible in most c ases, 
too. 
During the last decade it has been proven that agen ts can be effectively used to facilitate ITS 
development. A lot of agent-based ITSs and ITS prot otypes have been built (Hospers et al, 2003), (Gasc uena 
et al, 2005), (Postal et al, 2004), (Novac Ududec &  Barla, 2007), (Devedzic et al, 2000), (Dorca et al , 2003). 
However, these systems consist of large scale agent s and despite agents having some advantages over 
traditional modules, they do not solve change imple mentation complexity and reuse problems in ITSs. Fo r 
example, if a system has one general problem genera tion agent, this agent can hardly ever be reused in  any 
other system. Change implementation into the system  is complex, because existing agents (their code) h as to 
be changed and every change in any agent can have i mpact on any other agent, which makes possibility o f 
errors very high. Traditional large-scale agent usa ge in the ITSs has also such additional drawbacks: (1) 
agents have multiple tasks, which causes high compl exity of their development, (2) a system is incapab le to 
provide sufficient adaptation, if it has only singl e expert, tutoring strategy, and problem generation  agents, 
(3) single agents can not solve problems which can be easily solved by multi-agent systems using diffe rent 
conflict resolution mechanisms.  
To solve mentioned problems, there is a need for a specialized architecture for ITS development. A few  
architectures have been proposed (Capuano et al, 20 00), (de Antonio et al, 2003), (Triantis & Pintelas , 2004). 
 However, they are not open and agents with new func tionality can not be easily added to the system. Th us, 
there is a need for an open architecture, consistin g of small-scale agents. Holonic multi-agent system s well 
satisfy previously mentioned needs. The paper propo ses an open holonic multi-agent architecture for IT S 
development to eliminate abovementioned drawbacks. 
The paper is organized as follows. The second secti on of the paper contains a brief overview of tradit ional 
ITS architectures and their drawbacks. The third se ction consists of an overview of multi-agent archit ectures 
and their comparison in terms of their usage in ITS  development. The fourth section is dedicated to th e 
developed open multi-agent architecture for ITS dev elopment. Conclusions and outline of future work ar e 
given at the end of the paper. 
2.  OVERVIEW OF INTELLIGENT TUTORING SYSTEM 
ARCHITECTURES 
In the early years of Intelligent Tutoring System ( ITS) research systems and their prototypes were dev eloped 
for teaching specific courses. These systems were d eveloped with monolith architecture, because it was  the 
easiest way to get a working system. Though, such a n approach has significant drawbacks. Firstly, 
development of monolith large-scale systems is very  time and resource consuming. Secondly, it is very 
complicated to implement changes into such a monoli th system. Thus, the need for a flexible architectu re 
appeared. 
Despite the fact that ITSs have been implemented us ing different technologies, are built for teaching of 
different areas and, as consequence, have different  characteristics, all ITSs have three main types of  
knowledge: knowledge about what to teach (domain kn owledge), how to teach (pedagogical knowledge) and 
knowledge about the learner  (Grundspenkis & Anohin a, 2005). These types of knowledge determine three 
main modules (a “traditional trinity” (Smith, 1998) ) used in a traditional architecture of ITSs (Grund spenkis 
& Anohina, 2005): 
• Expert module most commonly is capable to solve pro blems in the domain and contains the domain 
expert’s knowledge representation schema. 
• Student module collects knowledge about learner’s c onceptions, errors made, as well as about learner’s  
preferences during the learning. 
• Tutoring module holds teaching strategies and instr uctions to implement teaching process. The primary 
tasks of this module are controlling of selection, sequencing and presentation of learning material th at is 
most suitable for the needs of the learner, determi ning the type and contents of feedback and help, an d 
answering learners’ questions.  The goal of this mo dule is to reduce the gap between expert’s and 
learner’s knowledge levels. 
The fourth component of modern ITSs is a user inter face or a communication module, which controls 
interaction with the learner. 
Several researches have proved that ITSs have suita ble characteristics to be implemented using intelli gent 
agents and multi-agent systems, because ITSs, as a rule, consist of multiple modules, have multiple wa ys to 
accomplish different tasks (for example, different teaching strategies), various perspectives (for exa mple, 
various input devises) and multiple problem solving  realities. More details are given in (Grundspenkis  & 
Anohina, 2005), (Webber & Pesty, 2002). Intensive r esearch in the agent-based ITSs field has been carr ied 
out during the last decade and numerous systems hav e been built. Well known examples of such systems a re: 
Ines system for nurse education (Hospers et al, 200 3), MATHTUTOR (Postal et al, 2004), Formal Language s 
and aUTomata Education system FLUTE (Devedzic et al , 2000), WADIES – a Web- and agent-based 
adaptive learning environment for teaching compiler s (Georgouli et al, 2003), etc. 
Anohina and Grundspenkis (2005) offer a set of agen ts that can be used to implement traditional 
components of the ITS. Student model  agents and their tasks are the following. A knowle dge evaluation agent 
builds a model of learner’s current level of knowle dge based on assessments. A psychological agent bui lds a 
profile of learner’s psychological characteristics.  A cognitive diagnostic agent determines and regist ers 
learner’s mistakes. Interaction registering agent r egisters history of learner’s interaction with the system. 
Tutoring module  agents and their tasks are the following. A curric ulum agent evaluates, generates, and 
updates the curriculum for the specific learner. Ea ch tutoring strategy agent realizes one or multiple  teaching 
 strategies. A feedback agent generates feedback and  help for the learner. Expert module  agents or expert 
agents solve domain specific problems and tasks. 
A few multi-agent architectures for ITS development  have also been developed. These architectures 
mainly consist of previously mentioned agents. The greatest part of the architectures is closed – chan ges in 
the system are impossible during runtime and implem entation of any changes is time and work consuming.  
Such closed architectures are ABITS (Capuano et al,  2000), IVET (De Antonio et al, 2003), and X-genito r 
(Triantis & Pintelas, 2004). Several open architect ures are proposed: JADE (Silveira & Vicari, 2002) a nd two 
level multi-agent architecture for distance learnin g environment (Webber & Pesty, 2002). However these  
architectures are open only for new student agents to join the system and are closed for any other age nt types. 
These proposals give an opportunity to create a lea rning environment for multiple learners, but they d o not 
help to change existing systems and to develop larg e-scale agents. 
To summarize, all mentioned systems and architectur es have some significant drawbacks. The main 
drawback is complicated change implementation into the system, because existing large-scale agents hav e to 
be changed if modification of the system is necessa ry. Thus, existing code has to be edited and possib le 
impact on other parts of the code must be taken int o consideration. In such situations errors are high ly 
possible. Multi-agent systems used to implement ITS s are traditional, one level systems without any 
organization. Any agent is allowed to communicate w ith any other, agents are large-scale and they have  
many tasks. These factors make ITS development comp licated. The developed systems do not offer suffici ent 
adaptation as well, because they have only one expe rt, one tutoring strategy and one problem generatio n 
agent (Frasson et al, 1996). Some problems in ITSs need approaches of distributed computing, like vari ous 
conflict resolution mechanisms. 
3.  OVERVIEW  OF MULTI-AGENT SYSTEM ARCHITECTURES 
Development of small multi-agent systems usually in cludes only definition of agents and interactions a mong 
them. In such an approach interaction is possible b etween every two agents. The complexity of the syst em 
increases exponentially when the number of agents i ncreases. It makes development of large-scale multi -
agent systems complex and time-consuming. Unstructu red multi-agent systems also can not well fit in th e 
organisation, because organisational structure usua lly is hierarchical. Therefore during the last deca de a 
couple of multi-agent architectures are developed t o add organization to the multi-agent systems. Belo w a 
brief overview of the main contributions in the fie ld of multi-agent architectures is given. 
The most popular multi-agent architecture is holonic multi-agent system , where autonomy of agents is 
reduced and agents are merged into holons, which ap pear to outside as a single entity (Fischer et al, 2003). 
The idea of self-similar structures and term “holon ” (Greek word “holos” has meaning “whole” and suffi x ”-
on” denotes “part”) is adopted from biological syst em research done by A. Koestler (1967). Holon denot es a 
self-organizing structure which consists of substru ctures and is a part of larger superstructure. In t erms of 
multi-agent systems holon or holonic agent is an ag ent that consists of other agents (subholons). Agen ts join 
or are joined into holons during the design phase t o make them capable to accomplish tasks which they are 
not capable to deal with alone. 
In holonic multi-agent systems agents form a hierar chical structure, i.e., each holon can join a highe r level 
holon and consist of lower level holons. Such hiera rchical structure allows adapting the system to the  
structure of the domain. It is well suitable for ta sk allocation and result sharing in the holons. If the holon has 
to complete a task, a task can be decomposed into s ome subtasks that are assigned to subholons, which can 
decompose them into the next level subtasks. If the  agent receives a task that it is not able to accom plish it 
can also find other agents to create a holon, which  is capable to accomplish a task. Also partial hier archy is 
possible – some agents may participate in more than  one holon, what gives an opportunity to create dif ferent 
structures (Fischer et al, 2003).  
Agents that form holons can be either merged into o ne holonical agent or keep complete autonomy. If 
agents are merged into one agent, benefits of distr ibution are lost and complicated mechanisms for mer ging 
and splitting agents are needed. If agents keep ful l autonomy, coordination mechanisms are needed. Thu s 
both extremes have their drawbacks. Usually a model  between these extremes is chosen: one agent (calle d 
head or head agent) is given privilege to do resour ce and task allocation. The head of the holon can h ave 
partial or total control over other agents. Agents that are parts of the holon, but are not head agent s are called 
 body of the holon or body agents (Gerber et al, 199 9). Holons have an interface (head agent) and they can be 
developed separately like modules in traditional so ftware engineering. Holons also make it easier to 
implement changes in the system, because change of agent in one holon affects only agents from the sam e 
holon. 
The second well-known multi-agent architecture is multi-multi-agent system , which has been developed 
inside the Agent.Enterprise methodology (Nimis & St ockheim, 2004). This architecture is developed as a  
result of multi-agent system integration research. The main ideas of holonic multi-agent systems and m ulti-
multi-agent systems are similar. Both architectures  propose to create systems that consist of subsyste ms. 
Subsystems are called holons and multi-agent system s, respectively. 
Multi-multi-agent systems are created from separate  multi-agent systems. Interaction between multi-age nt 
systems is held by gateway agents. Gateway agents a ccomplish routing and message conversion tasks 
between different message formats used in different  multi-agent systems. Like head agent of the holon 
gateway agents are interfaces of their multi-agent systems. Although, it is only a mediator between ag ents of 
different multi-agent systems and it does not carry  out any other tasks, like coordination, task alloc ation, etc. 
Multi-multi-agent systems have weak interaction amo ng different multi-agent systems and intensive 
interaction inside the multi-agent systems. Multi-a gent systems accomplish weakly coupled tasks and in teract 
only to obtain results of other tasks. Multi-multi- agent systems offer to create one higher level (mul ti-multi-
agent system) and one lower level (all multi-agent systems). Holonic multi-agent systems allow creatin g of 
unlimited number of levels. 
Comparing holonic multi-agent systems and multi-mul ti-agent systems one may conclude that the basic 
ideas are similar, although there are the following  significant differences in context of ITS building : 
• The head of holon unlike the gateway agent can acco mplish not only mediator tasks, but also 
coordination, task allocation and any other tasks n eeded. It allows creating one main (head) agent of 
each ITS module and it is a mediator and a coordina tor at the same time. In multi-multi-agent systems 
two agents must be created, thus increasing the com plexity of the system and communication in the 
system. 
• Multi-agent systems in multi-multi-agent system are  weakly coupled. Contrary, modules in ITS are not 
weakly coupled, for example, all modules must ask s tudent module for student model data to accomplish 
their tasks. 
• Holonic multi-agent systems allow creating more tha n two levels of hierarchy, allowing to use 
hierarchical task decomposition. 
• Holons can be dynamically changed providing modific ation of system’s functionality to adapt it to 
different courses, learning materials and learners.  
Thus, holonic multi-agent systems are more appropri ate for ITS development than multi-multi-agent 
systems. Although, it does not mean that holonic mu lti-agent systems are effective or more effective t han 
simple multi-agent systems for ITS development. Hol onic multi-agent systems are more complex technolog y 
than traditional multi-agent systems. So, they are effective only for problems, where traditional mult i-agent 
systems have drawbacks. The authors of holonic mult i-agent system architecture provide criteria to 
determine, if a domain is holonic. The most importa nt criteria are the following (Gerber et al, 1999):  
• Operator abstraction. Holonic systems are well suit ed for domains with actions or tasks of different 
granularity. Higher level tasks are carried out by holon’s head and decomposed to subtasks, and assign ed 
to subholons. Tasks in ITS are of different granula rity. Firstly, ITS consists of modules. Each module  
has its own tasks. Secondly, each module has differ ent tasks and these tasks also consist of different  
types of subtasks. For example, one task of tutorin g module is problem generation and one problem 
generation subtask is test generation. 
• Hierarchical structure. Domain with hierarchical st ructure is well suited for holonic multi-agent syst ems. 
In that case subholon hierarchies can be created in  accordance with the domain hierarchy. ITS consists  of 
modules, modules consist of agents, which can consi st of subagents. 
• Decomposability. One of the main prerequisites to u se distributed systems like multi-agent systems is 
that tasks for the system must be decomposable. In some domains tasks are not fully decomposable. In 
partly decomposable domains tasks can not be fully decomposed and assigned to single agents. Holonic 
systems are suitable for such domains: decomposable  tasks can be decomposed and assigned to the body 
agents of the holon, not decomposable tasks can be accomplished by the head of the holon. As 
 previously mentioned ITSs are decomposable, althoug h there are tasks that are not decomposable, for 
example, student module must sustain full student m odule. 
• Social elements. System has to be cooperative to us e holonic approach or at least have cooperative 
elements in the domain. Holons do not enhance non-c ooperative interaction and thus it is not reasonabl e 
to use holons in non-cooperative domains. ITSs have  common goals – to teach the learner appropriately 
as possible. Thus, ITS has cooperative interactions . 
As described previously, ITS domain satisfies all c riteria for holonic multi-agent system application.  Next 
section describes the proposed holonic architecture  for ITS development.  
4.  OPEN AGENT-BASED INTELLIGENT TUTORING SYSTEM 
ARCHITECTURE  
In this section the developed open multi-agent arch itecture is described. The main goal of the archite cture is 
to eliminate mentioned drawbacks of traditional age nt-based ITS architectures. The proposed architectu re is 
holonic and hierarchical. The higher level holon co nsists of agents described in the previous section.  Each 
agent of the higher level is realized as a second l evel holon. Each agent of the second level in its t urn can be 
realized as a holon. Hence, ITS is developed as a h ierarchical holonic multi-agent system with unlimit ed 
depth of the hierarchy. 
In the developed architecture, ITS appears to the u ser as a single holon. This holon is called the hig her 
level holon and is represented by an interface agen t, which is a head of the holon. The interface agen t is the 
only agent interacting with the learner. Interface agent realizes all functions of communication modul e. Other 
modules are realized as subholons and are included in the body of the main holon. Each module can be 
realised as a single holon or multiple holons, i.e. , modules like tutoring and student modules which r ealize 
wide functionality are divided into several holons.  Student module is realised as student modelling ag ent and 
knowledge evaluation agent. Tutoring module is real ised as curriculum, teaching strategy, problem 
generation and feedback generation agents. Expert m odule is realised as a single expert agent. Thus, t he 
higher level holon consists of 7 agents. These agen ts have the same functionality as the previously de scribed 
traditional agents, except three student model agen ts are merged into one – student modelling agent. 
Interaction among higher level subholons is held us ing single messages. No protocols are specified, 
because only three basic types of messages are used : (1) service request – a holon requests another ho lon to 
accomplish a task; (2) result of the service – answ er to the first type of message, containing result of the task; 
(3) inform message – agent that has acquired new kn owledge or made changes in the existing knowledge 
informs agents that are interested in such knowledg e. To characterize interaction among higher level 
subholons acquaintance diagram (proposed by authors  of Gaia methodology (Wooldridge et al, 2000) to 
specify the lines of communication among different agents) is used (Figure 1). Detailed interaction is  beyond 
the scope of the paper due to space limitations. 
Interface agent 
Curriculum 
agent Teaching 
strategy agent Problem 
generation agent 
Student 
modelling agent Knowledge 
evaluation agent Expert agent Feedback 
generation agent Tutoring module 
Student module 
 
Figure 1. Acquaintance diagram of the higher level holon  
Each agent of the higher level is realised as a hol on consisting of a single head agent and unlimited 
number of subholons. A set of predefined tasks is a ssigned to each higher level subholon. The head of each 
holon is responsible for communication outside the holon and for accomplishing holons tasks. Some task s are 
physically accomplished by the head, for other task s the head cooperates with the body of the holon.  
 The head of the holon coordinates all agents in the  holon. Coordination is done by centralised plannin g 
and task allocation. To distribute tasks among subh olons the head has to discover other agents in the holon 
and their capabilities. One or multiple global dire ctory facilitator agents are used for that purpose.  Subholons 
have partial autonomy – they are not merged, but th e head of the holon has total control over all othe r agents.  
Additionally to the coordination the head of the ho lon accomplishes tasks that need one commonly known  
performer, for example, the head of students module  maintains full student model and sends it to any o ther 
agent that requests it.  
Each agent from the body of the holon is capable to  perform certain tasks which are subtasks of the ta sks 
assigned to the holon. The capabilities of body age nts can be either: 
• Principally different. For example, student modelli ng holon consists of interaction registering agent,  
cognitive diagnosis agent and psychological agent.  
• Types of the same capability. For example, each pro blem generation agent can generate the most 
appropriate problem of one category (test, question , different problem solving tasks). This mechanism is 
the most important to make agents reusable. 
Each agent of the body has to register its services  with directory facilitator on start-up. Each body agent 
can be realized as a holon of the next level. Thus,  it is possible to build a hierarchy of holons with  unlimited 
number of levels. The proposed architecture is open . Two types of holons are distinguished: 
• Closed holons. Closed holons contain only a set of concrete agents. Agents can not be added to the 
closed holons. Agents in the closed holons have pri ncipally different capabilities. Heads of closed ho lons 
have complete knowledge about capabilities of all b ody agents. Thus, centralised planning and task 
allocation is used in closed holons. Feedback and s tudent modelling agent holons are closed holons. 
• Open holons. Open holons consist of a head and body  agents of a certain type. Agents in the open holon  
have capabilities of the same type. The number of c oncrete agents and their capabilities can change 
during the runtime of the system. Body agents of th e open holons are capable to do certain types of th e 
tasks assigned to the superholon. This mechanism gi ves an opportunity easily to change functionality o f 
the system by adding and removing agents from the s ystem. For example, task generation holon consists 
of test generation agent and fill-in-blanks task ge neration agent. Geometry theorem proving tasks can be 
introduced just by adding a specific agent. Curricu lum, tutoring strategy, problem generation, knowled ge 
evaluation and expert agent holons are open holons.  
Heads of open holons have no initial knowledge abou t subholons of the holon and their capabilities. Th us 
the following algorithm is used to coordinate agent s in the holon. When the head agent receives a requ est to 
complete a task, it uses the directory facilitator agent to determine all subholons and their capabili ties. 
Appropriate subholons are chosen and messages with request to perform the task are sent to the subholo ns. 
Subholons have to perform their tasks and send resu lts to the head of the holon. If more than one resu lt is 
provided, the head of the holon chooses the best on e as the final outcome (Figure 2). For example, mai n 
 
Figure 2. Algorithm used by heads of open lower lev el holons Figure 3. Algorithm used by the main inte rface agent 
 problem generation agent receives a request to gene rate a problem for the specific learner in the spec ific 
field. It uses a directory facilitator and finds a test generation agent, a fill-in-blanks problem gen eration agent 
and a question generation agent. All three agents a re used to get three possible problems which are th e best 
ones of each type. And finally, the most suitable o ne of all proposed problems is chosen to give to th e 
learner. 
Traditional holons consist of a single head agent a nd multiple body agents. This approach does not all ow 
creating completely open systems because all system s functionality must be delivered to its user. It i s done by 
the interface agent (the head of the holon). If the  interface agent is realized as a single agent, it has to be 
changed every time system’s functionality is change d. Thus holonic multi-agent architecture is extende d by 
realizing the head of the higher level holon (inter face agent) as an open holon. Interface agent holon  consists 
of the main interface agent (head of the second lev el holon) and interface agents. The main interface agent is 
capable to perform most common interaction with the  learner. Other interface agents are capable to per form 
specific tasks and can be added in case of extendin g system’s functionality. 
When an interface agent has to interact with the le arner it acts according to the following algorithm.  At 
first it checks its own capabilities – is it capabl e to perform interaction by itself or not. If yes, then interaction 
is performed. Otherwise the yellow pages agent is u sed to find an agent capable to perform needed 
interaction and request message to the appropriate agent is sent (Figure 3). For example, the main int erface 
agent is capable to show only textual learning mate rials. In case it needs to show some multimedia lea rning 
material, it has to find appropriate agent which is  capable to show video to the learner. 
Figure 4 shows higher levels of the proposed archit ecture. The hierarchy of the first level head is de tailed 
along horizontal axis, other agents are detailed al ong vertical axis. Rounded rectangles with question  marks 
which are added to open holons have meaning that an y number of agents can be added to that holon. 
Interaction in the lower level holons is realised i n the same way as in the higher level – mainly sing le 
messages are used. Interaction in closed holons is realised in exactly the same way as in the higher l evel 
holon. Interaction in open holons can be organized in the same way, but also any other types of intera ctions 
can be used if necessary. For example, agents can u se argumented negotiations to find the most appropr iate 
problem for the learner. 
 
Figure 4. Higher levels of the proposed architectur e 
 Proposed architecture is a high level architecture’ s framework which can be customized to different ne eds 
for the development of various ITSs. It is proposed  that all first level agents are realized as holons , although 
each of these agents can be realized as monolith ag ent if there is no need to create a holon. All agen ts can 
also be realized as holons if it is necessary for a ny specific functionality of the system. Thus, the developed 
architectural framework can be simplified and detai led to fit the needs of specific project. 
5.  CONCLUSION 
An open hierarchical holonic multi-agent architectu re for ITS development is developed to deal with 
significant drawbacks in agent-based ITS developmen t. The main advantages of the developed architectur e 
are the following. Firstly, the architecture gives an opportunity easily to implement changes into the  system. 
Specific agents can be added to or removed from the  system to change the functionality. Each agent can  be 
replaced with a holon and vice versa to extend syst em’s functionality in some areas and to simplify th e 
system in another areas. Any changes made in the sy stem have less impact on the whole system, because 
agents interact only within the specific holon not with all agents in the system. Agents that are buil t for 
specific small tasks can be easily reused in develo pment of other ITSs. Secondly, development of struc tured 
system consisting of small agents is simpler. 
The proposed architecture is used in ITS developmen t. The system under development will be used for 
teaching artificial intelligence course to first ye ar graduate students. Though, the development of th e system 
is in the early phase and evaluation of the effecti veness of the proposed architecture is not possible  yet. After 
finishing the development of the first system it wi ll be possible to evaluate complexity of the change  
implementation into the system to adapt it to the n eeds of other courses, too. 
Currently we also work on a methodology for holonic  multi-agent system based ITS development. The 
methodology is intended to support full lifecycle o f holonic ITS development. It will use a set of dia grams 
for design phase and transformations from diagrams to code for implementation phase. A tool for ITS 
development based on the methodology and proposed a rchitecture is also under construction. 
ACKNOWLEDGEMENT 
This work has been partly supported by the European  Social Fund within the National Programme 
„Support for the carrying out doctoral study progra mm’s and post-doctoral researches” project „Support  for 
the development of doctoral studies at Riga Technic al University. 
REFERENCES 
de Antonio, A. et al, 2003. An Agent-Based Architect ure for the Development of Intelligent Virtual Trai ning 
Environments. Proceedings of the Second International Conference o n Multimedia and Information and 
Communication Technologies in Education (m-ICTE 2003) , Badajoz, Spain, pp.1944-1949. 
Capuano, N. et al, 2000. A Multi-Agent Architecture for Intelligent Tutoring. Proceedings of the International 
Conference on Advances in Infrastructure for Electro nic Business, Science, and Education on the Interne t (SSGRR 
2000) , Rome, Italy. 
Devedzic, V. et al, 2000. Teaching Formal Languages  by an Intelligent Tutoring System. Educational Technology & 
Society , Vol. 3, No. 2, pp. 36-49. 
Dorça, F.A. et al, 2003. A multiagent architecture for distance education systems. Proceedings of the 3rd IEEE 
International Conference on Advanced Learning Techn ologies (ICALT’03) , Athens, Greece, pp. 368-369. 
Fischer K. et al, 2003. Holonic Multiagent Systems:  A Foundation for the Organisation of Multiagent Sy stems, Lecture 
Notes in Computer Science 2744, Springer, 2003, pp.  71-80. 
Frasson, C. et al, 1996. An Actor-based Architectur e for Intelligent Tutoring Systems. Proceedings of the Third 
International Conference, ITS '96 , Montréal, Canada, pp.57-65. 
 Gascueña, J.M. and Fernández-Caballero, A., 2005. An  Agent-based Intelligent Tutoring System for Enhanc ing E-
learning/ E-teaching. International Journal of Instructional Technology a nd Distance Learning , Vol. 2, No.11, pp. 
11-24. 
Gerber, C.et al, 1999. Holonic multi-agent systems , Technical Report R-99-03, DFKI GmbH. 
Georgouli, K., Paraskakis, I., Guerreiro, P., 2003.  A Web Based Tutoring System for Compilers. CD Proceedings of the 
14th EAEEIE Annual Conference on Innovation in Educa tion for Electrical and Information Engineering (EI E) , 
Gdansk, Poland. 
Grundspenkis, J. and Anohina, 2005. A. Agents in In telligent Tutoring Systems: State of the Art. Scientific Proceedings 
of Riga Technical University „Computer Science. App lied Computer Systems”, 5th series, Vol.22 , Riga, pp.110-121  
Hospers, M. et al, 2003. An Agent-based Intelligent  Tutoring System for Nurse Education. Applications of Intelligent 
Agents in Health Care (eds. J. Nealon, A. Moreno) . Birkhauser Publishing Ltd, Basel, Switzerland, pp. 141-157. 
Koestler, A., 1967. The Ghost in the Machine . Hutchinson & Co, London, Great Britain. 
Nimis, J. and Stockheim, T., 2004. The Agent.Enterp rise Multi-Multi-agent System. Coordination and Agent Technology 
in Value Networks. Proceedings of the Conference on Ag ent Technology in Business Applications (ATeBA 2004 ), part 
of the Multi-Conference on Business Information Sys tems (MKWI 2004) , Essen, Germany, pp. 31-43. 
Novac Ududec, C. and Birla, R., 2007. A Multi-Agent I ntelligent Platform for Student Tutoring. Engineering Education 
in the eWorld , 2007. 
Postal A. et al, 2004. MathTutor: A Multi-agent Int elligent Tutoring Systems. Proceedings of the First IFIP Conference 
on Artificial Intelligence Applications and Innovat ions (AIAI 2004) , Toulouse, France. - Vol.1. - pp. 231-242. 
Silveira, R.A. and Vicari, R.M., 2002. Developing Dis tributed Intelligent Learning Environment with JADE  – Java 
Agents for Distance Education Framework. S.A. Cerri, G. Gouardères, and F. Paraguaçu (Eds.): ITS 2002, LNCS 
2363 , pp. 105–118. 
Smith, A.S.G., 1998. Intelligent Tutoring Systems: personal notes. - School of Computing Science at Mid dlesex 
University. - 1998. - http://www.cs.mdx.ac.uk/staff pages/serengul/table.of.contents.htm (last visited 18.04.05). 
Triantis, T. and Pintelas, P., 2004. An Integrated Environment for Building Distributed Multi-agent Edu cational 
Applications. C. Bussler and D. Fensel (Eds.): AIMSA 2004 , LNAI 3192, pp. 351–360. 
Webber, C. and Pesty, S., 2002. A two-level multi-ag ent architecture for a distance learning environmen t. Proceedings of 
ITS 2002/Workshop on Architectures and Methodologie s for Building Agent-based Learning Environments , E.de 
Barros Costa, pp.26-38. 
Wooldridge M. et al., 2000. The Gaia methodology fo r agent-oriented analysis and design. Journal of Autonomous 
Agents and Multi-Agent Systems,  Vol 3., No 3, pp. 285-312. 
View publication statsView publication stats
