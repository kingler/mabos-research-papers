Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Teaching material for the book Model-Driven Software Engineering in Practice by Marco Brambilla, Jordi Cabot, Manuel Wimmer. Morgan & Claypool, USA, 2012. www.mdse-book.com 
MODEL DRIVEN ARCHITECTURE (MDA) Chapter #4 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Contents § MDA § UML (from a metamodeling perspective) 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Model Driven Architecture • The Object Management Group (OMG) has defined its own comprehensive proposal for applying MDE practices to system’s development:  MDA (Model-Driven Architecture) 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Four principles of MDA • Models must be expressed in a well-defined notation, so as to enable effective communication and understanding • Systems specifications must be organized around a set of models and associated transformations • implementing mappings and relations between the models.  • multi-layered and multi-perspective architectural framework. • Models must be compliant with metamodels • Increase acceptance, broad adoption and tool competition  for MDE 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Definitions according to MDA • System: The subject of any MDA specification (program, computer system, federation of systems) • Problem Space (or Domain): The context or environment of the system • Solution Space: The spectrum of possible solutions that satisfy the reqs. • Model: Any representation of the system and/or its environment • Architecture: The specification of the parts and connectors of the system and the rules for the interactions of the parts using the connectors • Platform: Set of subsystems and technologies that provide a coherent set of functionalities for a specified goal • Viewpoint: A description of a system that focuses on one or more particular concerns • View: A model of a system seen under a specific viewpoint • Transformation: The conversion of a model into another model 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Modeling Levels CIM, PIM, PSM § Computation independent (CIM): describe requirements and needs at a very abstract level, without any reference to implementation aspects (e.g., description of user requirements or business objectives); § Platform independent (PIM): define the behavior of the systems in terms of stored data and performed algorithms, without any technical or technological details; § Platform-specific (PSM): define all the technological aspects in detail. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
CIM, PIM and PSM 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
CIM MDA Computation Independent Model (CIM) § E.g., business process 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
PIM  MDA Platform Independent Model (PIM) § Specification of   structure and behaviour of a  system, abstracted from technologicical details § Using the UML(optional)  § Abstraction of structur and behaviour of a system with the PIM simplifies the following: § Validation for correctness of the model § Create implementations on different platforms § Tool support during implementation 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
PSM MDA Platform Specific Model (PSM) 
§ Specifies how the functionality described in the PIM is realized on a certain platform § Using a UML-Profile for the selected platform, e.g., EJB 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
CIM – PIM – PSM mappings 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Modeling language specification • MDA’s core is UML, a standard general-purpose software modeling language   Two options for specifying your languages: • (Domain-specific) UML Extensions can be defined through UML Profiles • Full-fledged domain-specific languages (DSMLs) can be defined by MOF 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
ADM  ADM (Architecture-Driven Modernization) is addressing the problem of system reverse engineering  It includes several standards that help on this matter • The Knowledge Discovery Metamodel (KDM): An intermediate representation for existing software systems that defines common metadata required for deep semantic integration of lifecycle management tools. Based on MOF and XMI • The Software Measurement Metamodel (SMM): A meta-model for representing measurement information related to software, its operation, and its design.  • The Abstract Syntax Tree Metamodel (ASTM): A complementary modeling specification with respect to KDM,  ASTM supports a direct mapping of all code-level software language statements into low-level software models.  
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
MDA vs. ADM – the MDRE process  

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
www.mdse-book.com 
MOF –  META OBJECT FACILITY 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
www.mdse-book.com 
UML –  UNIFIED MODELING LANGUAGE 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Datatypes • UML distinguishes between the following data types: • Simple data types (DataType): a type with values that have no identity; that means two instances of a datatype with the same attributes values are indistinguishable. • Primitive data types (PrimitiveType): a simple data type without structures. UML defines the following primitive data types: • Integer: (Infinite) set of integers: (...,-1,0,1,...) • Boolean: true, false. • UnlimitedNatural (Infinite) set of natural numbers plus infinite (*). • Enumeration types – simple data types with values that originate from a limited set of enumeration literals. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Examples of data types 
Data type keywords 
Attributes Enumeration literals 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The metamodel of data types 
PropertyDa taT ype0..1*+datatype0..1{subsets namespace,subsets  featuring Cla s sifier,sub sets class i fie r}+ownedAttribute*{ordered,su b se ts a ttri b u te ,su b se ts o wn e dM e mb e r}Operation0..1*+datatype0..1{su bse ts n am esp ace ,subsets redefinitionContext,su b se ts fe a tu ri n g Cl a ssi fi e r}+ownedOperation*{ordered,su b se ts fe a tu re ,subsets  own edM embe r}
PrimitiveTypeEnumerationEnumerationLiteral0..1*+enumeration0..1{subsets nam esp ace}+ownedLiteral*{ordered,sub set s ow n e dM em b e r}InstanceSpecificationClas si fier
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Overview of Diagrams • There is no official UML diagram overview or diagram grouping. • Although UML models and the repository underlying all diagrams are defined in UML, the definition of diagrams (i.e. special views of the repository) are relatively free. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Overview of Diagrams • In UML a diagram is actually more than a collection of notational elements. • For example, the package diagram describes the package symbol, the merge relationship, and so on. • A class diagram describes a class, the association, and so on. • Nevertheless, we can actually represent classes and packages together in one diagram. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Overview of the UML diagrams 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Class vs. instance 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Basic notation for diagrams Diagram area Diagram header [<Diagram type>]<Name>[<Parameter>] 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Example of a use case diagram Use case  Booking use cases Branch employeeBook vehicle
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Stereotypes-definition • Stereotypes are formal extensions of existing model elements within the UML metamodel, that is, metamodel extensions. • The modeling element is directly influenced by the semantics defined by the extension. • Rather than introducing a new model element to the metamodel, stereotypes add semantics to an existing model element. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Multiple stereotyping • Several stereotypes can be used to classify one single modeling element. • Even the visual representation of an element can be influenced by allocating stereotypes. • Moreover, stereotypes can be added to attributes, operations and relationships. • Further, stereotypes can have attributes to store additional information. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Stereotypes Notation • A stereotype is placed before or above the element name and enclosed in guillemets (<<,>>). • Important: not every ocurrence of this notation means that you are looking at a stereotype. Keywords predefined in UML are also enclosed in guillemets. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Graphical symbols 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
UML standard stereotypes Stereotype UML element Description <<call>> Dependency(usage) Call dependency between operation or classes <<create>> Dependency(usage) The source element creates instances of the target element <<instantiate>> Dependency(usage) The source element creates instances of the target element Note: This description is identical to the one of <<create>> <<responsability>> Dependency(usage) The source element is responsible for the target element <<send>> Dependency (usage) The source element is an operation and the target element is a signal sent by that operation <<derive>> Abstraction The source element can, for instance, be derived from the target element by a calculation <<refine>> Abstraction A refinement relationship (e.g. Between a desing element and a pertaining analysis element) <<trace>> Abstraction Serves to trace of requirements 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
UML standard stereotypes Stereotype UML element Description <<script>> Artifact A script file (can be executed on a computer) <<auxiliary>> Class Classes that support other classes (<<focus>>) <<focus>> Class Classes contain the primary logic. See <<auxiliary>> <<implementationClass>> Class An implementation class specially designed for a programming language, where an object may belong to one class only <<metaclass>> Class A class with instances that are, in turn, classes <<type>> Class Types define a set of operations and attributes, and they are generally abstract <<utility>> Class Utility class are collections of global variables and functions, which are grouped into a class, where they are defined as class attributes/operations <<buildComponent>> Component An organizational motivated component 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
UML standard stereotypes Stereotype UML element Description <<implement>> Component A component that contains only implementation, not specification <<framework>> Package  A package that contains Framework elements <<modelLibrary>> Package A package that contains model elements, which are reused in other packages <<create>> Behavioral feature A property that creates instances of the class to which it belongs (e.g. Constructor) <<destroy>> Behavioral feature A property that destroys instances of the class to which it belongs (e.g. Destructor) 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Class Diagrams • Class Diagrams refer to this area of the metamodel: • Package: Classes::Kernel • Package: Classes::Dependencies • Package: Classes::Interfaces 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Class Diagrams: basic concepts • The basis of UML is described in the Kernel package of the metamodel. • Most class models have the superclass Element and has the ability to own other elements, shown by a composition relationship in the metamodel. • That’s the only ability an element has. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The basic UML class Elem ent+/owner+/ownedElement{union}*{u n io n }0..1*0..1There is no notation for an element because you would never user the element construct in UML models. The class is abstract. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Relationship • A relationship is an abstract concept to put elements in relation to one another. • Similar to Element, there is no other property or semantics. The properties and the semantics are added later by abstract or concrete subclasses. • There is no notation for Relationship either. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The basic Relationship class 
RelationshipElem ent1..*+/relatedElement{union}1..*+/own er+/ownedElement{union}*{u n io n }0..1*0..1
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Supplier and client • The Relationship concept is specialized by the concept of a direct relationship. • The set of related elements is divided into a set of source and a set of target elements. • In may relationships, one element offers something and another element wants something. • The former is called a supplier and the later is a client. This is expressed in one direction. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Directed relationships 
DirectedRelationshipElem ent1..*+/source{u n io n ,su b se ts re l a te d El e m e n t}1..*1..*+/target{union,su b se ts re l a te d El e m e n t}1..*+/owner+/ownedElement{union}*{union}0..1*0..1Note that we are dealing only with abstract and rather simple concepts.  
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Coments and notes • Comments and notes are terms often used synonymously. • A comment can be annotated to any UML model element. In the metamodel, you can see that the Comment class is directly associated with the Element base class. • Comment is a concrete class. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The notation for comments 
ClassComment text
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The basic metamodel concepts Elem ent*0..1+/ownedElement*{union}+/owner0..1{union}Comment0..1*+owningElement0..1{subsets owner}+ownedCom ment*{subsets ownedElement}
DirectedRelationshipCommentbody : StringRelationshipElem ent
1..*+/target1..*{union,sub set s re l a te d El e m e n t}1..*+/source1..*{union,su b se ts re l a te d El e m e n t}*+annotatedElement*1..*+/relatedElement1..*{u n io n }
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Namespaces • Def.-A named element is an element that can have a name and a defined visibility (public, private, protected, package): • +=public • -=private • #=protected • ~=package • The name of the element and its visibility are optional. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The metamodel for NamedElement 
Nam edElem entname : Stringv isibility  : Visibility Kind/ qualif iedName : String[0..1][0..1][0..1]Vis ibility Kindpublicpriv ateprotectedpackage< <enumeration>>Elem ent
DirectedRelationship[0..1]DirectedRelationshipPackageableElem entNam edElem ent
ElementImportv isibility  : Visibility Kindalias : String1+importedElement1{subsets target}Pac kageableElem entvis ibility  : Vis ibility Kind...Nam espace0..1*+/namespace0..1{union,subsets owner}+/ownedMember*{union,subsets member,subsets ownedElement}*+ /m ember*{union}
1*+importingNamespace1{subsets source,subsets owner}+elementImport*{subsets ownedElement}*+/importedMember*{subsets member}
PackageImportv isibility  : Visibility Kind1*+importingNamespace1{subsets source,subs ets owner}+packageImport*{subsets ownedElement}Pac kage1+importedPackage1{subsets target}[0..1]We are focusing in this section of the metamodel 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Namespace • A namespace is a named element that can contain named elements. • Within a namespace, named elements are uniquely identified by their names. • In addition, they have a qualified name, resulting from nested namespaces. • The qualified name of a named element can be derived from the nesting of the enclosing namespaces. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
CustomersNested namespaces Corporate customersInsuranceQualified name  Customers::CorporateCustomers:Insurance 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Packageable element • A packageable element is a named element that can belong directly to a package. • Example: an operation cannot belong to a package, bua a class may. • The visibility statement is mandatory for a packageable element. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
ElementImport • The act of importing an element is called ElementImport and is a relationship between a namespace and a packageable element that resides in another namespace. • The referenced element can then be addressed directly by its (unqualified) name. In addition, an optional alias name can be specified. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
PackageImport • The act of importing a package is called PackageImport; it is semantically equivalent to the import of a single element from that package. • We cannot specify an alias name here. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The metamodel for NamedElement 
Nam edElem entname : Stringv isibility  : Visibility Kind/ qualif iedName : String[0..1][0..1][0..1]Vis ibility Kindpublicpriv ateprotectedpackage< <enumeration>>Elem ent
DirectedRelationship[0..1]DirectedRelationshipPackageableElem entNam edElem ent
ElementImportv isibility  : Visibility Kindalias : String1+importedElement1{subsets target}Pac kageableElem entvis ibility  : Vis ibility Kind...Nam espace0..1*+/namespace0..1{union,subsets owner}+/ownedMember*{union,subsets member,subsets ownedElement}*+ /m ember*{union}
1*+importingNamespace1{subsets source,subsets owner}+elementImport*{subsets ownedElement}*+/importedMember*{subsets member}
PackageImportv isibility  : Visibility Kind1*+importingNamespace1{subsets source,subs ets owner}+packageImport*{subsets ownedElement}Pac kage1+importedPackage1{subsets target}[0..1]We are focusing in this section of the metamodel 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Example of element and  package import relationships 
<<import>> <<import>> <<access>> <<access>> 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
<<access>> and <<import>> • <<import>>: The visibility is public; for example, the postal address for Order. The public import is a transitive relationship: if A imports B and B imports C, then A is indirectly importing C too. • <<access>>: The visibility is private, not public: Customer is visible in Order but not in Billing. The private import is not transitive. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Typed elements • A typed element is a named element that can have a type. • Ex.- Attributes and parameteres. • A type specifies a set of values for a typed element. • Ex.- Symple data types and classes are types. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Example – typed element & type 
Typed element Type 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Typed elements metamodel 
Type and typed element are abstract classes. They have no properties NamedElementTypeTypedElement0.. 1+type0.. 1PackageableElement
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Multiplicities • A multiplicity element is the definition of an interval of positive integers to specify allowable cardinalities. • A cardinality is a concrete number of elements in a set. • A multiplicity element is often simply called multiplicity; the two terms are synonymous. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Example Multipicity & Cardinality CustomerBookings**+bookingsClass model 
:Kunde r2:Bookings r2:Bookings r2:Bookings Object model Multiplicity=0..* 
Cardinality=3 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Multiplicities • The notation for multiplicity is either a single number or a value range. • A value range is written by stating the minimum and maximum values, separated by two dots (e.g. 1..5). • In addtion, you can use the wildcard character * to specify an arbitrary number of elements. 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Examples of multiplicities • 0..1 • 1  (shortcut for 1..1) • * (shortcut for 0..*) • 1..* • 5..3 (Invalid!) • -1..0 (Invalid! All values must be positive) • 3+5..7+1 (Generally meaningles, but valid; the lower or upper value, respectively is defined by a value specification). 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The multiplicity metamodel ElementValueSpecificationMultiplicityElementisOrdered : Boolean = falseisUnique : Boolean = true/ upper : UnlimitedNatural/ lower : Integer0..10..1+upperValue0..1{subsets ownedElement}+owningUpper0..1{subs ets owner}0..10..1+lowerValue0..1{subsets ownedElement}+owningLower0..1{subsets owner}[0 ..1][0..1]
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Checklist: multiplicities 1. What value range is described by a multiplicity? 2. What is the difference between multiplicity and cardinality? 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Value specification • Def.- A value specification indicates one or several values in a model. • Semantics.- Examples for value specifications include simple, mathematical expressions, such as 4+2, and expressions with values from the object model, Integer::MAX_INT-1 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Value specification-semantics • In addition, there are language-dependent expressions defined by a language statement and the pertaining expression in that language (opaque expression), such OCL or Java expression (the language statement can be omitted if the language is implicity defined by the expression or context). 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The metamodel and the composite pattern • The metamodel is based on the composite pattern: 
LeafCompositeComponent*
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Example :Expression symbol=“+” op1:LiteralInteger value=1 
op2:LiteralInteger value=1 operand 
operand Object Model for 1+1 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
The metamodel for value specifications 
OpaqueExpressionbody  [1..* ] : String {ordered}language [0..*]  : String {ordered}LiteralSpecification
LiteralBooleanv alue : BooleanLiteralIntegerv alue : IntegerLiteralStringv alue : StringLiteralUnlimitedNaturalv alue : U nlimit edNat uralLiteralNullInstanceValueInstanceSpecif ication1+instance1ValueSpecification
Expres sionsy m bol : String*
0..1+operand*{ordered, subsets ownedElement}+expression0..1{subsets owner}TypedElem entPackageableElem ent
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
www.mdse-book.com 
UML EXAMPLES 
Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Class diagram 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Component Diagram 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Activity diagram 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
State Diagram 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Sequence vs. Collaboration 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
UML Extensibility: profiles 

Marco Brambilla, Jordi Cabot, Manuel Wimmer.  Model-Driven Software Engineering In Practice. Morgan & Claypool 2012. 
Teaching material for the book Model-Driven Software Engineering in Practice by Marco Brambilla, Jordi Cabot, Manuel Wimmer. Morgan & Claypool, USA, 2012. www.mdse-book.com 
MODEL-DRIVEN SOFTWARE ENGINEERING IN PRACTICE Marco Brambilla, Jordi Cabot, Manuel Wimmer. Morgan & Claypool, USA, 2012.  www.mdse-book.com www.morganclaypool.com  or buy it at: www.amazon.com 
