Model-
Driven 
Development of 
Software Front Ends
  
with input  from 
Marco 
Brambilla
Politecnico di Milano and 
WebRatio
  
        
@
marcobrambi
Interaction 
Flow 
Modeling
Language
  
Arne J. Berre, SINTEF  (arneb@ifi.uio.no)
The modeling approach

What is a model?
Models
Mapping
 Feature
A model is based on
 an original (=system)
Reduction Feature
A model
 only reflects a (relevant) selection 
of the original
‘
s properties
Pragmatic
 Feature
A model needs to
 be usable in place of an 
original with respect to some purpose
Model
represents
System
Purposes:
 
•
descriptive purposes
•
p
rescriptive purposes
The UI Modeling Problem

User interface and interaction development 
is a painful phase of software process
…
 for everybody
!
UI Modeling Problem
Costly
 and 
Inefficient
 
process
Complexity
 of 
u
ser interfaces (UIs)
Ineffective
tools
Manual
development
No MDE 
technology
The UI Design Problem 
No model 
driven 
engineering
Platform independent 
description of UIs
Focused on user 
interactions
No 
definition
 of 
graphics
 
and 
styles
Reference external models
The UI Design solution: IFML
•
User interaction has been overlooked in software engineering standards
•
Hence
 
the 
Interaction Flow Modeling 
Language (IFML)
•
In less than 2 years 
(
a record in OMG!), we obtained approval of the IFML 
standard  
Standardization gap

The Interaction Flow
Modeling Language

IFML Objectives 
Binding to 
Persistence Layer
Navigation Path
Binding to 
Business 
Logic
Content
Event

IFML Objectives: 
Content
Content
IFML Objectives: Navigation 
Path

IFML Objectives: Navigation 
Path

IFML Objectives: 
Events
Mouse Over
IFML Objectives: 
Events

IFML Objectives: Binding to business 
logic

IFML Objectives: Binding to business 
logic

IFML Objectives: Binding to 
persistence
Content
Book
Title: string
Cover: file
List Price: currency
Price: currency
Save: currency
Rating: integer
………
IFML Overview

IFML Essentials

•
Multiple views 
for the same application
•
Mobile and multi-device
 applications
•
Visualization and input of data, and production of 
events
•
Components 
independent of
 
concrete widgets and presentation 
•
Interaction flow
, initiated by the user or by external events
•
User context
: 
the user status in the current instant of the interaction (position, 
history, machine, platform,
…
)
•
Modularization
 of the model (design-time containers for 
reuse
 
purpose
)
•
User input 
validation
, according to OCL or other existing constraint 
languages
Covered aspects
IFML by example
Basic navigation flow between 
ViewComponents
IFML 
by 
example
IFML by example
Nesting of 
ViewContainers
Tagged  
ViewContainers
 (XOR, L, D, Modal, Modeless)
IFML by example
Actions
ViewComponentParts
:
•
Data 
binding
•
Parameters
Types
 of 
ViewComponents
 
(<<List>>)
IFML 
–
 adding details to 
ViewComponents

•
Joint use of IFML and 
other
 
modeling
 
languages
:
•
DataBinding
 to 
classes
 and 
attributes
 of UML Class 
Diagrams
•
Upcoming
: 
also
 with 
other
 
content
 
models
, 
such
 
as
: 
Entity-
Relationship
, 
Ontologies
, 
…
Data binding
•
Joint use of IFML and 
other
 
modeling
 
languages
•
Connection of 
Actions
 to back-end business 
logic
 
as
 
•
UML 
methods
 of 
classes
•
whole
 UML 
dynamic
 
diagrams
 
–
activity
 
diagram
, 
sequence
 
diagram
, state chart 
diagram
, 
…
Dynamic 
Behaviour
Selection
 
event
Submit
 
event
.. And as many others as you want!
IFML 
–
 subtyping components and events

IFML by example
ActivationExpression
, 
SubmitEvent
, Event generation

IFML concrete syntax by example
intra-component events and flows
IFML example 
–
 online payment

Multiple aspects modeling 
–
 1 
(business and requirements)
UML Use Case
BPMN process
UML Sequence
IFML
UML 
Statechart
Handle Rental
    Sales Clerk  
Handle Renter
<<
Include
>> 
<<
Extend
>> 
Handover Car
<<UML Actor>> 
    Sales Clerk  
<<UML 
Model
>> 
     IT 
system
n
ew 
rental
c
hange
 
days
a
ccept
 
payment
Integration with UML Use Cases
Each
 use case can be 
described
 by
•
A business process
•
A plain UI description in IFML
•
Some UML dynamic diagrams (e.g., activity, sequence, 
…
)
Handle Rental
    Sales Clerk  
Handle Renter
<<
Include
>> 
<<
Extend
>> 
Handover Car
Integration with BPMN
The UI of 
each
 
activity
 
can be 
described
 by
•
An IFML module
•
Some UML dynamic 
diagrams (e.g., activity, 
sequence, 
…
)

IFML concrete syntax by example
IFML Modules - definition

Example of UML  - IFML mapping
IFML Model
<< Use Case>> 
 
     
Handle
 
Rental
xUML
 
Use Case 
Diagram
<<
xUML
 Actor>> 
    Sales Clerk  
<< Use Case>>
 
     
Handle
 
Renter
<<
Include
>> 
<<
Extend
>> 
<< Use Case>>
 
     
Handover
 Car
<<UML Actor>> 
    Sales Clerk  
Handle
 
Rental
 
xUML
 Sequence Diagrams
<<UML 
Model
>> 
     IT 
system
n
ew 
rental
c
hange
 dates
a
ccept
 
payment
IFML 
models
 can be
 
reworked
 or 
refined
 
after
 
being
 
generated
Multiple aspects modeling 
–
 2 
(implementation and architecture)
UML Sequence
UML Deployment
IFML
 
 
 
UI Mockup models
Description of deployment architecture
•
UI 
is just one facet of system design
•
Often need to position it in a broader architectural vision
•
UML deployment diagram
Integration with UML

UML 
Sequence 
Diagrams
Tiers and 
calls
Explicit 
description of 
interactions 
between tiers
•
Manual specification of BPMN process model 
•
Automatic transformation of BPMN to WebML
•
Possible manual refinement of WebML models
•
Automatic running code generation on J2EE platform
•
Virtuous development cycle
Model-driven Development Process

The generated model artifacts

Goal 
taxonomy
Interleaving
 with 
enterprise
 
values
Needs
 
addressed
 by social networks

Socialization goals can be used as drivers for the selection of 
the social BPM design patterns that are more relevant to a 
process socialization effort
Design patterns and goals
Weak Ties / 
Tacit 
Knowledge
Transparency 
Participation
Activity 
distribution 
Decision 
distribution 
Social 
f.back
Knowledge 
sharing 
Dynamic
 
enrollment
X
Poll 
X
X
People / 
Skill
 
search
X
X
X
Social 
content
 
publication
X
X
Social 
sourcing
 
X
Progress 
notification
X
Ranking and 
commenting
X
X
X
X
IFML is defined through a 
metamodel
How does it work? IFML 
metamodel
 (1)
…
IFML 
metamodel
 (2): Content 
B
inding
…
•
Data binding to Classes and Attributes 
•
Dynamic Behavior to Methods and 
Diagrams
•
An official 
metamodel
 of the language 
which describes the semantics of and 
relations between the modeling constructs
•
A 
graphical concrete syntax for the interaction flow notation 
which provides an 
intuitive representation of the user interface composition, interaction and control 
logic for the front-end designer
•
A 
UML Profile 
consistent to the 
metamodel
•
An 
interchange format 
between tools using XMI
•
All
 
this
, 
specified
 
through
 standard 
notations
 
themselves
Practical results of having a standard
Static aspects
Also: interchange with profile-based diagrams. 
The UML Profile  for IFML
#
«page»
AlbumSearch
#
«page»
Albums
#
«page»
Album
Album Search
Album Index
Album Detail
Dynamic aspects
#
«index»
MBox List
#
«index»
Message 
Index
SelectMailMessages(mBox)
BPMN and/or UML editor
•
Tight and 
seamless
 
integration
 
between
 
different
 
modeling
 
tools
•
Thanks
 to XMI 
interchange
 format, UML 
profiles
, 
vendor-specific
 
notation
 
implementations
•
Thanks
 to model to model 
transformations
IFML modeling and 
industrial-
strenght
 
UI generation
Model 
i
ntegration
 and interchange 
UML tool implementing 
IFML profile
Other Domain-
specific modeling 
tool
XMI model 
exchange
Model to 
model 
transformation
The tool

Drawing vs. modeling
Tool support for MDE/MDD

An Eclipse-based development
 environment allowing:
•
Modeling: ER + 
IFML
 + BPMN
•
100% code generation
 of standard JEE
 applications
•
Clear separation between design time and run time
•
No proprietary runtime
•
Quick and agile development cycles
•
Extending the generation rules
•
Defining new presentation styles
•
Defining new components
•
Versioning, teamwork, full lifecycle 
mgt
•
Truly multi-role model
-driven development
What is WebRatio
Requirement Analysis 
Solution Modeling
Prototype Generation
Results Verification 
WebRatio is
•
now at 7
th
 release
•
o
n
 the market since 2001
WebRatio customers
•
130+ companies and 500+ commercial users
•
mainly Italy, USA, Europe and Latin America
WebRatio
 
adoption
•
15,000
+ 
users of the free edition
•
Used in hundreds of universities all over the world
WebRatio
 partners
•
40+ software houses and system integrators
•
300+ universities worldwide, 13.000+ students
Some numbers
You capture business requirements in abstract, 
technology independent models
BPMN + IFML
WebRatio 
–
 Step 1
Business
User
WebRatio
Modeller
You 
c
ustomize the environment by defining your own 
generation rules
HTML 5 + CSS   +   Java                      
WebRatio 
–
 Step 2
Layout
Designer
Java
Programmer
You get a tailored, yet standard, Java Web application
with no proprietary runtime
Code generation
WebRatio 
–
 Step 3
WebRatio
Modeller
Business
User
Get the application
Web
App
DBMS
Browser
SOA
Custom
Information
System
Standard execution environment
Standard 
Java
Application 
Server

Involve business 
u
sers in the development process and 
converge quickly to the target
Agile, quick prototyping
Requirement 
Analysis
Solution
Modelling
Application
Generation
Results
Validation

Our innovation environment

Evolution of tool (and language)

The final picture

Agility + MDD
Development
Prototype
Test User
Zero-cost, 1-click, 
prototype 
generation
Final
Application
Development / Testing environment
Final execution environment
Different deployment 
configurations
Iterative, agile 
development
?
Model
Generation
Rules
Generation
Engine
Final
App User
Model
Generation
Rules
Generation
Engine
Do not change the generated application code
Touch
 the generation rules instead
The MDE Virtuous Cycle
Generated
Application
?

Case Studies

Kinds of application
Corporate 
Operations
Human Capital 
Management
Product Life Cycle 
Management
Customer
Relationship
Management
Enterprise 
Resource 
Planning
Supply Chain 
Management
Knowledge 
Support
Sales and Lead
Management
Marketing 
Resources Mgt
Web Customer
Services
B2C/B2B
E-Commerce
Learning 
Management
Document 
Management
Project 
Management
Customer 
Information Mgt
Partner 
Relationship Mgt
Recruitment
Training
Workforce 
Management
Supplier 
Relationship Mgt
Business 
Intelligence
Web Content 
Management
Knowledge 
Management
Risk and 
Compliance
Enterprise 
Governance
Order Mgt
Payment Services 
Orchestration
Web Front-End of 
accounting sys.
Front-Office 
Process Mgt
Financial 
Services
Clienti e settori
Energy 
& Utilities
Industry
Finance
Public Services
Research

B2C + CMS Web applications initially for 14 EU countries 
Corporate 
news, Product technical & commercial data, Service & 
Partner area, Where to Buy
…
Multilingual, multi-actor, distributed workflows for local and 
central PMs, local and central 
MarCom
 managers
... and a: 
very
 
limited
 Time to Market (7 weeks!!)
Acer
Size & effort
Class
 
Dimension
 
Value
 
Number of localized B2C web sites
 
14
 
Number of 
main
 CMS applications
 
4 (Admin,
 News, Product, Other 
content)
 
Number of supported languages
 
12 for B2C Web sites, 
1
 for 
CMS
 
Number of data entry masks
 
39
 
Number of automatic
ally generated database tables
 
46
 
Number of automatically generated database views
 
82
 
Number of automatically generated database 
queries
 
279 for data extraction, 89 for 
data update
 
Number of automatically generated JSP page 
templates
 
48
 
Number of a
utomatically generated or reused Java 
classes
 
250
 
Size
 
Number of automatically generated Java lines of 
code
 
12500 Non commented lines of 
code
 
Number of elapsed workdays
 
49
 
Number of development staff
-
months  (analysts and 
developers)
 
6 staff
-
months (6 weeks x 4 
persons)
 
Total number of prototypes
 
9
 
Average elapsed man days between consecutive 
prototypes
 
5,4
 
Time & 
effort
 
Average number of development man days per 
prototype
 
15,5
 
 
Size & effort
 
 
DEGREE OF AUTOMATION
 
Number of manually written SQL statements
 
17
(SQL constraints)
 
Percentage of automatically generated SQL code
 
96%
 
Number of manually written/adapted Java classes /JSP templates
 
10% JSP templates 
manually adapted
 
Percentage of automa
tically generated Java and JSP code
 
90% JSP templates, 
100% Java classes 
 
COST AND ROI
 
Total cost of software development of first version
 
75.000 €
 
HW, SW licenses, and connectivity cost of first version
 
70.000 € (db server 
license)
 
Return on investment of first version
 
12
-
15 months
 
Average effort of extension to one additional country
 
0,5 staff
-
months
 
Average cost of extension to one add
itional country
 
7.500 €
 
Average ROI of extension to one additional country
 
 
2 months 
 
 
 
PRODUCTIVITY
 
Number of function points
 
177 (B2C web site) 
+ 612 (CMS) = 789
 
Average number of function points delivered per staff
-
month
 
131,5
 
On the positive side:
•
Almost 80% of the delivery effort concentrates in the phases of 
data design, hypertext design and prototyping:
•
more development time is spent with the application stakeholders
MDD allows a more flexible distribution of 
responsibilities between the IT department and the 
business units
The peak productivity rates has reached five times the 
number of delivered function points per staff-month of 
a traditional programming language like Java
Comments
On the negative side..
•
Acer estimates that it took from 4 to 6 months to have fully 
productive developers with MDD, 
IFML, 
and 
WebRatio
•
Difficult to find skilled people
..but..
•
The 
initial investment in human capital required by MDD pays 
off in the mid term
•
MDD benefits testing, maintenance, and evolution (which account 
for over 60% of the total lifecycle cost)
•
reasoning on the system is far more effective at the conceptual 
level 
Comments (
continued)
Maintenance effort
Served Contries and Applications
4
4
4
5
5
17
24
32
41
56
17
21
24
28
31
0
10
20
30
40
50
60
2001
2002
2003
2004
2005
Year
Units
Number of developers
Number of
maintained
applications
Number of served
countries
•
Public company owned by the City of Turin in Italy
•
Local public transport serving 190 million passengers every 
year.
•
A new e-ticketing system (avail able at 
http://
ecommerce.gtt.to.it
 and serving 64,000 daily passengers) 
•
published on-line in only 2 months. 
•
The application comprises 100 page templates 
(IFML 
pages) 
and 1215 
IFML 
units.
•
KEY:  iterative and quick prototyping approach supported by 
WebRatio
GTT: 
Turin Transportation Group
•
Multi-utility company buying and selling wholesale electric 
power. 
•
Integrated Energy Management System that replaced individual 
productivity tools used by traders for the management of 
electric power. 
•
KEY
: quick prototyping approach and involvement of actual 
users in the development process. 
•
Deployment of final app in 6 months after the initial meeting 
with 
WebRatio
 (time to market that took one-third of the time 
estimated in case of adoption of a traditional development)
A2A: 
Utility in Milan
•
Banking (
UniCredit
)
•
BPM + SOA + Web interfaces
•
Crucial points: modularization, multiple models integration, 
multiple tools integration, strict runtime platform 
requirements
•
Banking (ABI)
•
System integration (Pure backend!)
•
Why 
IFML?
•
Latin America 
•
Cooperatives, banks, public bodies, central government
•
Wholesale (IKEA)
•
Financial / leasing (GE Capital)
Other experiences
•
Models integration
•
Large applications with strong need for coherence and 
standardized paradigms
•
Cooperatives, banks, public bodies, central government
•
Service orientation
•
No pure modeling exists
•
Code generation still win-win
Where IFML works 
Components and pages per project
1
"
1
0
"
1
0
0
"
1
0
0
0
"
1
0
0
0
0
"
1
0
0
0
0
0
"
1
0
"
1
0
0
"
1
0
0
0
"
N
u
m
b
e
r
'
o
f
'
u
n
i
t
s
'
N
u
m
b
e
r
'
o
f
'
p
a
g
e
s
'
M
a
n
2
d
a
y
s
'
p
e
r
'
p
a
g
e
'
a
n
d
'
p
e
r
'
u
n
i
t
'
Components per page (
avg
)

0
"
0
.
0
2
"
0
.
0
4
"
0
.
0
6
"
0
.
0
8
"
0
.
1
"
0
.
1
2
"
0
.
1
4
"
0
.
1
6
"
0
.
1
8
"
0
.
2
"
3
0
"
3
0
0
"
3
0
0
0
"
E
f
f
o
r
t
&
(
m
a
n
/
d
a
y
s
&
p
e
r
&
u
n
i
t
)
&
E
f
f
o
r
t
&
p
e
r
&
p
r
o
j
e
c
t
&
(
m
a
n
/
d
a
y
s
)
&
0
"
0
.
2
"
0
.
4
"
0
.
6
"
0
.
8
"
1
"1
.
2
"
3
0
"
3
0
0
"
3
0
0
0
"
E
f
f
o
r
t
&
p
e
r
&
p
a
g
e
&
(
m
a
n
/
d
a
y
s
&
p
e
r
&
p
a
g
e
&
E
f
f
o
r
t
&
p
e
r
&
p
r
o
j
e
c
t
&
(
m
a
n
/
d
a
y
s
)
&Man/days per component
Man/days per page
0
"
0
.
0
2
"
0
.
0
4
"
0
.
0
6
"
0
.
0
8
"
0
.
1
"
0
.
1
2
"
0
.
1
4
"
0
.
1
6
"
0
.
1
8
"
0
.
2
"
3
0
"
3
0
0
"
3
0
0
0
"
E
f
f
o
r
t
&
(
m
a
n
/
d
a
y
s
&
p
e
r
&
u
n
i
t
)
&
E
f
f
o
r
t
&
p
e
r
&
p
r
o
j
e
c
t
&
(
m
a
n
/
d
a
y
s
)
&
0
"
0
.
2
"
0
.
4
"
0
.
6
"
0
.
8
"
1
"
1
.
2
"
3
0
"
3
0
0
"
3
0
0
0
"
E
f
f
o
r
t
&
p
e
r
&
p
a
g
e
&
(
m
a
n
/
d
a
y
s
&
p
e
r
&
p
a
g
e
&
E
f
f
o
r
t
&
p
e
r
&
p
r
o
j
e
c
t
&
(
m
a
n
/
d
a
y
s
)
&
Tool usage stats

S
. 
Ceri
, P. 
Fraternali
, A. 
Bongio
, M. Brambilla, S. 
Comai
, M. Matera: Designing Data-
Intensive 
Web Applications
, Morgan-Kaufmann Publishers, San Francisco, ISBN 1-55860-
843-
5
 
(Series 
edited by Jim Gray, foreword by Adam 
Bosworth) 
590 pages
.
M
. Brambilla, J. Cabot, M. 
Wimmer
: Model Driven Software Engineering in Practice. 
Morgan & Claypool
, USA
, September 2012, foreword by Richard 
Soley
 (OMG), 184 pages. 
ISBN 978-1608458820.
Manolescu
, M. Brambilla, S. 
Ceri
, S. 
Comai
, P. 
Fraternali
: Model-driven design and 
deployment 
of service
-enabled web applications. ACM Trans. Internet Technology (TOIT). 
5(3), pp. 439-479 (2005)
.
M
. Brambilla, S. 
Ceri
, P. 
Fraternali
, I. 
Manolescu
: Process modeling in Web applications. 
ACM 
Trans. 
Softw
. Eng. 
Methodol
 (TOSEM). 15(4), pp. 360-409 (2006).
 M. Brambilla, I. 
Celino
, S. 
Ceri
, D. 
Cerizza
, E. Della Valle, F. M. 
Facca
: Model-Driven 
Design 
and Development 
of Semantic Web Service Applications, ACM Trans. on Internet 
Technology (TOIT). 8(1)
, pp
.3:1 - 3:31 (2007)
.
M
. Brambilla: From Requirements to Implementation of Ad-hoc Social Web Applications: an 
Empirical Pattern
-Based Approach. IET Software, 6(2), 2012, pp.114-126.
M
. Brambilla, S. 
Ceri
, S. 
Comai
, C. 
Tziviskou
. 
Exception
 Handling in 
Workflow-Driven
 Web 
Applications. WWW 
2005 
Int
. Conference on World 
Wide
 Web. ACM, pp. 170-179
.
(some) references
Some Ads
“
Model Driven Software 
Engineering in Practice
”
. 
Brambilla, Cabot, 
Wimmer
.
Morgan&Claypool
, 
USA, 2012
MD
*
 blog
www.modeldrivenstar.com
 
And the upcoming 
IFML book!
See draft made available
Webratio
Download personal version from 
www.webratio.com

Marco Brambilla      
      
marcobrambi
marco.brambilla@webratio.com
Thanks!

